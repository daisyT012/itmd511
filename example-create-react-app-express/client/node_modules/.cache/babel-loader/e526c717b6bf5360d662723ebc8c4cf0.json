{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule CSSPropertyOperations\n * @typechecks static-only\n */\n\"use strict\";\n\nvar CSSProperty = require(\"./CSSProperty\");\n\nvar dangerousStyleValue = require(\"./dangerousStyleValue\");\n\nvar escapeTextForBrowser = require(\"./escapeTextForBrowser\");\n\nvar hyphenate = require(\"./hyphenate\");\n\nvar memoizeStringOnly = require(\"./memoizeStringOnly\");\n\nvar processStyleName = memoizeStringOnly(function (styleName) {\n  return escapeTextForBrowser(hyphenate(styleName));\n});\n/**\n * Operations for dealing with CSS properties.\n */\n\nvar CSSPropertyOperations = {\n  /**\n   * Serializes a mapping of style properties for use as inline styles:\n   *\n   *   > createMarkupForStyles({width: '200px', height: 0})\n   *   \"width:200px;height:0;\"\n   *\n   * Undefined values are ignored so that declarative programming is easier.\n   *\n   * @param {object} styles\n   * @return {?string}\n   */\n  createMarkupForStyles: function (styles) {\n    var serialized = '';\n\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n\n      var styleValue = styles[styleName];\n\n      if (styleValue != null) {\n        serialized += processStyleName(styleName) + ':';\n        serialized += dangerousStyleValue(styleName, styleValue) + ';';\n      }\n    }\n\n    return serialized || null;\n  },\n\n  /**\n   * Sets the value for multiple styles on a node.  If a value is specified as\n   * '' (empty string), the corresponding style property will be unset.\n   *\n   * @param {DOMElement} node\n   * @param {object} styles\n   */\n  setValueForStyles: function (node, styles) {\n    var style = node.style;\n\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n\n      var styleValue = dangerousStyleValue(styleName, styles[styleName]);\n\n      if (styleValue) {\n        style[styleName] = styleValue;\n      } else {\n        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];\n\n        if (expansion) {\n          // Shorthand property that IE8 won't like unsetting, so unset each\n          // component to placate it\n          for (var individualStyleName in expansion) {\n            style[individualStyleName] = '';\n          }\n        } else {\n          style[styleName] = '';\n        }\n      }\n    }\n  }\n};\nmodule.exports = CSSPropertyOperations;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/CSSPropertyOperations.js"],"names":["CSSProperty","require","dangerousStyleValue","escapeTextForBrowser","hyphenate","memoizeStringOnly","processStyleName","styleName","CSSPropertyOperations","createMarkupForStyles","styles","serialized","hasOwnProperty","styleValue","setValueForStyles","node","style","expansion","shorthandPropertyExpansions","individualStyleName","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,uBAAD,CAAjC;;AACA,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,qBAAD,CAA/B;;AAEA,IAAIK,gBAAgB,GAAGD,iBAAiB,CAAC,UAASE,SAAT,EAAoB;AAC3D,SAAOJ,oBAAoB,CAACC,SAAS,CAACG,SAAD,CAAV,CAA3B;AACD,CAFuC,CAAxC;AAIA;AACA;AACA;;AACA,IAAIC,qBAAqB,GAAG;AAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,qBAAqB,EAAE,UAASC,MAAT,EAAiB;AACtC,QAAIC,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAIJ,SAAT,IAAsBG,MAAtB,EAA8B;AAC5B,UAAI,CAACA,MAAM,CAACE,cAAP,CAAsBL,SAAtB,CAAL,EAAuC;AACrC;AACD;;AACD,UAAIM,UAAU,GAAGH,MAAM,CAACH,SAAD,CAAvB;;AACA,UAAIM,UAAU,IAAI,IAAlB,EAAwB;AACtBF,QAAAA,UAAU,IAAIL,gBAAgB,CAACC,SAAD,CAAhB,GAA8B,GAA5C;AACAI,QAAAA,UAAU,IAAIT,mBAAmB,CAACK,SAAD,EAAYM,UAAZ,CAAnB,GAA6C,GAA3D;AACD;AACF;;AACD,WAAOF,UAAU,IAAI,IAArB;AACD,GA1ByB;;AA4B1B;AACF;AACA;AACA;AACA;AACA;AACA;AACEG,EAAAA,iBAAiB,EAAE,UAASC,IAAT,EAAeL,MAAf,EAAuB;AACxC,QAAIM,KAAK,GAAGD,IAAI,CAACC,KAAjB;;AACA,SAAK,IAAIT,SAAT,IAAsBG,MAAtB,EAA8B;AAC5B,UAAI,CAACA,MAAM,CAACE,cAAP,CAAsBL,SAAtB,CAAL,EAAuC;AACrC;AACD;;AACD,UAAIM,UAAU,GAAGX,mBAAmB,CAACK,SAAD,EAAYG,MAAM,CAACH,SAAD,CAAlB,CAApC;;AACA,UAAIM,UAAJ,EAAgB;AACdG,QAAAA,KAAK,CAACT,SAAD,CAAL,GAAmBM,UAAnB;AACD,OAFD,MAEO;AACL,YAAII,SAAS,GAAGjB,WAAW,CAACkB,2BAAZ,CAAwCX,SAAxC,CAAhB;;AACA,YAAIU,SAAJ,EAAe;AACb;AACA;AACA,eAAK,IAAIE,mBAAT,IAAgCF,SAAhC,EAA2C;AACzCD,YAAAA,KAAK,CAACG,mBAAD,CAAL,GAA6B,EAA7B;AACD;AACF,SAND,MAMO;AACLH,UAAAA,KAAK,CAACT,SAAD,CAAL,GAAmB,EAAnB;AACD;AACF;AACF;AACF;AAzDyB,CAA5B;AA6DAa,MAAM,CAACC,OAAP,GAAiBb,qBAAjB","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule CSSPropertyOperations\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar CSSProperty = require(\"./CSSProperty\");\n\nvar dangerousStyleValue = require(\"./dangerousStyleValue\");\nvar escapeTextForBrowser = require(\"./escapeTextForBrowser\");\nvar hyphenate = require(\"./hyphenate\");\nvar memoizeStringOnly = require(\"./memoizeStringOnly\");\n\nvar processStyleName = memoizeStringOnly(function(styleName) {\n  return escapeTextForBrowser(hyphenate(styleName));\n});\n\n/**\n * Operations for dealing with CSS properties.\n */\nvar CSSPropertyOperations = {\n\n  /**\n   * Serializes a mapping of style properties for use as inline styles:\n   *\n   *   > createMarkupForStyles({width: '200px', height: 0})\n   *   \"width:200px;height:0;\"\n   *\n   * Undefined values are ignored so that declarative programming is easier.\n   *\n   * @param {object} styles\n   * @return {?string}\n   */\n  createMarkupForStyles: function(styles) {\n    var serialized = '';\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      var styleValue = styles[styleName];\n      if (styleValue != null) {\n        serialized += processStyleName(styleName) + ':';\n        serialized += dangerousStyleValue(styleName, styleValue) + ';';\n      }\n    }\n    return serialized || null;\n  },\n\n  /**\n   * Sets the value for multiple styles on a node.  If a value is specified as\n   * '' (empty string), the corresponding style property will be unset.\n   *\n   * @param {DOMElement} node\n   * @param {object} styles\n   */\n  setValueForStyles: function(node, styles) {\n    var style = node.style;\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      var styleValue = dangerousStyleValue(styleName, styles[styleName]);\n      if (styleValue) {\n        style[styleName] = styleValue;\n      } else {\n        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];\n        if (expansion) {\n          // Shorthand property that IE8 won't like unsetting, so unset each\n          // component to placate it\n          for (var individualStyleName in expansion) {\n            style[individualStyleName] = '';\n          }\n        } else {\n          style[styleName] = '';\n        }\n      }\n    }\n  }\n\n};\n\nmodule.exports = CSSPropertyOperations;\n"]},"metadata":{},"sourceType":"script"}