{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ge\n */\n\n/**\n * Find a node by ID.  Optionally search a sub-tree outside of the document\n *\n * Use ge if you're not sure whether or not the element exists. You can test\n * for existence yourself in your application code.\n *\n * If your application code depends on the existence of the element, use $\n * instead, which will throw in DEV if the element doesn't exist.\n */\nfunction ge(arg, root, tag) {\n  return typeof arg != 'string' ? arg : !root ? document.getElementById(arg) : _geFromSubtree(arg, root, tag);\n}\n\nfunction _geFromSubtree(id, root, tag) {\n  var elem, children, ii;\n\n  if (_getNodeID(root) == id) {\n    return root;\n  } else if (root.getElementsByTagName) {\n    // All Elements implement this, which does an iterative DFS, which is\n    // faster than recursion and doesn't run into stack depth issues.\n    children = root.getElementsByTagName(tag || '*');\n\n    for (ii = 0; ii < children.length; ii++) {\n      if (_getNodeID(children[ii]) == id) {\n        return children[ii];\n      }\n    }\n  } else {\n    // DocumentFragment does not implement getElementsByTagName, so\n    // recurse over its children. Its children must be Elements, so\n    // each child will use the getElementsByTagName case instead.\n    children = root.childNodes;\n\n    for (ii = 0; ii < children.length; ii++) {\n      elem = _geFromSubtree(id, children[ii]);\n\n      if (elem) {\n        return elem;\n      }\n    }\n  }\n\n  return null;\n}\n/**\n * Return the ID value for a given node. This allows us to avoid issues\n * with forms that contain inputs with name=\"id\".\n *\n * @return string (null if attribute not set)\n */\n\n\nfunction _getNodeID(node) {\n  // #document and #document-fragment do not have getAttributeNode.\n  var id = node.getAttributeNode && node.getAttributeNode('id');\n  return id ? id.value : null;\n}\n\nmodule.exports = ge;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ge.js"],"names":["ge","arg","root","tag","document","getElementById","_geFromSubtree","id","elem","children","ii","_getNodeID","getElementsByTagName","length","childNodes","node","getAttributeNode","value","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,EAAT,CAAYC,GAAZ,EAAiBC,IAAjB,EAAuBC,GAAvB,EAA4B;AAC1B,SAAO,OAAOF,GAAP,IAAc,QAAd,GAAyBA,GAAzB,GACL,CAACC,IAAD,GAAQE,QAAQ,CAACC,cAAT,CAAwBJ,GAAxB,CAAR,GACAK,cAAc,CAACL,GAAD,EAAMC,IAAN,EAAYC,GAAZ,CAFhB;AAGD;;AAED,SAASG,cAAT,CAAwBC,EAAxB,EAA4BL,IAA5B,EAAkCC,GAAlC,EAAuC;AACrC,MAAIK,IAAJ,EAAUC,QAAV,EAAoBC,EAApB;;AAEA,MAAIC,UAAU,CAACT,IAAD,CAAV,IAAoBK,EAAxB,EAA4B;AAC1B,WAAOL,IAAP;AACD,GAFD,MAEO,IAAIA,IAAI,CAACU,oBAAT,EAA+B;AACpC;AACA;AACAH,IAAAA,QAAQ,GAAGP,IAAI,CAACU,oBAAL,CAA0BT,GAAG,IAAI,GAAjC,CAAX;;AACA,SAAKO,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAGD,QAAQ,CAACI,MAA3B,EAAmCH,EAAE,EAArC,EAAyC;AACvC,UAAIC,UAAU,CAACF,QAAQ,CAACC,EAAD,CAAT,CAAV,IAA4BH,EAAhC,EAAoC;AAClC,eAAOE,QAAQ,CAACC,EAAD,CAAf;AACD;AACF;AACF,GATM,MASA;AACL;AACA;AACA;AACAD,IAAAA,QAAQ,GAAGP,IAAI,CAACY,UAAhB;;AACA,SAAKJ,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAGD,QAAQ,CAACI,MAA3B,EAAmCH,EAAE,EAArC,EAAyC;AACvCF,MAAAA,IAAI,GAAGF,cAAc,CAACC,EAAD,EAAKE,QAAQ,CAACC,EAAD,CAAb,CAArB;;AACA,UAAIF,IAAJ,EAAU;AACR,eAAOA,IAAP;AACD;AACF;AACF;;AAED,SAAO,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,UAAT,CAAoBI,IAApB,EAA0B;AACxB;AACA,MAAIR,EAAE,GAAGQ,IAAI,CAACC,gBAAL,IAAyBD,IAAI,CAACC,gBAAL,CAAsB,IAAtB,CAAlC;AACA,SAAOT,EAAE,GAAGA,EAAE,CAACU,KAAN,GAAc,IAAvB;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBnB,EAAjB","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ge\n */\n\n/**\n * Find a node by ID.  Optionally search a sub-tree outside of the document\n *\n * Use ge if you're not sure whether or not the element exists. You can test\n * for existence yourself in your application code.\n *\n * If your application code depends on the existence of the element, use $\n * instead, which will throw in DEV if the element doesn't exist.\n */\nfunction ge(arg, root, tag) {\n  return typeof arg != 'string' ? arg :\n    !root ? document.getElementById(arg) :\n    _geFromSubtree(arg, root, tag);\n}\n\nfunction _geFromSubtree(id, root, tag) {\n  var elem, children, ii;\n\n  if (_getNodeID(root) == id) {\n    return root;\n  } else if (root.getElementsByTagName) {\n    // All Elements implement this, which does an iterative DFS, which is\n    // faster than recursion and doesn't run into stack depth issues.\n    children = root.getElementsByTagName(tag || '*');\n    for (ii = 0; ii < children.length; ii++) {\n      if (_getNodeID(children[ii]) == id) {\n        return children[ii];\n      }\n    }\n  } else {\n    // DocumentFragment does not implement getElementsByTagName, so\n    // recurse over its children. Its children must be Elements, so\n    // each child will use the getElementsByTagName case instead.\n    children = root.childNodes;\n    for (ii = 0; ii < children.length; ii++) {\n      elem = _geFromSubtree(id, children[ii]);\n      if (elem) {\n        return elem;\n      }\n    }\n  }\n\n  return null;\n}\n\n/**\n * Return the ID value for a given node. This allows us to avoid issues\n * with forms that contain inputs with name=\"id\".\n *\n * @return string (null if attribute not set)\n */\nfunction _getNodeID(node) {\n  // #document and #document-fragment do not have getAttributeNode.\n  var id = node.getAttributeNode && node.getAttributeNode('id');\n  return id ? id.value : null;\n}\n\nmodule.exports = ge;\n"]},"metadata":{},"sourceType":"script"}