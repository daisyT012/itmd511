{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactMount\n */\n\"use strict\";\n\nvar ReactEventEmitter = require(\"./ReactEventEmitter\");\n\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\n\nvar $ = require(\"./$\");\n\nvar containsNode = require(\"./containsNode\");\n\nvar getReactRootElementInContainer = require(\"./getReactRootElementInContainer\");\n\nvar invariant = require(\"./invariant\");\n\nvar SEPARATOR = ReactInstanceHandles.SEPARATOR;\nvar ATTR_NAME = 'data-reactid';\nvar nodeCache = {};\nvar ELEMENT_NODE_TYPE = 1;\nvar DOC_NODE_TYPE = 9;\n/** Mapping from reactRootID to React component instance. */\n\nvar instancesByReactRootID = {};\n/** Mapping from reactRootID to `container` nodes. */\n\nvar containersByReactRootID = {};\n\nif (\"production\" !== process.env.NODE_ENV) {\n  /** __DEV__-only mapping from reactRootID to root elements. */\n  var rootElementsByReactRootID = {};\n}\n/**\n * @param {DOMElement} container DOM element that may contain a React component.\n * @return {?string} A \"reactRoot\" ID, if a React component is rendered.\n */\n\n\nfunction getReactRootID(container) {\n  var rootElement = getReactRootElementInContainer(container);\n  return rootElement && ReactMount.getID(rootElement);\n}\n/**\n * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form\n * element can return its control whose name or ID equals ATTR_NAME. All\n * DOM nodes support `getAttributeNode` but this can also get called on\n * other objects so just return '' if we're given something other than a\n * DOM node (such as window).\n *\n * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.\n * @return {string} ID of the supplied `domNode`.\n */\n\n\nfunction getID(node) {\n  var id = internalGetID(node);\n\n  if (id) {\n    if (nodeCache.hasOwnProperty(id)) {\n      var cached = nodeCache[id];\n\n      if (cached !== node) {\n        \"production\" !== process.env.NODE_ENV ? invariant(!isValid(cached, id), 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(!isValid(cached, id));\n        nodeCache[id] = node;\n      }\n    } else {\n      nodeCache[id] = node;\n    }\n  }\n\n  return id;\n}\n\nfunction internalGetID(node) {\n  // If node is something like a window, document, or text node, none of\n  // which support attributes or a .getAttribute method, gracefully return\n  // the empty string, as if the attribute were missing.\n  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';\n}\n/**\n * Sets the React-specific ID of the given node.\n *\n * @param {DOMElement} node The DOM node whose ID will be set.\n * @param {string} id The value of the ID attribute.\n */\n\n\nfunction setID(node, id) {\n  var oldID = internalGetID(node);\n\n  if (oldID !== id) {\n    delete nodeCache[oldID];\n  }\n\n  node.setAttribute(ATTR_NAME, id);\n  nodeCache[id] = node;\n}\n/**\n * Finds the node with the supplied React-generated DOM ID.\n *\n * @param {string} id A React-generated DOM ID.\n * @return {DOMElement} DOM node with the suppled `id`.\n * @internal\n */\n\n\nfunction getNode(id) {\n  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {\n    nodeCache[id] = ReactMount.findReactNodeByID(id);\n  }\n\n  return nodeCache[id];\n}\n/**\n * A node is \"valid\" if it is contained by a currently mounted container.\n *\n * This means that the node does not have to be contained by a document in\n * order to be considered valid.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @param {string} id The expected ID of the node.\n * @return {boolean} Whether the node is contained by a mounted container.\n */\n\n\nfunction isValid(node, id) {\n  if (node) {\n    \"production\" !== process.env.NODE_ENV ? invariant(internalGetID(node) === id, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(internalGetID(node) === id);\n    var container = ReactMount.findReactContainerForID(id);\n\n    if (container && containsNode(container, node)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Causes the cache to forget about one React-specific ID.\n *\n * @param {string} id The ID to forget.\n */\n\n\nfunction purgeID(id) {\n  delete nodeCache[id];\n}\n/**\n * Mounting is the process of initializing a React component by creatings its\n * representative DOM elements and inserting them into a supplied `container`.\n * Any prior content inside `container` is destroyed in the process.\n *\n *   ReactMount.renderComponent(component, $('container'));\n *\n *   <div id=\"container\">                   <-- Supplied `container`.\n *     <div data-reactid=\".r[3]\">           <-- Rendered reactRoot of React\n *       // ...                                 component.\n *     </div>\n *   </div>\n *\n * Inside of `container`, the first element rendered is the \"reactRoot\".\n */\n\n\nvar ReactMount = {\n  /**\n   * Safety guard to prevent accidentally rendering over the entire HTML tree.\n   */\n  allowFullPageRender: false,\n\n  /** Time spent generating markup. */\n  totalInstantiationTime: 0,\n\n  /** Time spent inserting markup into the DOM. */\n  totalInjectionTime: 0,\n\n  /** Whether support for touch events should be initialized. */\n  useTouchEvents: false,\n\n  /** Exposed for debugging purposes **/\n  _instancesByReactRootID: instancesByReactRootID,\n\n  /**\n   * This is a hook provided to support rendering React components while\n   * ensuring that the apparent scroll position of its `container` does not\n   * change.\n   *\n   * @param {DOMElement} container The `container` being rendered into.\n   * @param {function} renderCallback This must be called once to do the render.\n   */\n  scrollMonitor: function (container, renderCallback) {\n    renderCallback();\n  },\n\n  /**\n   * Ensures that the top-level event delegation listener is set up. This will\n   * be invoked some time before the first time any React component is rendered.\n   * @param {DOMElement} container container we're rendering into\n   *\n   * @private\n   */\n  prepareEnvironmentForDOM: function (container) {\n    \"production\" !== process.env.NODE_ENV ? invariant(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE), 'prepareEnvironmentForDOM(...): Target container is not a DOM element.') : invariant(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE));\n    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;\n    ReactEventEmitter.ensureListening(ReactMount.useTouchEvents, doc);\n  },\n\n  /**\n   * Take a component that's already mounted into the DOM and replace its props\n   * @param {ReactComponent} prevComponent component instance already in the DOM\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {?function} callback function triggered on completion\n   */\n  _updateRootComponent: function (prevComponent, nextComponent, container, callback) {\n    var nextProps = nextComponent.props;\n    ReactMount.scrollMonitor(container, function () {\n      prevComponent.replaceProps(nextProps, callback);\n    });\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // Record the root element in case it later gets transplanted.\n      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);\n    }\n\n    return prevComponent;\n  },\n\n  /**\n   * Register a component into the instance map and start the events system.\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @return {string} reactRoot ID prefix\n   */\n  _registerComponent: function (nextComponent, container) {\n    ReactMount.prepareEnvironmentForDOM(container);\n    var reactRootID = ReactMount.registerContainer(container);\n    instancesByReactRootID[reactRootID] = nextComponent;\n    return reactRootID;\n  },\n\n  /**\n   * Render a new component into the DOM.\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion\n   * @return {ReactComponent} nextComponent\n   */\n  _renderNewRootComponent: function (nextComponent, container, shouldReuseMarkup) {\n    var reactRootID = ReactMount._registerComponent(nextComponent, container);\n\n    nextComponent.mountComponentIntoNode(reactRootID, container, shouldReuseMarkup);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // Record the root element in case it later gets transplanted.\n      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);\n    }\n\n    return nextComponent;\n  },\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactComponent} nextComponent Component instance to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  renderComponent: function (nextComponent, container, callback) {\n    var registeredComponent = instancesByReactRootID[getReactRootID(container)];\n\n    if (registeredComponent) {\n      if (registeredComponent.constructor === nextComponent.constructor) {\n        return ReactMount._updateRootComponent(registeredComponent, nextComponent, container, callback);\n      } else {\n        ReactMount.unmountComponentAtNode(container);\n      }\n    }\n\n    var reactRootElement = getReactRootElementInContainer(container);\n    var containerHasReactMarkup = reactRootElement && ReactMount.isRenderedByReact(reactRootElement);\n    var shouldReuseMarkup = containerHasReactMarkup && !registeredComponent;\n\n    var component = ReactMount._renderNewRootComponent(nextComponent, container, shouldReuseMarkup);\n\n    callback && callback();\n    return component;\n  },\n\n  /**\n   * Constructs a component instance of `constructor` with `initialProps` and\n   * renders it into the supplied `container`.\n   *\n   * @param {function} constructor React component constructor.\n   * @param {?object} props Initial props of the component instance.\n   * @param {DOMElement} container DOM element to render into.\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  constructAndRenderComponent: function (constructor, props, container) {\n    return ReactMount.renderComponent(constructor(props), container);\n  },\n\n  /**\n   * Constructs a component instance of `constructor` with `initialProps` and\n   * renders it into a container node identified by supplied `id`.\n   *\n   * @param {function} componentConstructor React component constructor\n   * @param {?object} props Initial props of the component instance.\n   * @param {string} id ID of the DOM element to render into.\n   * @return {ReactComponent} Component instance rendered in the container node.\n   */\n  constructAndRenderComponentByID: function (constructor, props, id) {\n    return ReactMount.constructAndRenderComponent(constructor, props, $(id));\n  },\n\n  /**\n   * Registers a container node into which React components will be rendered.\n   * This also creates the \"reatRoot\" ID that will be assigned to the element\n   * rendered within.\n   *\n   * @param {DOMElement} container DOM element to register as a container.\n   * @return {string} The \"reactRoot\" ID of elements rendered within.\n   */\n  registerContainer: function (container) {\n    var reactRootID = getReactRootID(container);\n\n    if (reactRootID) {\n      // If one exists, make sure it is a valid \"reactRoot\" ID.\n      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);\n    }\n\n    if (!reactRootID) {\n      // No valid \"reactRoot\" ID found, create one.\n      reactRootID = ReactInstanceHandles.createReactRootID();\n    }\n\n    containersByReactRootID[reactRootID] = container;\n    return reactRootID;\n  },\n\n  /**\n   * Unmounts and destroys the React component rendered in the `container`.\n   *\n   * @param {DOMElement} container DOM element containing a React component.\n   * @return {boolean} True if a component was found in and unmounted from\n   *                   `container`\n   */\n  unmountComponentAtNode: function (container) {\n    var reactRootID = getReactRootID(container);\n    var component = instancesByReactRootID[reactRootID];\n\n    if (!component) {\n      return false;\n    }\n\n    ReactMount.unmountComponentFromNode(component, container);\n    delete instancesByReactRootID[reactRootID];\n    delete containersByReactRootID[reactRootID];\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      delete rootElementsByReactRootID[reactRootID];\n    }\n\n    return true;\n  },\n\n  /**\n   * @deprecated\n   */\n  unmountAndReleaseReactRootNode: function () {\n    if (\"production\" !== process.env.NODE_ENV) {\n      console.warn('unmountAndReleaseReactRootNode() has been renamed to ' + 'unmountComponentAtNode() and will be removed in the next ' + 'version of React.');\n    }\n\n    return ReactMount.unmountComponentAtNode.apply(this, arguments);\n  },\n\n  /**\n   * Unmounts a component and removes it from the DOM.\n   *\n   * @param {ReactComponent} instance React component instance.\n   * @param {DOMElement} container DOM element to unmount from.\n   * @final\n   * @internal\n   * @see {ReactMount.unmountComponentAtNode}\n   */\n  unmountComponentFromNode: function (instance, container) {\n    instance.unmountComponent();\n\n    if (container.nodeType === DOC_NODE_TYPE) {\n      container = container.documentElement;\n    } // http://jsperf.com/emptying-a-node\n\n\n    while (container.lastChild) {\n      container.removeChild(container.lastChild);\n    }\n  },\n\n  /**\n   * Finds the container DOM element that contains React component to which the\n   * supplied DOM `id` belongs.\n   *\n   * @param {string} id The ID of an element rendered by a React component.\n   * @return {?DOMElement} DOM element that contains the `id`.\n   */\n  findReactContainerForID: function (id) {\n    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);\n    var container = containersByReactRootID[reactRootID];\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      var rootElement = rootElementsByReactRootID[reactRootID];\n\n      if (rootElement && rootElement.parentNode !== container) {\n        \"production\" !== process.env.NODE_ENV ? invariant( // Call internalGetID here because getID calls isValid which calls\n        // findReactContainerForID (this function).\n        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : invariant( // Call internalGetID here because getID calls isValid which calls\n        // findReactContainerForID (this function).\n        internalGetID(rootElement) === reactRootID);\n        var containerChild = container.firstChild;\n\n        if (containerChild && reactRootID === internalGetID(containerChild)) {\n          // If the container has a new child with the same ID as the old\n          // root element, then rootElementsByReactRootID[reactRootID] is\n          // just stale and needs to be updated. The case that deserves a\n          // warning is when the container is empty.\n          rootElementsByReactRootID[reactRootID] = containerChild;\n        } else {\n          console.warn('ReactMount: Root element has been removed from its original ' + 'container. New container:', rootElement.parentNode);\n        }\n      }\n    }\n\n    return container;\n  },\n\n  /**\n   * Finds an element rendered by React with the supplied ID.\n   *\n   * @param {string} id ID of a DOM node in the React component.\n   * @return {DOMElement} Root DOM node of the React component.\n   */\n  findReactNodeByID: function (id) {\n    var reactRoot = ReactMount.findReactContainerForID(id);\n    return ReactMount.findComponentRoot(reactRoot, id);\n  },\n\n  /**\n   * True if the supplied `node` is rendered by React.\n   *\n   * @param {*} node DOM Element to check.\n   * @return {boolean} True if the DOM Element appears to be rendered by React.\n   * @internal\n   */\n  isRenderedByReact: function (node) {\n    if (node.nodeType !== 1) {\n      // Not a DOMElement, therefore not a React component\n      return false;\n    }\n\n    var id = ReactMount.getID(node);\n    return id ? id.charAt(0) === SEPARATOR : false;\n  },\n\n  /**\n   * Traverses up the ancestors of the supplied node to find a node that is a\n   * DOM representation of a React component.\n   *\n   * @param {*} node\n   * @return {?DOMEventTarget}\n   * @internal\n   */\n  getFirstReactDOM: function (node) {\n    var current = node;\n\n    while (current && current.parentNode !== current) {\n      if (ReactMount.isRenderedByReact(current)) {\n        return current;\n      }\n\n      current = current.parentNode;\n    }\n\n    return null;\n  },\n\n  /**\n   * Finds a node with the supplied `id` inside of the supplied `ancestorNode`.\n   * Exploits the ID naming scheme to perform the search quickly.\n   *\n   * @param {DOMEventTarget} ancestorNode Search from this root.\n   * @pararm {string} id ID of the DOM representation of the component.\n   * @return {DOMEventTarget} DOM node with the supplied `id`.\n   * @internal\n   */\n  findComponentRoot: function (ancestorNode, id) {\n    var firstChildren = [ancestorNode.firstChild];\n    var childIndex = 0;\n\n    while (childIndex < firstChildren.length) {\n      var child = firstChildren[childIndex++];\n\n      while (child) {\n        var childID = ReactMount.getID(child);\n\n        if (childID) {\n          if (id === childID) {\n            return child;\n          } else if (ReactInstanceHandles.isAncestorIDOf(childID, id)) {\n            // If we find a child whose ID is an ancestor of the given ID,\n            // then we can be sure that we only want to search the subtree\n            // rooted at this child, so we can throw out the rest of the\n            // search state.\n            firstChildren.length = childIndex = 0;\n            firstChildren.push(child.firstChild);\n            break;\n          } else {\n            // TODO This should not be necessary if the ID hierarchy is\n            // correct, but is occasionally necessary if the DOM has been\n            // modified in unexpected ways.\n            firstChildren.push(child.firstChild);\n          }\n        } else {\n          // If this child had no ID, then there's a chance that it was\n          // injected automatically by the browser, as when a `<table>`\n          // element sprouts an extra `<tbody>` child as a side effect of\n          // `.innerHTML` parsing. Optimistically continue down this\n          // branch, but not before examining the other siblings.\n          firstChildren.push(child.firstChild);\n        }\n\n        child = child.nextSibling;\n      }\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      console.error('Error while invoking `findComponentRoot` with the following ' + 'ancestor node:', ancestorNode);\n    }\n\n    \"production\" !== process.env.NODE_ENV ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g. by the browser).', id, ReactMount.getID(ancestorNode)) : invariant(false);\n  },\n\n  /**\n   * React ID utilities.\n   */\n  ATTR_NAME: ATTR_NAME,\n  getReactRootID: getReactRootID,\n  getID: getID,\n  setID: setID,\n  getNode: getNode,\n  purgeID: purgeID,\n  injection: {}\n};\nmodule.exports = ReactMount;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ReactMount.js"],"names":["ReactEventEmitter","require","ReactInstanceHandles","$","containsNode","getReactRootElementInContainer","invariant","SEPARATOR","ATTR_NAME","nodeCache","ELEMENT_NODE_TYPE","DOC_NODE_TYPE","instancesByReactRootID","containersByReactRootID","process","env","NODE_ENV","rootElementsByReactRootID","getReactRootID","container","rootElement","ReactMount","getID","node","id","internalGetID","hasOwnProperty","cached","isValid","getAttribute","setID","oldID","setAttribute","getNode","findReactNodeByID","findReactContainerForID","purgeID","allowFullPageRender","totalInstantiationTime","totalInjectionTime","useTouchEvents","_instancesByReactRootID","scrollMonitor","renderCallback","prepareEnvironmentForDOM","nodeType","doc","ownerDocument","ensureListening","_updateRootComponent","prevComponent","nextComponent","callback","nextProps","props","replaceProps","_registerComponent","reactRootID","registerContainer","_renderNewRootComponent","shouldReuseMarkup","mountComponentIntoNode","renderComponent","registeredComponent","constructor","unmountComponentAtNode","reactRootElement","containerHasReactMarkup","isRenderedByReact","component","constructAndRenderComponent","constructAndRenderComponentByID","getReactRootIDFromNodeID","createReactRootID","unmountComponentFromNode","unmountAndReleaseReactRootNode","console","warn","apply","arguments","instance","unmountComponent","documentElement","lastChild","removeChild","parentNode","containerChild","firstChild","reactRoot","findComponentRoot","charAt","getFirstReactDOM","current","ancestorNode","firstChildren","childIndex","length","child","childID","isAncestorIDOf","push","nextSibling","error","injection","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactMount\n */\n\n\"use strict\";\n\nvar ReactEventEmitter = require(\"./ReactEventEmitter\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\n\nvar $ = require(\"./$\");\nvar containsNode = require(\"./containsNode\");\nvar getReactRootElementInContainer = require(\"./getReactRootElementInContainer\");\nvar invariant = require(\"./invariant\");\n\nvar SEPARATOR = ReactInstanceHandles.SEPARATOR;\n\nvar ATTR_NAME = 'data-reactid';\nvar nodeCache = {};\n\nvar ELEMENT_NODE_TYPE = 1;\nvar DOC_NODE_TYPE = 9;\n\n/** Mapping from reactRootID to React component instance. */\nvar instancesByReactRootID = {};\n\n/** Mapping from reactRootID to `container` nodes. */\nvar containersByReactRootID = {};\n\nif (\"production\" !== process.env.NODE_ENV) {\n  /** __DEV__-only mapping from reactRootID to root elements. */\n  var rootElementsByReactRootID = {};\n}\n\n/**\n * @param {DOMElement} container DOM element that may contain a React component.\n * @return {?string} A \"reactRoot\" ID, if a React component is rendered.\n */\nfunction getReactRootID(container) {\n  var rootElement = getReactRootElementInContainer(container);\n  return rootElement && ReactMount.getID(rootElement);\n}\n\n/**\n * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form\n * element can return its control whose name or ID equals ATTR_NAME. All\n * DOM nodes support `getAttributeNode` but this can also get called on\n * other objects so just return '' if we're given something other than a\n * DOM node (such as window).\n *\n * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.\n * @return {string} ID of the supplied `domNode`.\n */\nfunction getID(node) {\n  var id = internalGetID(node);\n  if (id) {\n    if (nodeCache.hasOwnProperty(id)) {\n      var cached = nodeCache[id];\n      if (cached !== node) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          !isValid(cached, id),\n          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',\n          ATTR_NAME, id\n        ) : invariant(!isValid(cached, id)));\n\n        nodeCache[id] = node;\n      }\n    } else {\n      nodeCache[id] = node;\n    }\n  }\n\n  return id;\n}\n\nfunction internalGetID(node) {\n  // If node is something like a window, document, or text node, none of\n  // which support attributes or a .getAttribute method, gracefully return\n  // the empty string, as if the attribute were missing.\n  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';\n}\n\n/**\n * Sets the React-specific ID of the given node.\n *\n * @param {DOMElement} node The DOM node whose ID will be set.\n * @param {string} id The value of the ID attribute.\n */\nfunction setID(node, id) {\n  var oldID = internalGetID(node);\n  if (oldID !== id) {\n    delete nodeCache[oldID];\n  }\n  node.setAttribute(ATTR_NAME, id);\n  nodeCache[id] = node;\n}\n\n/**\n * Finds the node with the supplied React-generated DOM ID.\n *\n * @param {string} id A React-generated DOM ID.\n * @return {DOMElement} DOM node with the suppled `id`.\n * @internal\n */\nfunction getNode(id) {\n  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {\n    nodeCache[id] = ReactMount.findReactNodeByID(id);\n  }\n  return nodeCache[id];\n}\n\n/**\n * A node is \"valid\" if it is contained by a currently mounted container.\n *\n * This means that the node does not have to be contained by a document in\n * order to be considered valid.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @param {string} id The expected ID of the node.\n * @return {boolean} Whether the node is contained by a mounted container.\n */\nfunction isValid(node, id) {\n  if (node) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      internalGetID(node) === id,\n      'ReactMount: Unexpected modification of `%s`',\n      ATTR_NAME\n    ) : invariant(internalGetID(node) === id));\n\n    var container = ReactMount.findReactContainerForID(id);\n    if (container && containsNode(container, node)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Causes the cache to forget about one React-specific ID.\n *\n * @param {string} id The ID to forget.\n */\nfunction purgeID(id) {\n  delete nodeCache[id];\n}\n\n/**\n * Mounting is the process of initializing a React component by creatings its\n * representative DOM elements and inserting them into a supplied `container`.\n * Any prior content inside `container` is destroyed in the process.\n *\n *   ReactMount.renderComponent(component, $('container'));\n *\n *   <div id=\"container\">                   <-- Supplied `container`.\n *     <div data-reactid=\".r[3]\">           <-- Rendered reactRoot of React\n *       // ...                                 component.\n *     </div>\n *   </div>\n *\n * Inside of `container`, the first element rendered is the \"reactRoot\".\n */\nvar ReactMount = {\n  /**\n   * Safety guard to prevent accidentally rendering over the entire HTML tree.\n   */\n  allowFullPageRender: false,\n\n  /** Time spent generating markup. */\n  totalInstantiationTime: 0,\n\n  /** Time spent inserting markup into the DOM. */\n  totalInjectionTime: 0,\n\n  /** Whether support for touch events should be initialized. */\n  useTouchEvents: false,\n\n  /** Exposed for debugging purposes **/\n  _instancesByReactRootID: instancesByReactRootID,\n\n  /**\n   * This is a hook provided to support rendering React components while\n   * ensuring that the apparent scroll position of its `container` does not\n   * change.\n   *\n   * @param {DOMElement} container The `container` being rendered into.\n   * @param {function} renderCallback This must be called once to do the render.\n   */\n  scrollMonitor: function(container, renderCallback) {\n    renderCallback();\n  },\n\n  /**\n   * Ensures that the top-level event delegation listener is set up. This will\n   * be invoked some time before the first time any React component is rendered.\n   * @param {DOMElement} container container we're rendering into\n   *\n   * @private\n   */\n  prepareEnvironmentForDOM: function(container) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      container && (\n        container.nodeType === ELEMENT_NODE_TYPE ||\n        container.nodeType === DOC_NODE_TYPE\n      ),\n      'prepareEnvironmentForDOM(...): Target container is not a DOM element.'\n    ) : invariant(container && (\n      container.nodeType === ELEMENT_NODE_TYPE ||\n      container.nodeType === DOC_NODE_TYPE\n    )));\n    var doc = container.nodeType === ELEMENT_NODE_TYPE ?\n      container.ownerDocument :\n      container;\n    ReactEventEmitter.ensureListening(ReactMount.useTouchEvents, doc);\n  },\n\n  /**\n   * Take a component that's already mounted into the DOM and replace its props\n   * @param {ReactComponent} prevComponent component instance already in the DOM\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {?function} callback function triggered on completion\n   */\n  _updateRootComponent: function(\n      prevComponent,\n      nextComponent,\n      container,\n      callback) {\n    var nextProps = nextComponent.props;\n    ReactMount.scrollMonitor(container, function() {\n      prevComponent.replaceProps(nextProps, callback);\n    });\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // Record the root element in case it later gets transplanted.\n      rootElementsByReactRootID[getReactRootID(container)] =\n        getReactRootElementInContainer(container);\n    }\n\n    return prevComponent;\n  },\n\n  /**\n   * Register a component into the instance map and start the events system.\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @return {string} reactRoot ID prefix\n   */\n  _registerComponent: function(nextComponent, container) {\n    ReactMount.prepareEnvironmentForDOM(container);\n\n    var reactRootID = ReactMount.registerContainer(container);\n    instancesByReactRootID[reactRootID] = nextComponent;\n    return reactRootID;\n  },\n\n  /**\n   * Render a new component into the DOM.\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion\n   * @return {ReactComponent} nextComponent\n   */\n  _renderNewRootComponent: function(\n      nextComponent,\n      container,\n      shouldReuseMarkup) {\n    var reactRootID = ReactMount._registerComponent(nextComponent, container);\n    nextComponent.mountComponentIntoNode(\n      reactRootID,\n      container,\n      shouldReuseMarkup\n    );\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // Record the root element in case it later gets transplanted.\n      rootElementsByReactRootID[reactRootID] =\n        getReactRootElementInContainer(container);\n    }\n\n    return nextComponent;\n  },\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactComponent} nextComponent Component instance to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  renderComponent: function(nextComponent, container, callback) {\n    var registeredComponent = instancesByReactRootID[getReactRootID(container)];\n\n    if (registeredComponent) {\n      if (registeredComponent.constructor === nextComponent.constructor) {\n        return ReactMount._updateRootComponent(\n          registeredComponent,\n          nextComponent,\n          container,\n          callback\n        );\n      } else {\n        ReactMount.unmountComponentAtNode(container);\n      }\n    }\n\n    var reactRootElement = getReactRootElementInContainer(container);\n    var containerHasReactMarkup =\n      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);\n\n    var shouldReuseMarkup = containerHasReactMarkup && !registeredComponent;\n\n    var component = ReactMount._renderNewRootComponent(\n      nextComponent,\n      container,\n      shouldReuseMarkup\n    );\n    callback && callback();\n    return component;\n  },\n\n  /**\n   * Constructs a component instance of `constructor` with `initialProps` and\n   * renders it into the supplied `container`.\n   *\n   * @param {function} constructor React component constructor.\n   * @param {?object} props Initial props of the component instance.\n   * @param {DOMElement} container DOM element to render into.\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  constructAndRenderComponent: function(constructor, props, container) {\n    return ReactMount.renderComponent(constructor(props), container);\n  },\n\n  /**\n   * Constructs a component instance of `constructor` with `initialProps` and\n   * renders it into a container node identified by supplied `id`.\n   *\n   * @param {function} componentConstructor React component constructor\n   * @param {?object} props Initial props of the component instance.\n   * @param {string} id ID of the DOM element to render into.\n   * @return {ReactComponent} Component instance rendered in the container node.\n   */\n  constructAndRenderComponentByID: function(constructor, props, id) {\n    return ReactMount.constructAndRenderComponent(constructor, props, $(id));\n  },\n\n  /**\n   * Registers a container node into which React components will be rendered.\n   * This also creates the \"reatRoot\" ID that will be assigned to the element\n   * rendered within.\n   *\n   * @param {DOMElement} container DOM element to register as a container.\n   * @return {string} The \"reactRoot\" ID of elements rendered within.\n   */\n  registerContainer: function(container) {\n    var reactRootID = getReactRootID(container);\n    if (reactRootID) {\n      // If one exists, make sure it is a valid \"reactRoot\" ID.\n      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);\n    }\n    if (!reactRootID) {\n      // No valid \"reactRoot\" ID found, create one.\n      reactRootID = ReactInstanceHandles.createReactRootID();\n    }\n    containersByReactRootID[reactRootID] = container;\n    return reactRootID;\n  },\n\n  /**\n   * Unmounts and destroys the React component rendered in the `container`.\n   *\n   * @param {DOMElement} container DOM element containing a React component.\n   * @return {boolean} True if a component was found in and unmounted from\n   *                   `container`\n   */\n  unmountComponentAtNode: function(container) {\n    var reactRootID = getReactRootID(container);\n    var component = instancesByReactRootID[reactRootID];\n    if (!component) {\n      return false;\n    }\n    ReactMount.unmountComponentFromNode(component, container);\n    delete instancesByReactRootID[reactRootID];\n    delete containersByReactRootID[reactRootID];\n    if (\"production\" !== process.env.NODE_ENV) {\n      delete rootElementsByReactRootID[reactRootID];\n    }\n    return true;\n  },\n\n  /**\n   * @deprecated\n   */\n  unmountAndReleaseReactRootNode: function() {\n    if (\"production\" !== process.env.NODE_ENV) {\n      console.warn(\n        'unmountAndReleaseReactRootNode() has been renamed to ' +\n        'unmountComponentAtNode() and will be removed in the next ' +\n        'version of React.'\n      );\n    }\n    return ReactMount.unmountComponentAtNode.apply(this, arguments);\n  },\n\n  /**\n   * Unmounts a component and removes it from the DOM.\n   *\n   * @param {ReactComponent} instance React component instance.\n   * @param {DOMElement} container DOM element to unmount from.\n   * @final\n   * @internal\n   * @see {ReactMount.unmountComponentAtNode}\n   */\n  unmountComponentFromNode: function(instance, container) {\n    instance.unmountComponent();\n\n    if (container.nodeType === DOC_NODE_TYPE) {\n      container = container.documentElement;\n    }\n\n    // http://jsperf.com/emptying-a-node\n    while (container.lastChild) {\n      container.removeChild(container.lastChild);\n    }\n  },\n\n  /**\n   * Finds the container DOM element that contains React component to which the\n   * supplied DOM `id` belongs.\n   *\n   * @param {string} id The ID of an element rendered by a React component.\n   * @return {?DOMElement} DOM element that contains the `id`.\n   */\n  findReactContainerForID: function(id) {\n    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);\n    var container = containersByReactRootID[reactRootID];\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      var rootElement = rootElementsByReactRootID[reactRootID];\n      if (rootElement && rootElement.parentNode !== container) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          // Call internalGetID here because getID calls isValid which calls\n          // findReactContainerForID (this function).\n          internalGetID(rootElement) === reactRootID,\n          'ReactMount: Root element ID differed from reactRootID.'\n        ) : invariant(// Call internalGetID here because getID calls isValid which calls\n        // findReactContainerForID (this function).\n        internalGetID(rootElement) === reactRootID));\n\n        var containerChild = container.firstChild;\n        if (containerChild &&\n            reactRootID === internalGetID(containerChild)) {\n          // If the container has a new child with the same ID as the old\n          // root element, then rootElementsByReactRootID[reactRootID] is\n          // just stale and needs to be updated. The case that deserves a\n          // warning is when the container is empty.\n          rootElementsByReactRootID[reactRootID] = containerChild;\n        } else {\n          console.warn(\n            'ReactMount: Root element has been removed from its original ' +\n            'container. New container:', rootElement.parentNode\n          );\n        }\n      }\n    }\n\n    return container;\n  },\n\n  /**\n   * Finds an element rendered by React with the supplied ID.\n   *\n   * @param {string} id ID of a DOM node in the React component.\n   * @return {DOMElement} Root DOM node of the React component.\n   */\n  findReactNodeByID: function(id) {\n    var reactRoot = ReactMount.findReactContainerForID(id);\n    return ReactMount.findComponentRoot(reactRoot, id);\n  },\n\n  /**\n   * True if the supplied `node` is rendered by React.\n   *\n   * @param {*} node DOM Element to check.\n   * @return {boolean} True if the DOM Element appears to be rendered by React.\n   * @internal\n   */\n  isRenderedByReact: function(node) {\n    if (node.nodeType !== 1) {\n      // Not a DOMElement, therefore not a React component\n      return false;\n    }\n    var id = ReactMount.getID(node);\n    return id ? id.charAt(0) === SEPARATOR : false;\n  },\n\n  /**\n   * Traverses up the ancestors of the supplied node to find a node that is a\n   * DOM representation of a React component.\n   *\n   * @param {*} node\n   * @return {?DOMEventTarget}\n   * @internal\n   */\n  getFirstReactDOM: function(node) {\n    var current = node;\n    while (current && current.parentNode !== current) {\n      if (ReactMount.isRenderedByReact(current)) {\n        return current;\n      }\n      current = current.parentNode;\n    }\n    return null;\n  },\n\n  /**\n   * Finds a node with the supplied `id` inside of the supplied `ancestorNode`.\n   * Exploits the ID naming scheme to perform the search quickly.\n   *\n   * @param {DOMEventTarget} ancestorNode Search from this root.\n   * @pararm {string} id ID of the DOM representation of the component.\n   * @return {DOMEventTarget} DOM node with the supplied `id`.\n   * @internal\n   */\n  findComponentRoot: function(ancestorNode, id) {\n    var firstChildren = [ancestorNode.firstChild];\n    var childIndex = 0;\n\n    while (childIndex < firstChildren.length) {\n      var child = firstChildren[childIndex++];\n      while (child) {\n        var childID = ReactMount.getID(child);\n        if (childID) {\n          if (id === childID) {\n            return child;\n          } else if (ReactInstanceHandles.isAncestorIDOf(childID, id)) {\n            // If we find a child whose ID is an ancestor of the given ID,\n            // then we can be sure that we only want to search the subtree\n            // rooted at this child, so we can throw out the rest of the\n            // search state.\n            firstChildren.length = childIndex = 0;\n            firstChildren.push(child.firstChild);\n            break;\n          } else {\n            // TODO This should not be necessary if the ID hierarchy is\n            // correct, but is occasionally necessary if the DOM has been\n            // modified in unexpected ways.\n            firstChildren.push(child.firstChild);\n          }\n        } else {\n          // If this child had no ID, then there's a chance that it was\n          // injected automatically by the browser, as when a `<table>`\n          // element sprouts an extra `<tbody>` child as a side effect of\n          // `.innerHTML` parsing. Optimistically continue down this\n          // branch, but not before examining the other siblings.\n          firstChildren.push(child.firstChild);\n        }\n        child = child.nextSibling;\n      }\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      console.error(\n        'Error while invoking `findComponentRoot` with the following ' +\n        'ancestor node:',\n        ancestorNode\n      );\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      false,\n      'findComponentRoot(..., %s): Unable to find element. This probably ' +\n      'means the DOM was unexpectedly mutated (e.g. by the browser).',\n      id,\n      ReactMount.getID(ancestorNode)\n    ) : invariant(false));\n  },\n\n\n  /**\n   * React ID utilities.\n   */\n\n  ATTR_NAME: ATTR_NAME,\n\n  getReactRootID: getReactRootID,\n\n  getID: getID,\n\n  setID: setID,\n\n  getNode: getNode,\n\n  purgeID: purgeID,\n\n  injection: {}\n};\n\nmodule.exports = ReactMount;\n"]},"metadata":{},"sourceType":"script"}