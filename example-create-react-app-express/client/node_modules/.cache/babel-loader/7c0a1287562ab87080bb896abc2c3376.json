{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule DOMProperty\n * @typechecks static-only\n */\n\n/*jslint bitwise: true */\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_ATTRIBUTE: 0x1,\n  MUST_USE_PROPERTY: 0x2,\n  HAS_SIDE_EFFECTS: 0x4,\n  HAS_BOOLEAN_VALUE: 0x8,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x10,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it's impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function (domPropertyConfig) {\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);\n    }\n\n    for (var propName in Properties) {\n      \"production\" !== process.env.NODE_ENV ? invariant(!DOMProperty.isStandardName[propName], 'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property ' + '\\'%s\\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(!DOMProperty.isStandardName[propName]);\n      DOMProperty.isStandardName[propName] = true;\n      var lowerCased = propName.toLowerCase();\n      DOMProperty.getPossibleStandardName[lowerCased] = propName;\n      var attributeName = DOMAttributeNames[propName];\n\n      if (attributeName) {\n        DOMProperty.getPossibleStandardName[attributeName] = propName;\n      }\n\n      DOMProperty.getAttributeName[propName] = attributeName || lowerCased;\n      DOMProperty.getPropertyName[propName] = DOMPropertyNames[propName] || propName;\n      var mutationMethod = DOMMutationMethods[propName];\n\n      if (mutationMethod) {\n        DOMProperty.getMutationMethod[propName] = mutationMethod;\n      }\n\n      var propConfig = Properties[propName];\n      DOMProperty.mustUseAttribute[propName] = propConfig & DOMPropertyInjection.MUST_USE_ATTRIBUTE;\n      DOMProperty.mustUseProperty[propName] = propConfig & DOMPropertyInjection.MUST_USE_PROPERTY;\n      DOMProperty.hasSideEffects[propName] = propConfig & DOMPropertyInjection.HAS_SIDE_EFFECTS;\n      DOMProperty.hasBooleanValue[propName] = propConfig & DOMPropertyInjection.HAS_BOOLEAN_VALUE;\n      DOMProperty.hasPositiveNumericValue[propName] = propConfig & DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE;\n      \"production\" !== process.env.NODE_ENV ? invariant(!DOMProperty.mustUseAttribute[propName] || !DOMProperty.mustUseProperty[propName], 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(!DOMProperty.mustUseAttribute[propName] || !DOMProperty.mustUseProperty[propName]);\n      \"production\" !== process.env.NODE_ENV ? invariant(DOMProperty.mustUseProperty[propName] || !DOMProperty.hasSideEffects[propName], 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(DOMProperty.mustUseProperty[propName] || !DOMProperty.hasSideEffects[propName]);\n      \"production\" !== process.env.NODE_ENV ? invariant(!DOMProperty.hasBooleanValue[propName] || !DOMProperty.hasPositiveNumericValue[propName], 'DOMProperty: Cannot have both boolean and positive numeric value: %s', propName) : invariant(!DOMProperty.hasBooleanValue[propName] || !DOMProperty.hasPositiveNumericValue[propName]);\n    }\n  }\n};\nvar defaultValueCache = {};\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   > DOMProperty.isValid['id']\n *   true\n *   > DOMProperty.isValid['foobar']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\n\nvar DOMProperty = {\n  /**\n   * Checks whether a property name is a standard property.\n   * @type {Object}\n   */\n  isStandardName: {},\n\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties.\n   * @type {Object}\n   */\n  getPossibleStandardName: {},\n\n  /**\n   * Mapping from normalized names to attribute names that differ. Attribute\n   * names are used when rendering markup or with `*Attribute()`.\n   * @type {Object}\n   */\n  getAttributeName: {},\n\n  /**\n   * Mapping from normalized names to properties on DOM node instances.\n   * (This includes properties that mutate due to external factors.)\n   * @type {Object}\n   */\n  getPropertyName: {},\n\n  /**\n   * Mapping from normalized names to mutation methods. This will only exist if\n   * mutation cannot be set simply by the property or `setAttribute()`.\n   * @type {Object}\n   */\n  getMutationMethod: {},\n\n  /**\n   * Whether the property must be accessed and mutated as an object property.\n   * @type {Object}\n   */\n  mustUseAttribute: {},\n\n  /**\n   * Whether the property must be accessed and mutated using `*Attribute()`.\n   * (This includes anything that fails `<propName> in <element>`.)\n   * @type {Object}\n   */\n  mustUseProperty: {},\n\n  /**\n   * Whether or not setting a value causes side effects such as triggering\n   * resources to be loaded or text selection changes. We must ensure that\n   * the value is only set if it has changed.\n   * @type {Object}\n   */\n  hasSideEffects: {},\n\n  /**\n   * Whether the property should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasBooleanValue: {},\n\n  /**\n   * Whether the property must be positive numeric or parse as a positive\n   * numeric and should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasPositiveNumericValue: {},\n\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function (attributeName) {\n    return DOMProperty._isCustomAttributeFunctions.some(function (isCustomAttributeFn) {\n      return isCustomAttributeFn.call(null, attributeName);\n    });\n  },\n\n  /**\n   * Returns the default property value for a DOM property (i.e., not an\n   * attribute). Most default values are '' or false, but not all. Worse yet,\n   * some (in particular, `type`) vary depending on the type of element.\n   *\n   * TODO: Is it better to grab all the possible properties when creating an\n   * element to avoid having to create the same element twice?\n   */\n  getDefaultValueForProperty: function (nodeName, prop) {\n    var nodeDefaults = defaultValueCache[nodeName];\n    var testElement;\n\n    if (!nodeDefaults) {\n      defaultValueCache[nodeName] = nodeDefaults = {};\n    }\n\n    if (!(prop in nodeDefaults)) {\n      testElement = document.createElement(nodeName);\n      nodeDefaults[prop] = testElement[prop];\n    }\n\n    return nodeDefaults[prop];\n  },\n  injection: DOMPropertyInjection\n};\nmodule.exports = DOMProperty;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/DOMProperty.js"],"names":["invariant","require","DOMPropertyInjection","MUST_USE_ATTRIBUTE","MUST_USE_PROPERTY","HAS_SIDE_EFFECTS","HAS_BOOLEAN_VALUE","HAS_POSITIVE_NUMERIC_VALUE","injectDOMPropertyConfig","domPropertyConfig","Properties","DOMAttributeNames","DOMPropertyNames","DOMMutationMethods","isCustomAttribute","DOMProperty","_isCustomAttributeFunctions","push","propName","process","env","NODE_ENV","isStandardName","lowerCased","toLowerCase","getPossibleStandardName","attributeName","getAttributeName","getPropertyName","mutationMethod","getMutationMethod","propConfig","mustUseAttribute","mustUseProperty","hasSideEffects","hasBooleanValue","hasPositiveNumericValue","defaultValueCache","some","isCustomAttributeFn","call","getDefaultValueForProperty","nodeName","prop","nodeDefaults","testElement","document","createElement","injection","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule DOMProperty\n * @typechecks static-only\n */\n\n/*jslint bitwise: true */\n\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_ATTRIBUTE: 0x1,\n  MUST_USE_PROPERTY: 0x2,\n  HAS_SIDE_EFFECTS: 0x4,\n  HAS_BOOLEAN_VALUE: 0x8,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x10,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it's impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function(domPropertyConfig) {\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(\n        domPropertyConfig.isCustomAttribute\n      );\n    }\n\n    for (var propName in Properties) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !DOMProperty.isStandardName[propName],\n        'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property ' +\n        '\\'%s\\' which has already been injected. You may be accidentally ' +\n        'injecting the same DOM property config twice, or you may be ' +\n        'injecting two configs that have conflicting property names.',\n        propName\n      ) : invariant(!DOMProperty.isStandardName[propName]));\n\n      DOMProperty.isStandardName[propName] = true;\n\n      var lowerCased = propName.toLowerCase();\n      DOMProperty.getPossibleStandardName[lowerCased] = propName;\n\n      var attributeName = DOMAttributeNames[propName];\n      if (attributeName) {\n        DOMProperty.getPossibleStandardName[attributeName] = propName;\n      }\n\n      DOMProperty.getAttributeName[propName] = attributeName || lowerCased;\n\n      DOMProperty.getPropertyName[propName] =\n        DOMPropertyNames[propName] || propName;\n\n      var mutationMethod = DOMMutationMethods[propName];\n      if (mutationMethod) {\n        DOMProperty.getMutationMethod[propName] = mutationMethod;\n      }\n\n      var propConfig = Properties[propName];\n      DOMProperty.mustUseAttribute[propName] =\n        propConfig & DOMPropertyInjection.MUST_USE_ATTRIBUTE;\n      DOMProperty.mustUseProperty[propName] =\n        propConfig & DOMPropertyInjection.MUST_USE_PROPERTY;\n      DOMProperty.hasSideEffects[propName] =\n        propConfig & DOMPropertyInjection.HAS_SIDE_EFFECTS;\n      DOMProperty.hasBooleanValue[propName] =\n        propConfig & DOMPropertyInjection.HAS_BOOLEAN_VALUE;\n      DOMProperty.hasPositiveNumericValue[propName] =\n        propConfig & DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE;\n\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !DOMProperty.mustUseAttribute[propName] ||\n          !DOMProperty.mustUseProperty[propName],\n        'DOMProperty: Cannot require using both attribute and property: %s',\n        propName\n      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||\n        !DOMProperty.mustUseProperty[propName]));\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        DOMProperty.mustUseProperty[propName] ||\n          !DOMProperty.hasSideEffects[propName],\n        'DOMProperty: Properties that have side effects must use property: %s',\n        propName\n      ) : invariant(DOMProperty.mustUseProperty[propName] ||\n        !DOMProperty.hasSideEffects[propName]));\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !DOMProperty.hasBooleanValue[propName] ||\n          !DOMProperty.hasPositiveNumericValue[propName],\n        'DOMProperty: Cannot have both boolean and positive numeric value: %s',\n        propName\n      ) : invariant(!DOMProperty.hasBooleanValue[propName] ||\n        !DOMProperty.hasPositiveNumericValue[propName]));\n    }\n  }\n};\nvar defaultValueCache = {};\n\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   > DOMProperty.isValid['id']\n *   true\n *   > DOMProperty.isValid['foobar']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\nvar DOMProperty = {\n\n  /**\n   * Checks whether a property name is a standard property.\n   * @type {Object}\n   */\n  isStandardName: {},\n\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties.\n   * @type {Object}\n   */\n  getPossibleStandardName: {},\n\n  /**\n   * Mapping from normalized names to attribute names that differ. Attribute\n   * names are used when rendering markup or with `*Attribute()`.\n   * @type {Object}\n   */\n  getAttributeName: {},\n\n  /**\n   * Mapping from normalized names to properties on DOM node instances.\n   * (This includes properties that mutate due to external factors.)\n   * @type {Object}\n   */\n  getPropertyName: {},\n\n  /**\n   * Mapping from normalized names to mutation methods. This will only exist if\n   * mutation cannot be set simply by the property or `setAttribute()`.\n   * @type {Object}\n   */\n  getMutationMethod: {},\n\n  /**\n   * Whether the property must be accessed and mutated as an object property.\n   * @type {Object}\n   */\n  mustUseAttribute: {},\n\n  /**\n   * Whether the property must be accessed and mutated using `*Attribute()`.\n   * (This includes anything that fails `<propName> in <element>`.)\n   * @type {Object}\n   */\n  mustUseProperty: {},\n\n  /**\n   * Whether or not setting a value causes side effects such as triggering\n   * resources to be loaded or text selection changes. We must ensure that\n   * the value is only set if it has changed.\n   * @type {Object}\n   */\n  hasSideEffects: {},\n\n  /**\n   * Whether the property should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasBooleanValue: {},\n\n  /**\n   * Whether the property must be positive numeric or parse as a positive\n   * numeric and should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasPositiveNumericValue: {},\n\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function(attributeName) {\n    return DOMProperty._isCustomAttributeFunctions.some(\n      function(isCustomAttributeFn) {\n        return isCustomAttributeFn.call(null, attributeName);\n      }\n    );\n  },\n\n  /**\n   * Returns the default property value for a DOM property (i.e., not an\n   * attribute). Most default values are '' or false, but not all. Worse yet,\n   * some (in particular, `type`) vary depending on the type of element.\n   *\n   * TODO: Is it better to grab all the possible properties when creating an\n   * element to avoid having to create the same element twice?\n   */\n  getDefaultValueForProperty: function(nodeName, prop) {\n    var nodeDefaults = defaultValueCache[nodeName];\n    var testElement;\n    if (!nodeDefaults) {\n      defaultValueCache[nodeName] = nodeDefaults = {};\n    }\n    if (!(prop in nodeDefaults)) {\n      testElement = document.createElement(nodeName);\n      nodeDefaults[prop] = testElement[prop];\n    }\n    return nodeDefaults[prop];\n  },\n\n  injection: DOMPropertyInjection\n};\n\nmodule.exports = DOMProperty;\n"]},"metadata":{},"sourceType":"script"}