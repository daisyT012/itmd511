{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactEventTopLevelCallback\n * @typechecks static-only\n */\n\"use strict\";\n\nvar ReactEventEmitter = require(\"./ReactEventEmitter\");\n\nvar ReactMount = require(\"./ReactMount\");\n\nvar getEventTarget = require(\"./getEventTarget\");\n/**\n * @type {boolean}\n * @private\n */\n\n\nvar _topLevelListenersEnabled = true;\n/**\n * Top-level callback creator used to implement event handling using delegation.\n * This is used via dependency injection.\n */\n\nvar ReactEventTopLevelCallback = {\n  /**\n   * Sets whether or not any created callbacks should be enabled.\n   *\n   * @param {boolean} enabled True if callbacks should be enabled.\n   */\n  setEnabled: function (enabled) {\n    _topLevelListenersEnabled = !!enabled;\n  },\n\n  /**\n   * @return {boolean} True if callbacks are enabled.\n   */\n  isEnabled: function () {\n    return _topLevelListenersEnabled;\n  },\n\n  /**\n   * Creates a callback for the supplied `topLevelType` that could be added as\n   * a listener to the document. The callback computes a `topLevelTarget` which\n   * should be the root node of a mounted React component where the listener\n   * is attached.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @return {function} Callback for handling top-level events.\n   */\n  createTopLevelCallback: function (topLevelType) {\n    return function (nativeEvent) {\n      if (!_topLevelListenersEnabled) {\n        return;\n      } // TODO: Remove when synthetic events are ready, this is for IE<9.\n\n\n      if (nativeEvent.srcElement && nativeEvent.srcElement !== nativeEvent.target) {\n        nativeEvent.target = nativeEvent.srcElement;\n      }\n\n      var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(nativeEvent)) || window;\n      var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';\n      ReactEventEmitter.handleTopLevel(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent);\n    };\n  }\n};\nmodule.exports = ReactEventTopLevelCallback;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ReactEventTopLevelCallback.js"],"names":["ReactEventEmitter","require","ReactMount","getEventTarget","_topLevelListenersEnabled","ReactEventTopLevelCallback","setEnabled","enabled","isEnabled","createTopLevelCallback","topLevelType","nativeEvent","srcElement","target","topLevelTarget","getFirstReactDOM","window","topLevelTargetID","getID","handleTopLevel","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,qBAAD,CAA/B;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAAxB;;AAEA,IAAIE,cAAc,GAAGF,OAAO,CAAC,kBAAD,CAA5B;AAEA;AACA;AACA;AACA;;;AACA,IAAIG,yBAAyB,GAAG,IAAhC;AAEA;AACA;AACA;AACA;;AACA,IAAIC,0BAA0B,GAAG;AAE/B;AACF;AACA;AACA;AACA;AACEC,EAAAA,UAAU,EAAE,UAASC,OAAT,EAAkB;AAC5BH,IAAAA,yBAAyB,GAAG,CAAC,CAACG,OAA9B;AACD,GAT8B;;AAW/B;AACF;AACA;AACEC,EAAAA,SAAS,EAAE,YAAW;AACpB,WAAOJ,yBAAP;AACD,GAhB8B;;AAkB/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEK,EAAAA,sBAAsB,EAAE,UAASC,YAAT,EAAuB;AAC7C,WAAO,UAASC,WAAT,EAAsB;AAC3B,UAAI,CAACP,yBAAL,EAAgC;AAC9B;AACD,OAH0B,CAI3B;;;AACA,UAAIO,WAAW,CAACC,UAAZ,IACAD,WAAW,CAACC,UAAZ,KAA2BD,WAAW,CAACE,MAD3C,EACmD;AACjDF,QAAAA,WAAW,CAACE,MAAZ,GAAqBF,WAAW,CAACC,UAAjC;AACD;;AACD,UAAIE,cAAc,GAAGZ,UAAU,CAACa,gBAAX,CACnBZ,cAAc,CAACQ,WAAD,CADK,KAEhBK,MAFL;AAGA,UAAIC,gBAAgB,GAAGf,UAAU,CAACgB,KAAX,CAAiBJ,cAAjB,KAAoC,EAA3D;AACAd,MAAAA,iBAAiB,CAACmB,cAAlB,CACET,YADF,EAEEI,cAFF,EAGEG,gBAHF,EAIEN,WAJF;AAMD,KAnBD;AAoBD;AAhD8B,CAAjC;AAoDAS,MAAM,CAACC,OAAP,GAAiBhB,0BAAjB","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactEventTopLevelCallback\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar ReactEventEmitter = require(\"./ReactEventEmitter\");\nvar ReactMount = require(\"./ReactMount\");\n\nvar getEventTarget = require(\"./getEventTarget\");\n\n/**\n * @type {boolean}\n * @private\n */\nvar _topLevelListenersEnabled = true;\n\n/**\n * Top-level callback creator used to implement event handling using delegation.\n * This is used via dependency injection.\n */\nvar ReactEventTopLevelCallback = {\n\n  /**\n   * Sets whether or not any created callbacks should be enabled.\n   *\n   * @param {boolean} enabled True if callbacks should be enabled.\n   */\n  setEnabled: function(enabled) {\n    _topLevelListenersEnabled = !!enabled;\n  },\n\n  /**\n   * @return {boolean} True if callbacks are enabled.\n   */\n  isEnabled: function() {\n    return _topLevelListenersEnabled;\n  },\n\n  /**\n   * Creates a callback for the supplied `topLevelType` that could be added as\n   * a listener to the document. The callback computes a `topLevelTarget` which\n   * should be the root node of a mounted React component where the listener\n   * is attached.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @return {function} Callback for handling top-level events.\n   */\n  createTopLevelCallback: function(topLevelType) {\n    return function(nativeEvent) {\n      if (!_topLevelListenersEnabled) {\n        return;\n      }\n      // TODO: Remove when synthetic events are ready, this is for IE<9.\n      if (nativeEvent.srcElement &&\n          nativeEvent.srcElement !== nativeEvent.target) {\n        nativeEvent.target = nativeEvent.srcElement;\n      }\n      var topLevelTarget = ReactMount.getFirstReactDOM(\n        getEventTarget(nativeEvent)\n      ) || window;\n      var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';\n      ReactEventEmitter.handleTopLevel(\n        topLevelType,\n        topLevelTarget,\n        topLevelTargetID,\n        nativeEvent\n      );\n    };\n  }\n\n};\n\nmodule.exports = ReactEventTopLevelCallback;\n"]},"metadata":{},"sourceType":"script"}