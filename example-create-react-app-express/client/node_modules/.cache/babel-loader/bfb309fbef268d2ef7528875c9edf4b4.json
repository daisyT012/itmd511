{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactCompositeComponent\n */\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\n\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\n\nvar ReactErrorUtils = require(\"./ReactErrorUtils\");\n\nvar ReactOwner = require(\"./ReactOwner\");\n\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar ReactPropTransferer = require(\"./ReactPropTransferer\");\n\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar invariant = require(\"./invariant\");\n\nvar keyMirror = require(\"./keyMirror\");\n\nvar merge = require(\"./merge\");\n\nvar mixInto = require(\"./mixInto\");\n\nvar objMap = require(\"./objMap\");\n/**\n * Policies that describe methods in `ReactCompositeComponentInterface`.\n */\n\n\nvar SpecPolicy = keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n\n  /**\n   * These methods are overriding the base ReactCompositeComponent class.\n   */\n  OVERRIDE_BASE: null,\n\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\n/**\n * Composite components are higher-level components that compose other composite\n * or native components.\n *\n * To create a new type of `ReactCompositeComponent`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return <div>Hello World</div>;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will available on the prototype.\n *\n * @interface ReactCompositeComponentInterface\n * @internal\n */\n\nvar ReactCompositeComponentInterface = {\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_ONCE,\n  // ==== Definition methods ====\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name = this.props.name;\n   *     return <div>Hello, {name}!</div>;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n  // ==== Delegate methods ====\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props and state.\n   *\n   * Use this as an opportunity to `return false` when you're certain that the\n   * transition to the new props and state will not require a component update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState) {\n   *     return !equal(nextProps, this.props) || !equal(nextState, this.state);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props` and `this.state` to `nextProps` and `nextState`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component's DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n  // ==== Advanced methods ====\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n};\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared in the specification when defining classes\n * using `React.createClass`, they will not be on the component's prototype.\n */\n\nvar RESERVED_SPEC_KEYS = {\n  displayName: function (Constructor, displayName) {\n    Constructor.displayName = displayName;\n  },\n  mixins: function (Constructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(Constructor, mixins[i]);\n      }\n    }\n  },\n  propTypes: function (Constructor, propTypes) {\n    Constructor.propTypes = propTypes;\n  }\n};\n\nfunction validateMethodOverride(proto, name) {\n  var specPolicy = ReactCompositeComponentInterface[name]; // Disallow overriding of base class methods unless explicitly allowed.\n\n  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {\n    \"production\" !== process.env.NODE_ENV ? invariant(specPolicy === SpecPolicy.OVERRIDE_BASE, 'ReactCompositeComponentInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE);\n  } // Disallow defining methods more than once unless explicitly allowed.\n\n\n  if (proto.hasOwnProperty(name)) {\n    \"production\" !== process.env.NODE_ENV ? invariant(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED, 'ReactCompositeComponentInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED);\n  }\n}\n\nfunction validateLifeCycleOnReplaceState(instance) {\n  var compositeLifeCycleState = instance._compositeLifeCycleState;\n  \"production\" !== process.env.NODE_ENV ? invariant(instance.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING, 'replaceState(...): Can only update a mounted or mounting component.') : invariant(instance.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING);\n  \"production\" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE, 'replaceState(...): Cannot update during an existing state transition ' + '(such as within `render`). This could potentially cause an infinite ' + 'loop so it is forbidden.') : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE);\n  \"production\" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING, 'replaceState(...): Cannot update while unmounting component. This ' + 'usually means you called setState() on an unmounted component.') : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING);\n}\n/**\n * Custom version of `mixInto` which handles policy validation and reserved\n * specification keys when building `ReactCompositeComponent` classses.\n */\n\n\nfunction mixSpecIntoComponent(Constructor, spec) {\n  var proto = Constructor.prototype;\n\n  for (var name in spec) {\n    var property = spec[name];\n\n    if (!spec.hasOwnProperty(name) || !property) {\n      continue;\n    }\n\n    validateMethodOverride(proto, name);\n\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](Constructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactCompositeComponent methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isCompositeComponentMethod = (name in ReactCompositeComponentInterface);\n      var isInherited = (name in proto);\n      var markedDontBind = property.__reactDontBind;\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind = isFunction && !isCompositeComponentMethod && !isInherited && !markedDontBind;\n\n      if (shouldAutoBind) {\n        if (!proto.__reactAutoBindMap) {\n          proto.__reactAutoBindMap = {};\n        }\n\n        proto.__reactAutoBindMap[name] = property;\n        proto[name] = property;\n      } else {\n        if (isInherited) {\n          // For methods which are defined more than once, call the existing\n          // methods before calling the new property.\n          if (ReactCompositeComponentInterface[name] === SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n        }\n      }\n    }\n  }\n}\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\n\n\nfunction mergeObjectsWithNoDuplicateKeys(one, two) {\n  \"production\" !== process.env.NODE_ENV ? invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects') : invariant(one && two && typeof one === 'object' && typeof two === 'object');\n  objMap(two, function (value, key) {\n    \"production\" !== process.env.NODE_ENV ? invariant(one[key] === undefined, 'mergeObjectsWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: %s', key) : invariant(one[key] === undefined);\n    one[key] = value;\n  });\n  return one;\n}\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\n\n\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    return mergeObjectsWithNoDuplicateKeys(one.apply(this, arguments), two.apply(this, arguments));\n  };\n}\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\n\n\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n/**\n * `ReactCompositeComponent` maintains an auxiliary life cycle state in\n * `this._compositeLifeCycleState` (which can be null).\n *\n * This is different from the life cycle state maintained by `ReactComponent` in\n * `this._lifeCycleState`. The following diagram shows how the states overlap in\n * time. There are times when the CompositeLifeCycle is null - at those times it\n * is only meaningful to look at ComponentLifeCycle alone.\n *\n * Top Row: ReactComponent.ComponentLifeCycle\n * Low Row: ReactComponent.CompositeLifeCycle\n *\n * +-------+------------------------------------------------------+--------+\n * |  UN   |                    MOUNTED                           |   UN   |\n * |MOUNTED|                                                      | MOUNTED|\n * +-------+------------------------------------------------------+--------+\n * |       ^--------+   +------+   +------+   +------+   +--------^        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |    0--|MOUNTING|-0-|RECEIV|-0-|RECEIV|-0-|RECEIV|-0-|   UN   |--->0   |\n * |       |        |   |PROPS |   | PROPS|   | STATE|   |MOUNTING|        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |       +--------+   +------+   +------+   +------+   +--------+        |\n * |       |                                                      |        |\n * +-------+------------------------------------------------------+--------+\n */\n\n\nvar CompositeLifeCycle = keyMirror({\n  /**\n   * Components in the process of being mounted respond to state changes\n   * differently.\n   */\n  MOUNTING: null,\n\n  /**\n   * Components in the process of being unmounted are guarded against state\n   * changes.\n   */\n  UNMOUNTING: null,\n\n  /**\n   * Components that are mounted and receiving new props respond to state\n   * changes differently.\n   */\n  RECEIVING_PROPS: null,\n\n  /**\n   * Components that are mounted and receiving new state are guarded against\n   * additional state changes.\n   */\n  RECEIVING_STATE: null\n});\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\n\nvar ReactCompositeComponentMixin = {\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {?object} initialProps\n   * @param {*} children\n   * @final\n   * @internal\n   */\n  construct: function (initialProps, children) {\n    // Children can be either an array or more than one argument\n    ReactComponent.Mixin.construct.apply(this, arguments);\n    this.state = null;\n    this._pendingState = null;\n    this._compositeLifeCycleState = null;\n  },\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function () {\n    return ReactComponent.Mixin.isMounted.call(this) && this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;\n  },\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: ReactPerf.measure('ReactCompositeComponent', 'mountComponent', function (rootID, transaction, mountDepth) {\n    ReactComponent.Mixin.mountComponent.call(this, rootID, transaction, mountDepth);\n    this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;\n    this._defaultProps = this.getDefaultProps ? this.getDefaultProps() : null;\n\n    this._processProps(this.props);\n\n    if (this.__reactAutoBindMap) {\n      this._bindAutoBindMethods();\n    }\n\n    this.state = this.getInitialState ? this.getInitialState() : null;\n    this._pendingState = null;\n    this._pendingForceUpdate = false;\n\n    if (this.componentWillMount) {\n      this.componentWillMount(); // When mounting, calls to `setState` by `componentWillMount` will set\n      // `this._pendingState` without triggering a re-render.\n\n      if (this._pendingState) {\n        this.state = this._pendingState;\n        this._pendingState = null;\n      }\n    }\n\n    this._renderedComponent = this._renderValidatedComponent(); // Done with mounting, `setState` will now trigger UI changes.\n\n    this._compositeLifeCycleState = null;\n\n    var markup = this._renderedComponent.mountComponent(rootID, transaction, mountDepth + 1);\n\n    if (this.componentDidMount) {\n      transaction.getReactMountReady().enqueue(this, this.componentDidMount);\n    }\n\n    return markup;\n  }),\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function () {\n    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;\n\n    if (this.componentWillUnmount) {\n      this.componentWillUnmount();\n    }\n\n    this._compositeLifeCycleState = null;\n    this._defaultProps = null;\n    ReactComponent.Mixin.unmountComponent.call(this);\n\n    this._renderedComponent.unmountComponent();\n\n    this._renderedComponent = null;\n\n    if (this.refs) {\n      this.refs = null;\n    } // Some existing components rely on this.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: this.props = null;\n    // TODO: this.state = null;\n\n  },\n\n  /**\n   * Sets a subset of the state. Always use this or `replaceState` to mutate\n   * state. You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * There is no guarantee that calls to `setState` will run synchronously,\n   * as they may eventually be batched together.  You can provide an optional\n   * callback that will be executed when the call to setState is actually\n   * completed.\n   *\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after state is updated.\n   * @final\n   * @protected\n   */\n  setState: function (partialState, callback) {\n    // Merge with `_pendingState` if it exists, otherwise with existing state.\n    this.replaceState(merge(this._pendingState || this.state, partialState), callback);\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after state is updated.\n   * @final\n   * @protected\n   */\n  replaceState: function (completeState, callback) {\n    validateLifeCycleOnReplaceState(this);\n    this._pendingState = completeState;\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n\n  /**\n   * Processes props by setting default values for unspecified props and\n   * asserting that the props are valid.\n   *\n   * @param {object} props\n   * @private\n   */\n  _processProps: function (props) {\n    var propName;\n    var defaultProps = this._defaultProps;\n\n    for (propName in defaultProps) {\n      if (!(propName in props)) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n\n    var propTypes = this.constructor.propTypes;\n\n    if (propTypes) {\n      var componentName = this.constructor.displayName;\n\n      for (propName in propTypes) {\n        var checkProp = propTypes[propName];\n\n        if (checkProp) {\n          checkProp(props, propName, componentName);\n        }\n      }\n    }\n  },\n  performUpdateIfNecessary: function () {\n    var compositeLifeCycleState = this._compositeLifeCycleState; // Do not trigger a state transition if we are in the middle of mounting or\n    // receiving props because both of those will already be doing this.\n\n    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING || compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {\n      return;\n    }\n\n    ReactComponent.Mixin.performUpdateIfNecessary.call(this);\n  },\n\n  /**\n   * If any of `_pendingProps`, `_pendingState`, or `_pendingForceUpdate` is\n   * set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  _performUpdateIfNecessary: function (transaction) {\n    if (this._pendingProps == null && this._pendingState == null && !this._pendingForceUpdate) {\n      return;\n    }\n\n    var nextProps = this.props;\n\n    if (this._pendingProps != null) {\n      nextProps = this._pendingProps;\n\n      this._processProps(nextProps);\n\n      this._pendingProps = null;\n      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;\n\n      if (this.componentWillReceiveProps) {\n        this.componentWillReceiveProps(nextProps, transaction);\n      }\n    }\n\n    this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_STATE;\n    var nextState = this._pendingState || this.state;\n    this._pendingState = null;\n\n    if (this._pendingForceUpdate || !this.shouldComponentUpdate || this.shouldComponentUpdate(nextProps, nextState)) {\n      this._pendingForceUpdate = false; // Will set `this.props` and `this.state`.\n\n      this._performComponentUpdate(nextProps, nextState, transaction);\n    } else {\n      // If it's determined that a component should not update, we still want\n      // to set props and state.\n      this.props = nextProps;\n      this.state = nextState;\n    }\n\n    this._compositeLifeCycleState = null;\n  },\n\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {object} nextProps Next object to set as properties.\n   * @param {?object} nextState Next object to set as state.\n   * @param {ReactReconcileTransaction} transaction\n   * @private\n   */\n  _performComponentUpdate: function (nextProps, nextState, transaction) {\n    var prevProps = this.props;\n    var prevState = this.state;\n\n    if (this.componentWillUpdate) {\n      this.componentWillUpdate(nextProps, nextState, transaction);\n    }\n\n    this.props = nextProps;\n    this.state = nextState;\n    this.updateComponent(transaction, prevProps, prevState);\n\n    if (this.componentDidUpdate) {\n      transaction.getReactMountReady().enqueue(this, this.componentDidUpdate.bind(this, prevProps, prevState));\n    }\n  },\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @internal\n   * @overridable\n   */\n  updateComponent: ReactPerf.measure('ReactCompositeComponent', 'updateComponent', function (transaction, prevProps, prevState) {\n    ReactComponent.Mixin.updateComponent.call(this, transaction, prevProps);\n    var currentComponent = this._renderedComponent;\n\n    var nextComponent = this._renderValidatedComponent();\n\n    if (currentComponent.constructor === nextComponent.constructor) {\n      currentComponent.receiveComponent(nextComponent, transaction);\n    } else {\n      // These two IDs are actually the same! But nothing should rely on that.\n      var thisID = this._rootNodeID;\n      var currentComponentID = currentComponent._rootNodeID;\n      currentComponent.unmountComponent();\n      this._renderedComponent = nextComponent;\n      var nextMarkup = nextComponent.mountComponent(thisID, transaction, this._mountDepth + 1);\n      ReactComponent.DOMIDOperations.dangerouslyReplaceNodeWithMarkupByID(currentComponentID, nextMarkup);\n    }\n  }),\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldUpdateComponent`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {?function} callback Called after update is complete.\n   * @final\n   * @protected\n   */\n  forceUpdate: function (callback) {\n    var compositeLifeCycleState = this._compositeLifeCycleState;\n    \"production\" !== process.env.NODE_ENV ? invariant(this.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING, 'forceUpdate(...): Can only force an update on mounted or mounting ' + 'components.') : invariant(this.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING);\n    \"production\" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE && compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING, 'forceUpdate(...): Cannot force an update while unmounting component ' + 'or during an existing state transition (such as within `render`).') : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE && compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING);\n    this._pendingForceUpdate = true;\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n\n  /**\n   * @private\n   */\n  _renderValidatedComponent: function () {\n    var renderedComponent;\n    ReactCurrentOwner.current = this;\n\n    try {\n      renderedComponent = this.render();\n    } catch (error) {\n      // IE8 requires `catch` in order to use `finally`.\n      throw error;\n    } finally {\n      ReactCurrentOwner.current = null;\n    }\n\n    \"production\" !== process.env.NODE_ENV ? invariant(ReactComponent.isValidComponent(renderedComponent), '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned null, undefined, an array, or some other invalid object.', this.constructor.displayName || 'ReactCompositeComponent') : invariant(ReactComponent.isValidComponent(renderedComponent));\n    return renderedComponent;\n  },\n\n  /**\n   * @private\n   */\n  _bindAutoBindMethods: function () {\n    for (var autoBindKey in this.__reactAutoBindMap) {\n      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n        continue;\n      }\n\n      var method = this.__reactAutoBindMap[autoBindKey];\n      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(method, this.constructor.displayName + '.' + autoBindKey));\n    }\n  },\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {function} method Method to be bound.\n   * @private\n   */\n  _bindAutoBindMethod: function (method) {\n    var component = this;\n\n    var boundMethod = function () {\n      return method.apply(component, arguments);\n    };\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n\n      boundMethod.bind = function (newThis) {\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          console.warn('bind(): React component methods may only be bound to the ' + 'component instance. See ' + componentName);\n        } else if (arguments.length === 1) {\n          console.warn('bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See ' + componentName);\n          return boundMethod;\n        }\n\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = Array.prototype.slice.call(arguments, 1);\n        return reboundMethod;\n      };\n    }\n\n    return boundMethod;\n  }\n};\n\nvar ReactCompositeComponentBase = function () {};\n\nmixInto(ReactCompositeComponentBase, ReactComponent.Mixin);\nmixInto(ReactCompositeComponentBase, ReactOwner.Mixin);\nmixInto(ReactCompositeComponentBase, ReactPropTransferer.Mixin);\nmixInto(ReactCompositeComponentBase, ReactCompositeComponentMixin);\n/**\n * Module for creating composite components.\n *\n * @class ReactCompositeComponent\n * @extends ReactComponent\n * @extends ReactOwner\n * @extends ReactPropTransferer\n */\n\nvar ReactCompositeComponent = {\n  LifeCycle: CompositeLifeCycle,\n  Base: ReactCompositeComponentBase,\n\n  /**\n   * Creates a composite component class given a class specification.\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function (spec) {\n    var Constructor = function () {};\n\n    Constructor.prototype = new ReactCompositeComponentBase();\n    Constructor.prototype.constructor = Constructor;\n    mixSpecIntoComponent(Constructor, spec);\n    \"production\" !== process.env.NODE_ENV ? invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.') : invariant(Constructor.prototype.render);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      if (Constructor.prototype.componentShouldUpdate) {\n        console.warn((spec.displayName || 'A component') + ' has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.');\n      }\n    } // Reduce time spent doing lookups by setting these on the prototype.\n\n\n    for (var methodName in ReactCompositeComponentInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    var ConvenienceConstructor = function (props, children) {\n      var instance = new Constructor();\n      instance.construct.apply(instance, arguments);\n      return instance;\n    };\n\n    ConvenienceConstructor.componentConstructor = Constructor;\n    ConvenienceConstructor.originalSpec = spec;\n    return ConvenienceConstructor;\n  },\n\n  /**\n   * Checks if a value is a valid component constructor.\n   *\n   * @param {*}\n   * @return {boolean}\n   * @public\n   */\n  isValidClass: function (componentClass) {\n    return componentClass instanceof Function && 'componentConstructor' in componentClass && componentClass.componentConstructor instanceof Function;\n  }\n};\nmodule.exports = ReactCompositeComponent;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ReactCompositeComponent.js"],"names":["ReactComponent","require","ReactCurrentOwner","ReactErrorUtils","ReactOwner","ReactPerf","ReactPropTransferer","ReactUpdates","invariant","keyMirror","merge","mixInto","objMap","SpecPolicy","DEFINE_ONCE","DEFINE_MANY","OVERRIDE_BASE","DEFINE_MANY_MERGED","ReactCompositeComponentInterface","mixins","propTypes","getDefaultProps","getInitialState","render","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","componentWillUnmount","updateComponent","RESERVED_SPEC_KEYS","displayName","Constructor","i","length","mixSpecIntoComponent","validateMethodOverride","proto","name","specPolicy","ReactCompositeComponentMixin","hasOwnProperty","process","env","NODE_ENV","validateLifeCycleOnReplaceState","instance","compositeLifeCycleState","_compositeLifeCycleState","isMounted","CompositeLifeCycle","MOUNTING","RECEIVING_STATE","UNMOUNTING","spec","prototype","property","isCompositeComponentMethod","isInherited","markedDontBind","__reactDontBind","isFunction","shouldAutoBind","__reactAutoBindMap","createMergedResultFunction","createChainedFunction","mergeObjectsWithNoDuplicateKeys","one","two","value","key","undefined","mergedResult","apply","arguments","chainedFunction","RECEIVING_PROPS","construct","initialProps","children","Mixin","state","_pendingState","call","mountComponent","measure","rootID","transaction","mountDepth","_defaultProps","_processProps","props","_bindAutoBindMethods","_pendingForceUpdate","_renderedComponent","_renderValidatedComponent","markup","getReactMountReady","enqueue","unmountComponent","refs","setState","partialState","callback","replaceState","completeState","enqueueUpdate","propName","defaultProps","constructor","componentName","checkProp","performUpdateIfNecessary","_performUpdateIfNecessary","_pendingProps","nextProps","nextState","_performComponentUpdate","prevProps","prevState","bind","currentComponent","nextComponent","receiveComponent","thisID","_rootNodeID","currentComponentID","nextMarkup","_mountDepth","DOMIDOperations","dangerouslyReplaceNodeWithMarkupByID","forceUpdate","renderedComponent","current","error","isValidComponent","autoBindKey","method","_bindAutoBindMethod","guard","component","boundMethod","__reactBoundContext","__reactBoundMethod","__reactBoundArguments","_bind","newThis","console","warn","reboundMethod","Array","slice","ReactCompositeComponentBase","ReactCompositeComponent","LifeCycle","Base","createClass","componentShouldUpdate","methodName","ConvenienceConstructor","componentConstructor","originalSpec","isValidClass","componentClass","Function","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,qBAAD,CAA/B;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,mBAAD,CAA7B;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIK,mBAAmB,GAAGL,OAAO,CAAC,uBAAD,CAAjC;;AACA,IAAIM,YAAY,GAAGN,OAAO,CAAC,gBAAD,CAA1B;;AAEA,IAAIO,SAAS,GAAGP,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIQ,SAAS,GAAGR,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIS,KAAK,GAAGT,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIU,OAAO,GAAGV,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIW,MAAM,GAAGX,OAAO,CAAC,UAAD,CAApB;AAEA;AACA;AACA;;;AACA,IAAIY,UAAU,GAAGJ,SAAS,CAAC;AACzB;AACF;AACA;AACEK,EAAAA,WAAW,EAAE,IAJY;;AAKzB;AACF;AACA;AACA;AACEC,EAAAA,WAAW,EAAE,IATY;;AAUzB;AACF;AACA;AACEC,EAAAA,aAAa,EAAE,IAbU;;AAczB;AACF;AACA;AACA;AACA;AACEC,EAAAA,kBAAkB,EAAE;AAnBK,CAAD,CAA1B;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,gCAAgC,GAAG;AAErC;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,MAAM,EAAEN,UAAU,CAACE,WARkB;;AAUrC;AACF;AACA;AACA;AACA;AACA;AACEK,EAAAA,SAAS,EAAEP,UAAU,CAACC,WAhBe;AAoBrC;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEO,EAAAA,eAAe,EAAER,UAAU,CAACI,kBAhCS;;AAkCrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEK,EAAAA,eAAe,EAAET,UAAU,CAACI,kBAhDS;;AAkDrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,MAAM,EAAEV,UAAU,CAACC,WAlEkB;AAsErC;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACEU,EAAAA,kBAAkB,EAAEX,UAAU,CAACE,WA/EM;;AAiFrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEU,EAAAA,iBAAiB,EAAEZ,UAAU,CAACE,WA3FO;;AA6FrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEW,EAAAA,yBAAyB,EAAEb,UAAU,CAACE,WAhHD;;AAkHrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEY,EAAAA,qBAAqB,EAAEd,UAAU,CAACC,WAlIG;;AAoIrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEc,EAAAA,mBAAmB,EAAEf,UAAU,CAACE,WAjJK;;AAmJrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEc,EAAAA,kBAAkB,EAAEhB,UAAU,CAACE,WA9JM;;AAgKrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEe,EAAAA,oBAAoB,EAAEjB,UAAU,CAACE,WA3KI;AA+KrC;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEgB,EAAAA,eAAe,EAAElB,UAAU,CAACG;AA3LS,CAAvC;AA+LA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIgB,kBAAkB,GAAG;AACvBC,EAAAA,WAAW,EAAE,UAASC,WAAT,EAAsBD,WAAtB,EAAmC;AAC9CC,IAAAA,WAAW,CAACD,WAAZ,GAA0BA,WAA1B;AACD,GAHsB;AAIvBd,EAAAA,MAAM,EAAE,UAASe,WAAT,EAAsBf,MAAtB,EAA8B;AACpC,QAAIA,MAAJ,EAAY;AACV,WAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,MAAM,CAACiB,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtCE,QAAAA,oBAAoB,CAACH,WAAD,EAAcf,MAAM,CAACgB,CAAD,CAApB,CAApB;AACD;AACF;AACF,GAVsB;AAWvBf,EAAAA,SAAS,EAAE,UAASc,WAAT,EAAsBd,SAAtB,EAAiC;AAC1Cc,IAAAA,WAAW,CAACd,SAAZ,GAAwBA,SAAxB;AACD;AAbsB,CAAzB;;AAgBA,SAASkB,sBAAT,CAAgCC,KAAhC,EAAuCC,IAAvC,EAA6C;AAC3C,MAAIC,UAAU,GAAGvB,gCAAgC,CAACsB,IAAD,CAAjD,CAD2C,CAG3C;;AACA,MAAIE,4BAA4B,CAACC,cAA7B,CAA4CH,IAA5C,CAAJ,EAAuD;AACpD,qBAAiBI,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCtC,SAAS,CAChDiC,UAAU,KAAK5B,UAAU,CAACG,aADsB,EAEhD,sEACA,oEADA,GAEA,oCAJgD,EAKhDwB,IALgD,CAAjD,GAMGhC,SAAS,CAACiC,UAAU,KAAK5B,UAAU,CAACG,aAA3B,CANb;AAOD,GAZ0C,CAc3C;;;AACA,MAAIuB,KAAK,CAACI,cAAN,CAAqBH,IAArB,CAAJ,EAAgC;AAC7B,qBAAiBI,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCtC,SAAS,CAChDiC,UAAU,KAAK5B,UAAU,CAACE,WAA1B,IACA0B,UAAU,KAAK5B,UAAU,CAACI,kBAFsB,EAGhD,oEACA,kEADA,GAEA,aALgD,EAMhDuB,IANgD,CAAjD,GAOGhC,SAAS,CAACiC,UAAU,KAAK5B,UAAU,CAACE,WAA1B,IACd0B,UAAU,KAAK5B,UAAU,CAACI,kBADb,CAPb;AASD;AACF;;AAGD,SAAS8B,+BAAT,CAAyCC,QAAzC,EAAmD;AACjD,MAAIC,uBAAuB,GAAGD,QAAQ,CAACE,wBAAvC;AACC,mBAAiBN,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCtC,SAAS,CAChDwC,QAAQ,CAACG,SAAT,MACEF,uBAAuB,KAAKG,kBAAkB,CAACC,QAFD,EAGhD,qEAHgD,CAAjD,GAIG7C,SAAS,CAACwC,QAAQ,CAACG,SAAT,MACZF,uBAAuB,KAAKG,kBAAkB,CAACC,QADpC,CAJb;AAMC,mBAAiBT,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCtC,SAAS,CAACyC,uBAAuB,KAAKG,kBAAkB,CAACE,eAAhD,EAChD,0EACA,sEADA,GAEA,0BAHgD,CAAjD,GAIG9C,SAAS,CAACyC,uBAAuB,KAAKG,kBAAkB,CAACE,eAAhD,CAJb;AAKC,mBAAiBV,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCtC,SAAS,CAACyC,uBAAuB,KAAKG,kBAAkB,CAACG,UAAhD,EAChD,uEACA,gEAFgD,CAAjD,GAGG/C,SAAS,CAACyC,uBAAuB,KAAKG,kBAAkB,CAACG,UAAhD,CAHb;AAID;AAED;AACA;AACA;AACA;;;AACA,SAASlB,oBAAT,CAA8BH,WAA9B,EAA2CsB,IAA3C,EAAiD;AAC/C,MAAIjB,KAAK,GAAGL,WAAW,CAACuB,SAAxB;;AACA,OAAK,IAAIjB,IAAT,IAAiBgB,IAAjB,EAAuB;AACrB,QAAIE,QAAQ,GAAGF,IAAI,CAAChB,IAAD,CAAnB;;AACA,QAAI,CAACgB,IAAI,CAACb,cAAL,CAAoBH,IAApB,CAAD,IAA8B,CAACkB,QAAnC,EAA6C;AAC3C;AACD;;AACDpB,IAAAA,sBAAsB,CAACC,KAAD,EAAQC,IAAR,CAAtB;;AAEA,QAAIR,kBAAkB,CAACW,cAAnB,CAAkCH,IAAlC,CAAJ,EAA6C;AAC3CR,MAAAA,kBAAkB,CAACQ,IAAD,CAAlB,CAAyBN,WAAzB,EAAsCwB,QAAtC;AACD,KAFD,MAEO;AACL;AACA;AACA;AACA;AACA,UAAIC,0BAA0B,IAAGnB,IAAI,IAAItB,gCAAX,CAA9B;AACA,UAAI0C,WAAW,IAAGpB,IAAI,IAAID,KAAX,CAAf;AACA,UAAIsB,cAAc,GAAGH,QAAQ,CAACI,eAA9B;AACA,UAAIC,UAAU,GAAG,OAAOL,QAAP,KAAoB,UAArC;AACA,UAAIM,cAAc,GAChBD,UAAU,IACV,CAACJ,0BADD,IAEA,CAACC,WAFD,IAGA,CAACC,cAJH;;AAMA,UAAIG,cAAJ,EAAoB;AAClB,YAAI,CAACzB,KAAK,CAAC0B,kBAAX,EAA+B;AAC7B1B,UAAAA,KAAK,CAAC0B,kBAAN,GAA2B,EAA3B;AACD;;AACD1B,QAAAA,KAAK,CAAC0B,kBAAN,CAAyBzB,IAAzB,IAAiCkB,QAAjC;AACAnB,QAAAA,KAAK,CAACC,IAAD,CAAL,GAAckB,QAAd;AACD,OAND,MAMO;AACL,YAAIE,WAAJ,EAAiB;AACf;AACA;AACA,cAAI1C,gCAAgC,CAACsB,IAAD,CAAhC,KACA3B,UAAU,CAACI,kBADf,EACmC;AACjCsB,YAAAA,KAAK,CAACC,IAAD,CAAL,GAAc0B,0BAA0B,CAAC3B,KAAK,CAACC,IAAD,CAAN,EAAckB,QAAd,CAAxC;AACD,WAHD,MAGO;AACLnB,YAAAA,KAAK,CAACC,IAAD,CAAL,GAAc2B,qBAAqB,CAAC5B,KAAK,CAACC,IAAD,CAAN,EAAckB,QAAd,CAAnC;AACD;AACF,SATD,MASO;AACLnB,UAAAA,KAAK,CAACC,IAAD,CAAL,GAAckB,QAAd;AACD;AACF;AACF;AACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASU,+BAAT,CAAyCC,GAAzC,EAA8CC,GAA9C,EAAmD;AAChD,mBAAiB1B,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCtC,SAAS,CAChD6D,GAAG,IAAIC,GAAP,IAAc,OAAOD,GAAP,KAAe,QAA7B,IAAyC,OAAOC,GAAP,KAAe,QADR,EAEhD,6DAFgD,CAAjD,GAGG9D,SAAS,CAAC6D,GAAG,IAAIC,GAAP,IAAc,OAAOD,GAAP,KAAe,QAA7B,IAAyC,OAAOC,GAAP,KAAe,QAAzD,CAHb;AAKA1D,EAAAA,MAAM,CAAC0D,GAAD,EAAM,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAC9B,qBAAiB5B,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCtC,SAAS,CAChD6D,GAAG,CAACG,GAAD,CAAH,KAAaC,SADmC,EAEhD,wCACA,kDAHgD,EAIhDD,GAJgD,CAAjD,GAKGhE,SAAS,CAAC6D,GAAG,CAACG,GAAD,CAAH,KAAaC,SAAd,CALb;AAMAJ,IAAAA,GAAG,CAACG,GAAD,CAAH,GAAWD,KAAX;AACD,GARK,CAAN;AASA,SAAOF,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASH,0BAAT,CAAoCG,GAApC,EAAyCC,GAAzC,EAA8C;AAC5C,SAAO,SAASI,YAAT,GAAwB;AAC7B,WAAON,+BAA+B,CACpCC,GAAG,CAACM,KAAJ,CAAU,IAAV,EAAgBC,SAAhB,CADoC,EAEpCN,GAAG,CAACK,KAAJ,CAAU,IAAV,EAAgBC,SAAhB,CAFoC,CAAtC;AAID,GALD;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAST,qBAAT,CAA+BE,GAA/B,EAAoCC,GAApC,EAAyC;AACvC,SAAO,SAASO,eAAT,GAA2B;AAChCR,IAAAA,GAAG,CAACM,KAAJ,CAAU,IAAV,EAAgBC,SAAhB;AACAN,IAAAA,GAAG,CAACK,KAAJ,CAAU,IAAV,EAAgBC,SAAhB;AACD,GAHD;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIxB,kBAAkB,GAAG3C,SAAS,CAAC;AACjC;AACF;AACA;AACA;AACE4C,EAAAA,QAAQ,EAAE,IALuB;;AAMjC;AACF;AACA;AACA;AACEE,EAAAA,UAAU,EAAE,IAVqB;;AAWjC;AACF;AACA;AACA;AACEuB,EAAAA,eAAe,EAAE,IAfgB;;AAgBjC;AACF;AACA;AACA;AACExB,EAAAA,eAAe,EAAE;AApBgB,CAAD,CAAlC;AAuBA;AACA;AACA;;AACA,IAAIZ,4BAA4B,GAAG;AAEjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEqC,EAAAA,SAAS,EAAE,UAASC,YAAT,EAAuBC,QAAvB,EAAiC;AAC1C;AACAjF,IAAAA,cAAc,CAACkF,KAAf,CAAqBH,SAArB,CAA+BJ,KAA/B,CAAqC,IAArC,EAA2CC,SAA3C;AACA,SAAKO,KAAL,GAAa,IAAb;AACA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKlC,wBAAL,GAAgC,IAAhC;AACD,GAhBgC;;AAkBjC;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,EAAE,YAAW;AACpB,WAAOnD,cAAc,CAACkF,KAAf,CAAqB/B,SAArB,CAA+BkC,IAA/B,CAAoC,IAApC,KACL,KAAKnC,wBAAL,KAAkCE,kBAAkB,CAACC,QADvD;AAED,GA3BgC;;AA6BjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEiC,EAAAA,cAAc,EAAEjF,SAAS,CAACkF,OAAV,CACd,yBADc,EAEd,gBAFc,EAGd,UAASC,MAAT,EAAiBC,WAAjB,EAA8BC,UAA9B,EAA0C;AACxC1F,IAAAA,cAAc,CAACkF,KAAf,CAAqBI,cAArB,CAAoCD,IAApC,CACE,IADF,EAEEG,MAFF,EAGEC,WAHF,EAIEC,UAJF;AAMA,SAAKxC,wBAAL,GAAgCE,kBAAkB,CAACC,QAAnD;AAEA,SAAKsC,aAAL,GAAqB,KAAKtE,eAAL,GAAuB,KAAKA,eAAL,EAAvB,GAAgD,IAArE;;AACA,SAAKuE,aAAL,CAAmB,KAAKC,KAAxB;;AAEA,QAAI,KAAK5B,kBAAT,EAA6B;AAC3B,WAAK6B,oBAAL;AACD;;AAED,SAAKX,KAAL,GAAa,KAAK7D,eAAL,GAAuB,KAAKA,eAAL,EAAvB,GAAgD,IAA7D;AACA,SAAK8D,aAAL,GAAqB,IAArB;AACA,SAAKW,mBAAL,GAA2B,KAA3B;;AAEA,QAAI,KAAKvE,kBAAT,EAA6B;AAC3B,WAAKA,kBAAL,GAD2B,CAE3B;AACA;;AACA,UAAI,KAAK4D,aAAT,EAAwB;AACtB,aAAKD,KAAL,GAAa,KAAKC,aAAlB;AACA,aAAKA,aAAL,GAAqB,IAArB;AACD;AACF;;AAED,SAAKY,kBAAL,GAA0B,KAAKC,yBAAL,EAA1B,CA9BwC,CAgCxC;;AACA,SAAK/C,wBAAL,GAAgC,IAAhC;;AACA,QAAIgD,MAAM,GAAG,KAAKF,kBAAL,CAAwBV,cAAxB,CACXE,MADW,EAEXC,WAFW,EAGXC,UAAU,GAAG,CAHF,CAAb;;AAKA,QAAI,KAAKjE,iBAAT,EAA4B;AAC1BgE,MAAAA,WAAW,CAACU,kBAAZ,GAAiCC,OAAjC,CAAyC,IAAzC,EAA+C,KAAK3E,iBAApD;AACD;;AACD,WAAOyE,MAAP;AACD,GA9Ca,CAvCiB;;AAwFjC;AACF;AACA;AACA;AACA;AACA;AACEG,EAAAA,gBAAgB,EAAE,YAAW;AAC3B,SAAKnD,wBAAL,GAAgCE,kBAAkB,CAACG,UAAnD;;AACA,QAAI,KAAKzB,oBAAT,EAA+B;AAC7B,WAAKA,oBAAL;AACD;;AACD,SAAKoB,wBAAL,GAAgC,IAAhC;AAEA,SAAKyC,aAAL,GAAqB,IAArB;AAEA3F,IAAAA,cAAc,CAACkF,KAAf,CAAqBmB,gBAArB,CAAsChB,IAAtC,CAA2C,IAA3C;;AACA,SAAKW,kBAAL,CAAwBK,gBAAxB;;AACA,SAAKL,kBAAL,GAA0B,IAA1B;;AAEA,QAAI,KAAKM,IAAT,EAAe;AACb,WAAKA,IAAL,GAAY,IAAZ;AACD,KAf0B,CAiB3B;AACA;AACA;AACA;;AACD,GAnHgC;;AAqHjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,QAAQ,EAAE,UAASC,YAAT,EAAuBC,QAAvB,EAAiC;AACzC;AACA,SAAKC,YAAL,CACEhG,KAAK,CAAC,KAAK0E,aAAL,IAAsB,KAAKD,KAA5B,EAAmCqB,YAAnC,CADP,EAEEC,QAFF;AAID,GA5IgC;;AA8IjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,YAAY,EAAE,UAASC,aAAT,EAAwBF,QAAxB,EAAkC;AAC9C1D,IAAAA,+BAA+B,CAAC,IAAD,CAA/B;AACA,SAAKqC,aAAL,GAAqBuB,aAArB;AACApG,IAAAA,YAAY,CAACqG,aAAb,CAA2B,IAA3B,EAAiCH,QAAjC;AACD,GA9JgC;;AAgKjC;AACF;AACA;AACA;AACA;AACA;AACA;AACEb,EAAAA,aAAa,EAAE,UAASC,KAAT,EAAgB;AAC7B,QAAIgB,QAAJ;AACA,QAAIC,YAAY,GAAG,KAAKnB,aAAxB;;AACA,SAAKkB,QAAL,IAAiBC,YAAjB,EAA+B;AAC7B,UAAI,EAAED,QAAQ,IAAIhB,KAAd,CAAJ,EAA0B;AACxBA,QAAAA,KAAK,CAACgB,QAAD,CAAL,GAAkBC,YAAY,CAACD,QAAD,CAA9B;AACD;AACF;;AACD,QAAIzF,SAAS,GAAG,KAAK2F,WAAL,CAAiB3F,SAAjC;;AACA,QAAIA,SAAJ,EAAe;AACb,UAAI4F,aAAa,GAAG,KAAKD,WAAL,CAAiB9E,WAArC;;AACA,WAAK4E,QAAL,IAAiBzF,SAAjB,EAA4B;AAC1B,YAAI6F,SAAS,GAAG7F,SAAS,CAACyF,QAAD,CAAzB;;AACA,YAAII,SAAJ,EAAe;AACbA,UAAAA,SAAS,CAACpB,KAAD,EAAQgB,QAAR,EAAkBG,aAAlB,CAAT;AACD;AACF;AACF;AACF,GAzLgC;AA2LjCE,EAAAA,wBAAwB,EAAE,YAAW;AACnC,QAAIjE,uBAAuB,GAAG,KAAKC,wBAAnC,CADmC,CAEnC;AACA;;AACA,QAAID,uBAAuB,KAAKG,kBAAkB,CAACC,QAA/C,IACAJ,uBAAuB,KAAKG,kBAAkB,CAAC0B,eADnD,EACoE;AAClE;AACD;;AACD9E,IAAAA,cAAc,CAACkF,KAAf,CAAqBgC,wBAArB,CAA8C7B,IAA9C,CAAmD,IAAnD;AACD,GApMgC;;AAsMjC;AACF;AACA;AACA;AACA;AACA;AACA;AACE8B,EAAAA,yBAAyB,EAAE,UAAS1B,WAAT,EAAsB;AAC/C,QAAI,KAAK2B,aAAL,IAAsB,IAAtB,IACA,KAAKhC,aAAL,IAAsB,IADtB,IAEA,CAAC,KAAKW,mBAFV,EAE+B;AAC7B;AACD;;AAED,QAAIsB,SAAS,GAAG,KAAKxB,KAArB;;AACA,QAAI,KAAKuB,aAAL,IAAsB,IAA1B,EAAgC;AAC9BC,MAAAA,SAAS,GAAG,KAAKD,aAAjB;;AACA,WAAKxB,aAAL,CAAmByB,SAAnB;;AACA,WAAKD,aAAL,GAAqB,IAArB;AAEA,WAAKlE,wBAAL,GAAgCE,kBAAkB,CAAC0B,eAAnD;;AACA,UAAI,KAAKpD,yBAAT,EAAoC;AAClC,aAAKA,yBAAL,CAA+B2F,SAA/B,EAA0C5B,WAA1C;AACD;AACF;;AAED,SAAKvC,wBAAL,GAAgCE,kBAAkB,CAACE,eAAnD;AAEA,QAAIgE,SAAS,GAAG,KAAKlC,aAAL,IAAsB,KAAKD,KAA3C;AACA,SAAKC,aAAL,GAAqB,IAArB;;AAEA,QAAI,KAAKW,mBAAL,IACA,CAAC,KAAKpE,qBADN,IAEA,KAAKA,qBAAL,CAA2B0F,SAA3B,EAAsCC,SAAtC,CAFJ,EAEsD;AACpD,WAAKvB,mBAAL,GAA2B,KAA3B,CADoD,CAEpD;;AACA,WAAKwB,uBAAL,CAA6BF,SAA7B,EAAwCC,SAAxC,EAAmD7B,WAAnD;AACD,KAND,MAMO;AACL;AACA;AACA,WAAKI,KAAL,GAAawB,SAAb;AACA,WAAKlC,KAAL,GAAamC,SAAb;AACD;;AAED,SAAKpE,wBAAL,GAAgC,IAAhC;AACD,GAnPgC;;AAqPjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEqE,EAAAA,uBAAuB,EAAE,UAASF,SAAT,EAAoBC,SAApB,EAA+B7B,WAA/B,EAA4C;AACnE,QAAI+B,SAAS,GAAG,KAAK3B,KAArB;AACA,QAAI4B,SAAS,GAAG,KAAKtC,KAArB;;AAEA,QAAI,KAAKvD,mBAAT,EAA8B;AAC5B,WAAKA,mBAAL,CAAyByF,SAAzB,EAAoCC,SAApC,EAA+C7B,WAA/C;AACD;;AAED,SAAKI,KAAL,GAAawB,SAAb;AACA,SAAKlC,KAAL,GAAamC,SAAb;AAEA,SAAKvF,eAAL,CAAqB0D,WAArB,EAAkC+B,SAAlC,EAA6CC,SAA7C;;AAEA,QAAI,KAAK5F,kBAAT,EAA6B;AAC3B4D,MAAAA,WAAW,CAACU,kBAAZ,GAAiCC,OAAjC,CACE,IADF,EAEE,KAAKvE,kBAAL,CAAwB6F,IAAxB,CAA6B,IAA7B,EAAmCF,SAAnC,EAA8CC,SAA9C,CAFF;AAID;AACF,GAjRgC;;AAmRjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE1F,EAAAA,eAAe,EAAE1B,SAAS,CAACkF,OAAV,CACf,yBADe,EAEf,iBAFe,EAGf,UAASE,WAAT,EAAsB+B,SAAtB,EAAiCC,SAAjC,EAA4C;AAC1CzH,IAAAA,cAAc,CAACkF,KAAf,CAAqBnD,eAArB,CAAqCsD,IAArC,CAA0C,IAA1C,EAAgDI,WAAhD,EAA6D+B,SAA7D;AACA,QAAIG,gBAAgB,GAAG,KAAK3B,kBAA5B;;AACA,QAAI4B,aAAa,GAAG,KAAK3B,yBAAL,EAApB;;AACA,QAAI0B,gBAAgB,CAACZ,WAAjB,KAAiCa,aAAa,CAACb,WAAnD,EAAgE;AAC9DY,MAAAA,gBAAgB,CAACE,gBAAjB,CAAkCD,aAAlC,EAAiDnC,WAAjD;AACD,KAFD,MAEO;AACL;AACA,UAAIqC,MAAM,GAAG,KAAKC,WAAlB;AACA,UAAIC,kBAAkB,GAAGL,gBAAgB,CAACI,WAA1C;AACAJ,MAAAA,gBAAgB,CAACtB,gBAAjB;AACA,WAAKL,kBAAL,GAA0B4B,aAA1B;AACA,UAAIK,UAAU,GAAGL,aAAa,CAACtC,cAAd,CACfwC,MADe,EAEfrC,WAFe,EAGf,KAAKyC,WAAL,GAAmB,CAHJ,CAAjB;AAKAlI,MAAAA,cAAc,CAACmI,eAAf,CAA+BC,oCAA/B,CACEJ,kBADF,EAEEC,UAFF;AAID;AACF,GAzBc,CA/RgB;;AA2TjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEI,EAAAA,WAAW,EAAE,UAAS5B,QAAT,EAAmB;AAC9B,QAAIxD,uBAAuB,GAAG,KAAKC,wBAAnC;AACC,qBAAiBN,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCtC,SAAS,CAChD,KAAK2C,SAAL,MACEF,uBAAuB,KAAKG,kBAAkB,CAACC,QAFD,EAGhD,uEACE,aAJ8C,CAAjD,GAKG7C,SAAS,CAAC,KAAK2C,SAAL,MACZF,uBAAuB,KAAKG,kBAAkB,CAACC,QADpC,CALb;AAOC,qBAAiBT,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCtC,SAAS,CAChDyC,uBAAuB,KAAKG,kBAAkB,CAACE,eAA/C,IACAL,uBAAuB,KAAKG,kBAAkB,CAACG,UAFC,EAGhD,yEACA,mEAJgD,CAAjD,GAKG/C,SAAS,CAACyC,uBAAuB,KAAKG,kBAAkB,CAACE,eAA/C,IACdL,uBAAuB,KAAKG,kBAAkB,CAACG,UADlC,CALb;AAOA,SAAKwC,mBAAL,GAA2B,IAA3B;AACAxF,IAAAA,YAAY,CAACqG,aAAb,CAA2B,IAA3B,EAAiCH,QAAjC;AACD,GA3VgC;;AA6VjC;AACF;AACA;AACER,EAAAA,yBAAyB,EAAE,YAAW;AACpC,QAAIqC,iBAAJ;AACApI,IAAAA,iBAAiB,CAACqI,OAAlB,GAA4B,IAA5B;;AACA,QAAI;AACFD,MAAAA,iBAAiB,GAAG,KAAK/G,MAAL,EAApB;AACD,KAFD,CAEE,OAAOiH,KAAP,EAAc;AACd;AACA,YAAMA,KAAN;AACD,KALD,SAKU;AACRtI,MAAAA,iBAAiB,CAACqI,OAAlB,GAA4B,IAA5B;AACD;;AACA,qBAAiB3F,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCtC,SAAS,CAChDR,cAAc,CAACyI,gBAAf,CAAgCH,iBAAhC,CADgD,EAEhD,wEACA,mEAHgD,EAIhD,KAAKvB,WAAL,CAAiB9E,WAAjB,IAAgC,yBAJgB,CAAjD,GAKGzB,SAAS,CAACR,cAAc,CAACyI,gBAAf,CAAgCH,iBAAhC,CAAD,CALb;AAMA,WAAOA,iBAAP;AACD,GAlXgC;;AAoXjC;AACF;AACA;AACExC,EAAAA,oBAAoB,EAAE,YAAW;AAC/B,SAAK,IAAI4C,WAAT,IAAwB,KAAKzE,kBAA7B,EAAiD;AAC/C,UAAI,CAAC,KAAKA,kBAAL,CAAwBtB,cAAxB,CAAuC+F,WAAvC,CAAL,EAA0D;AACxD;AACD;;AACD,UAAIC,MAAM,GAAG,KAAK1E,kBAAL,CAAwByE,WAAxB,CAAb;AACA,WAAKA,WAAL,IAAoB,KAAKE,mBAAL,CAAyBzI,eAAe,CAAC0I,KAAhB,CAC3CF,MAD2C,EAE3C,KAAK5B,WAAL,CAAiB9E,WAAjB,GAA+B,GAA/B,GAAqCyG,WAFM,CAAzB,CAApB;AAID;AACF,GAlYgC;;AAoYjC;AACF;AACA;AACA;AACA;AACA;AACEE,EAAAA,mBAAmB,EAAE,UAASD,MAAT,EAAiB;AACpC,QAAIG,SAAS,GAAG,IAAhB;;AACA,QAAIC,WAAW,GAAG,YAAW;AAC3B,aAAOJ,MAAM,CAAChE,KAAP,CAAamE,SAAb,EAAwBlE,SAAxB,CAAP;AACD,KAFD;;AAGA,QAAI,iBAAiBhC,OAAO,CAACC,GAAR,CAAYC,QAAjC,EAA2C;AACzCiG,MAAAA,WAAW,CAACC,mBAAZ,GAAkCF,SAAlC;AACAC,MAAAA,WAAW,CAACE,kBAAZ,GAAiCN,MAAjC;AACAI,MAAAA,WAAW,CAACG,qBAAZ,GAAoC,IAApC;AACA,UAAIlC,aAAa,GAAG8B,SAAS,CAAC/B,WAAV,CAAsB9E,WAA1C;AACA,UAAIkH,KAAK,GAAGJ,WAAW,CAACrB,IAAxB;;AACAqB,MAAAA,WAAW,CAACrB,IAAZ,GAAmB,UAAS0B,OAAT,EAAkB;AACnC;AACA;AACA;AACA,YAAIA,OAAO,KAAKN,SAAZ,IAAyBM,OAAO,KAAK,IAAzC,EAA+C;AAC7CC,UAAAA,OAAO,CAACC,IAAR,CACE,8DACA,0BADA,GAC6BtC,aAF/B;AAID,SALD,MAKO,IAAIpC,SAAS,CAACxC,MAAV,KAAqB,CAAzB,EAA4B;AACjCiH,UAAAA,OAAO,CAACC,IAAR,CACE,kEACA,8DADA,GAEA,+CAFA,GAEkDtC,aAHpD;AAKA,iBAAO+B,WAAP;AACD;;AACD,YAAIQ,aAAa,GAAGJ,KAAK,CAACxE,KAAN,CAAYoE,WAAZ,EAAyBnE,SAAzB,CAApB;;AACA2E,QAAAA,aAAa,CAACP,mBAAd,GAAoCF,SAApC;AACAS,QAAAA,aAAa,CAACN,kBAAd,GAAmCN,MAAnC;AACAY,QAAAA,aAAa,CAACL,qBAAd,GACEM,KAAK,CAAC/F,SAAN,CAAgBgG,KAAhB,CAAsBpE,IAAtB,CAA2BT,SAA3B,EAAsC,CAAtC,CADF;AAEA,eAAO2E,aAAP;AACD,OAvBD;AAwBD;;AACD,WAAOR,WAAP;AACD;AA/agC,CAAnC;;AAkbA,IAAIW,2BAA2B,GAAG,YAAW,CAAE,CAA/C;;AACA/I,OAAO,CAAC+I,2BAAD,EAA8B1J,cAAc,CAACkF,KAA7C,CAAP;AACAvE,OAAO,CAAC+I,2BAAD,EAA8BtJ,UAAU,CAAC8E,KAAzC,CAAP;AACAvE,OAAO,CAAC+I,2BAAD,EAA8BpJ,mBAAmB,CAAC4E,KAAlD,CAAP;AACAvE,OAAO,CAAC+I,2BAAD,EAA8BhH,4BAA9B,CAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIiH,uBAAuB,GAAG;AAE5BC,EAAAA,SAAS,EAAExG,kBAFiB;AAI5ByG,EAAAA,IAAI,EAAEH,2BAJsB;;AAM5B;AACF;AACA;AACA;AACA;AACA;AACA;AACEI,EAAAA,WAAW,EAAE,UAAStG,IAAT,EAAe;AAC1B,QAAItB,WAAW,GAAG,YAAW,CAAE,CAA/B;;AACAA,IAAAA,WAAW,CAACuB,SAAZ,GAAwB,IAAIiG,2BAAJ,EAAxB;AACAxH,IAAAA,WAAW,CAACuB,SAAZ,CAAsBsD,WAAtB,GAAoC7E,WAApC;AACAG,IAAAA,oBAAoB,CAACH,WAAD,EAAcsB,IAAd,CAApB;AAEC,qBAAiBZ,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCtC,SAAS,CAChD0B,WAAW,CAACuB,SAAZ,CAAsBlC,MAD0B,EAEhD,yEAFgD,CAAjD,GAGGf,SAAS,CAAC0B,WAAW,CAACuB,SAAZ,CAAsBlC,MAAvB,CAHb;;AAKA,QAAI,iBAAiBqB,OAAO,CAACC,GAAR,CAAYC,QAAjC,EAA2C;AACzC,UAAIZ,WAAW,CAACuB,SAAZ,CAAsBsG,qBAA1B,EAAiD;AAC/CV,QAAAA,OAAO,CAACC,IAAR,CACE,CAAC9F,IAAI,CAACvB,WAAL,IAAoB,aAArB,IAAsC,uBAAtC,GACA,iEADA,GAEA,4DAFA,GAGA,6BAJF;AAMD;AACF,KApByB,CAsB1B;;;AACA,SAAK,IAAI+H,UAAT,IAAuB9I,gCAAvB,EAAyD;AACvD,UAAI,CAACgB,WAAW,CAACuB,SAAZ,CAAsBuG,UAAtB,CAAL,EAAwC;AACtC9H,QAAAA,WAAW,CAACuB,SAAZ,CAAsBuG,UAAtB,IAAoC,IAApC;AACD;AACF;;AAED,QAAIC,sBAAsB,GAAG,UAASpE,KAAT,EAAgBZ,QAAhB,EAA0B;AACrD,UAAIjC,QAAQ,GAAG,IAAId,WAAJ,EAAf;AACAc,MAAAA,QAAQ,CAAC+B,SAAT,CAAmBJ,KAAnB,CAAyB3B,QAAzB,EAAmC4B,SAAnC;AACA,aAAO5B,QAAP;AACD,KAJD;;AAKAiH,IAAAA,sBAAsB,CAACC,oBAAvB,GAA8ChI,WAA9C;AACA+H,IAAAA,sBAAsB,CAACE,YAAvB,GAAsC3G,IAAtC;AACA,WAAOyG,sBAAP;AACD,GAlD2B;;AAoD5B;AACF;AACA;AACA;AACA;AACA;AACA;AACEG,EAAAA,YAAY,EAAE,UAASC,cAAT,EAAyB;AACrC,WAAOA,cAAc,YAAYC,QAA1B,IACA,0BAA0BD,cAD1B,IAEAA,cAAc,CAACH,oBAAf,YAA+CI,QAFtD;AAGD;AA/D2B,CAA9B;AAkEAC,MAAM,CAACC,OAAP,GAAiBb,uBAAjB","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactCompositeComponent\n */\n\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactErrorUtils = require(\"./ReactErrorUtils\");\nvar ReactOwner = require(\"./ReactOwner\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactPropTransferer = require(\"./ReactPropTransferer\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar invariant = require(\"./invariant\");\nvar keyMirror = require(\"./keyMirror\");\nvar merge = require(\"./merge\");\nvar mixInto = require(\"./mixInto\");\nvar objMap = require(\"./objMap\");\n\n/**\n * Policies that describe methods in `ReactCompositeComponentInterface`.\n */\nvar SpecPolicy = keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n  /**\n   * These methods are overriding the base ReactCompositeComponent class.\n   */\n  OVERRIDE_BASE: null,\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\n\n/**\n * Composite components are higher-level components that compose other composite\n * or native components.\n *\n * To create a new type of `ReactCompositeComponent`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return <div>Hello World</div>;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will available on the prototype.\n *\n * @interface ReactCompositeComponentInterface\n * @internal\n */\nvar ReactCompositeComponentInterface = {\n\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_ONCE,\n\n\n\n  // ==== Definition methods ====\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name = this.props.name;\n   *     return <div>Hello, {name}!</div>;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n\n\n\n  // ==== Delegate methods ====\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props and state.\n   *\n   * Use this as an opportunity to `return false` when you're certain that the\n   * transition to the new props and state will not require a component update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState) {\n   *     return !equal(nextProps, this.props) || !equal(nextState, this.state);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props` and `this.state` to `nextProps` and `nextState`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component's DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n\n\n\n  // ==== Advanced methods ====\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n\n};\n\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared in the specification when defining classes\n * using `React.createClass`, they will not be on the component's prototype.\n */\nvar RESERVED_SPEC_KEYS = {\n  displayName: function(Constructor, displayName) {\n    Constructor.displayName = displayName;\n  },\n  mixins: function(Constructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(Constructor, mixins[i]);\n      }\n    }\n  },\n  propTypes: function(Constructor, propTypes) {\n    Constructor.propTypes = propTypes;\n  }\n};\n\nfunction validateMethodOverride(proto, name) {\n  var specPolicy = ReactCompositeComponentInterface[name];\n\n  // Disallow overriding of base class methods unless explicitly allowed.\n  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      specPolicy === SpecPolicy.OVERRIDE_BASE,\n      'ReactCompositeComponentInterface: You are attempting to override ' +\n      '`%s` from your class specification. Ensure that your method names ' +\n      'do not overlap with React methods.',\n      name\n    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));\n  }\n\n  // Disallow defining methods more than once unless explicitly allowed.\n  if (proto.hasOwnProperty(name)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      specPolicy === SpecPolicy.DEFINE_MANY ||\n      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,\n      'ReactCompositeComponentInterface: You are attempting to define ' +\n      '`%s` on your component more than once. This conflict may be due ' +\n      'to a mixin.',\n      name\n    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||\n    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));\n  }\n}\n\n\nfunction validateLifeCycleOnReplaceState(instance) {\n  var compositeLifeCycleState = instance._compositeLifeCycleState;\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    instance.isMounted() ||\n      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,\n    'replaceState(...): Can only update a mounted or mounting component.'\n  ) : invariant(instance.isMounted() ||\n    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));\n  (\"production\" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE,\n    'replaceState(...): Cannot update during an existing state transition ' +\n    '(such as within `render`). This could potentially cause an infinite ' +\n    'loop so it is forbidden.'\n  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE));\n  (\"production\" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,\n    'replaceState(...): Cannot update while unmounting component. This ' +\n    'usually means you called setState() on an unmounted component.'\n  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));\n}\n\n/**\n * Custom version of `mixInto` which handles policy validation and reserved\n * specification keys when building `ReactCompositeComponent` classses.\n */\nfunction mixSpecIntoComponent(Constructor, spec) {\n  var proto = Constructor.prototype;\n  for (var name in spec) {\n    var property = spec[name];\n    if (!spec.hasOwnProperty(name) || !property) {\n      continue;\n    }\n    validateMethodOverride(proto, name);\n\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](Constructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactCompositeComponent methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isCompositeComponentMethod = name in ReactCompositeComponentInterface;\n      var isInherited = name in proto;\n      var markedDontBind = property.__reactDontBind;\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind =\n        isFunction &&\n        !isCompositeComponentMethod &&\n        !isInherited &&\n        !markedDontBind;\n\n      if (shouldAutoBind) {\n        if (!proto.__reactAutoBindMap) {\n          proto.__reactAutoBindMap = {};\n        }\n        proto.__reactAutoBindMap[name] = property;\n        proto[name] = property;\n      } else {\n        if (isInherited) {\n          // For methods which are defined more than once, call the existing\n          // methods before calling the new property.\n          if (ReactCompositeComponentInterface[name] ===\n              SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\nfunction mergeObjectsWithNoDuplicateKeys(one, two) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    one && two && typeof one === 'object' && typeof two === 'object',\n    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'\n  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));\n\n  objMap(two, function(value, key) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      one[key] === undefined,\n      'mergeObjectsWithNoDuplicateKeys(): ' +\n      'Tried to merge two objects with the same key: %s',\n      key\n    ) : invariant(one[key] === undefined));\n    one[key] = value;\n  });\n  return one;\n}\n\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    return mergeObjectsWithNoDuplicateKeys(\n      one.apply(this, arguments),\n      two.apply(this, arguments)\n    );\n  };\n}\n\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n\n/**\n * `ReactCompositeComponent` maintains an auxiliary life cycle state in\n * `this._compositeLifeCycleState` (which can be null).\n *\n * This is different from the life cycle state maintained by `ReactComponent` in\n * `this._lifeCycleState`. The following diagram shows how the states overlap in\n * time. There are times when the CompositeLifeCycle is null - at those times it\n * is only meaningful to look at ComponentLifeCycle alone.\n *\n * Top Row: ReactComponent.ComponentLifeCycle\n * Low Row: ReactComponent.CompositeLifeCycle\n *\n * +-------+------------------------------------------------------+--------+\n * |  UN   |                    MOUNTED                           |   UN   |\n * |MOUNTED|                                                      | MOUNTED|\n * +-------+------------------------------------------------------+--------+\n * |       ^--------+   +------+   +------+   +------+   +--------^        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |    0--|MOUNTING|-0-|RECEIV|-0-|RECEIV|-0-|RECEIV|-0-|   UN   |--->0   |\n * |       |        |   |PROPS |   | PROPS|   | STATE|   |MOUNTING|        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |       +--------+   +------+   +------+   +------+   +--------+        |\n * |       |                                                      |        |\n * +-------+------------------------------------------------------+--------+\n */\nvar CompositeLifeCycle = keyMirror({\n  /**\n   * Components in the process of being mounted respond to state changes\n   * differently.\n   */\n  MOUNTING: null,\n  /**\n   * Components in the process of being unmounted are guarded against state\n   * changes.\n   */\n  UNMOUNTING: null,\n  /**\n   * Components that are mounted and receiving new props respond to state\n   * changes differently.\n   */\n  RECEIVING_PROPS: null,\n  /**\n   * Components that are mounted and receiving new state are guarded against\n   * additional state changes.\n   */\n  RECEIVING_STATE: null\n});\n\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\nvar ReactCompositeComponentMixin = {\n\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {?object} initialProps\n   * @param {*} children\n   * @final\n   * @internal\n   */\n  construct: function(initialProps, children) {\n    // Children can be either an array or more than one argument\n    ReactComponent.Mixin.construct.apply(this, arguments);\n    this.state = null;\n    this._pendingState = null;\n    this._compositeLifeCycleState = null;\n  },\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function() {\n    return ReactComponent.Mixin.isMounted.call(this) &&\n      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;\n  },\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: ReactPerf.measure(\n    'ReactCompositeComponent',\n    'mountComponent',\n    function(rootID, transaction, mountDepth) {\n      ReactComponent.Mixin.mountComponent.call(\n        this,\n        rootID,\n        transaction,\n        mountDepth\n      );\n      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;\n\n      this._defaultProps = this.getDefaultProps ? this.getDefaultProps() : null;\n      this._processProps(this.props);\n\n      if (this.__reactAutoBindMap) {\n        this._bindAutoBindMethods();\n      }\n\n      this.state = this.getInitialState ? this.getInitialState() : null;\n      this._pendingState = null;\n      this._pendingForceUpdate = false;\n\n      if (this.componentWillMount) {\n        this.componentWillMount();\n        // When mounting, calls to `setState` by `componentWillMount` will set\n        // `this._pendingState` without triggering a re-render.\n        if (this._pendingState) {\n          this.state = this._pendingState;\n          this._pendingState = null;\n        }\n      }\n\n      this._renderedComponent = this._renderValidatedComponent();\n\n      // Done with mounting, `setState` will now trigger UI changes.\n      this._compositeLifeCycleState = null;\n      var markup = this._renderedComponent.mountComponent(\n        rootID,\n        transaction,\n        mountDepth + 1\n      );\n      if (this.componentDidMount) {\n        transaction.getReactMountReady().enqueue(this, this.componentDidMount);\n      }\n      return markup;\n    }\n  ),\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function() {\n    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;\n    if (this.componentWillUnmount) {\n      this.componentWillUnmount();\n    }\n    this._compositeLifeCycleState = null;\n\n    this._defaultProps = null;\n\n    ReactComponent.Mixin.unmountComponent.call(this);\n    this._renderedComponent.unmountComponent();\n    this._renderedComponent = null;\n\n    if (this.refs) {\n      this.refs = null;\n    }\n\n    // Some existing components rely on this.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: this.props = null;\n    // TODO: this.state = null;\n  },\n\n  /**\n   * Sets a subset of the state. Always use this or `replaceState` to mutate\n   * state. You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * There is no guarantee that calls to `setState` will run synchronously,\n   * as they may eventually be batched together.  You can provide an optional\n   * callback that will be executed when the call to setState is actually\n   * completed.\n   *\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after state is updated.\n   * @final\n   * @protected\n   */\n  setState: function(partialState, callback) {\n    // Merge with `_pendingState` if it exists, otherwise with existing state.\n    this.replaceState(\n      merge(this._pendingState || this.state, partialState),\n      callback\n    );\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after state is updated.\n   * @final\n   * @protected\n   */\n  replaceState: function(completeState, callback) {\n    validateLifeCycleOnReplaceState(this);\n    this._pendingState = completeState;\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n\n  /**\n   * Processes props by setting default values for unspecified props and\n   * asserting that the props are valid.\n   *\n   * @param {object} props\n   * @private\n   */\n  _processProps: function(props) {\n    var propName;\n    var defaultProps = this._defaultProps;\n    for (propName in defaultProps) {\n      if (!(propName in props)) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n    var propTypes = this.constructor.propTypes;\n    if (propTypes) {\n      var componentName = this.constructor.displayName;\n      for (propName in propTypes) {\n        var checkProp = propTypes[propName];\n        if (checkProp) {\n          checkProp(props, propName, componentName);\n        }\n      }\n    }\n  },\n\n  performUpdateIfNecessary: function() {\n    var compositeLifeCycleState = this._compositeLifeCycleState;\n    // Do not trigger a state transition if we are in the middle of mounting or\n    // receiving props because both of those will already be doing this.\n    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||\n        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {\n      return;\n    }\n    ReactComponent.Mixin.performUpdateIfNecessary.call(this);\n  },\n\n  /**\n   * If any of `_pendingProps`, `_pendingState`, or `_pendingForceUpdate` is\n   * set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  _performUpdateIfNecessary: function(transaction) {\n    if (this._pendingProps == null &&\n        this._pendingState == null &&\n        !this._pendingForceUpdate) {\n      return;\n    }\n\n    var nextProps = this.props;\n    if (this._pendingProps != null) {\n      nextProps = this._pendingProps;\n      this._processProps(nextProps);\n      this._pendingProps = null;\n\n      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;\n      if (this.componentWillReceiveProps) {\n        this.componentWillReceiveProps(nextProps, transaction);\n      }\n    }\n\n    this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_STATE;\n\n    var nextState = this._pendingState || this.state;\n    this._pendingState = null;\n\n    if (this._pendingForceUpdate ||\n        !this.shouldComponentUpdate ||\n        this.shouldComponentUpdate(nextProps, nextState)) {\n      this._pendingForceUpdate = false;\n      // Will set `this.props` and `this.state`.\n      this._performComponentUpdate(nextProps, nextState, transaction);\n    } else {\n      // If it's determined that a component should not update, we still want\n      // to set props and state.\n      this.props = nextProps;\n      this.state = nextState;\n    }\n\n    this._compositeLifeCycleState = null;\n  },\n\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {object} nextProps Next object to set as properties.\n   * @param {?object} nextState Next object to set as state.\n   * @param {ReactReconcileTransaction} transaction\n   * @private\n   */\n  _performComponentUpdate: function(nextProps, nextState, transaction) {\n    var prevProps = this.props;\n    var prevState = this.state;\n\n    if (this.componentWillUpdate) {\n      this.componentWillUpdate(nextProps, nextState, transaction);\n    }\n\n    this.props = nextProps;\n    this.state = nextState;\n\n    this.updateComponent(transaction, prevProps, prevState);\n\n    if (this.componentDidUpdate) {\n      transaction.getReactMountReady().enqueue(\n        this,\n        this.componentDidUpdate.bind(this, prevProps, prevState)\n      );\n    }\n  },\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @internal\n   * @overridable\n   */\n  updateComponent: ReactPerf.measure(\n    'ReactCompositeComponent',\n    'updateComponent',\n    function(transaction, prevProps, prevState) {\n      ReactComponent.Mixin.updateComponent.call(this, transaction, prevProps);\n      var currentComponent = this._renderedComponent;\n      var nextComponent = this._renderValidatedComponent();\n      if (currentComponent.constructor === nextComponent.constructor) {\n        currentComponent.receiveComponent(nextComponent, transaction);\n      } else {\n        // These two IDs are actually the same! But nothing should rely on that.\n        var thisID = this._rootNodeID;\n        var currentComponentID = currentComponent._rootNodeID;\n        currentComponent.unmountComponent();\n        this._renderedComponent = nextComponent;\n        var nextMarkup = nextComponent.mountComponent(\n          thisID,\n          transaction,\n          this._mountDepth + 1\n        );\n        ReactComponent.DOMIDOperations.dangerouslyReplaceNodeWithMarkupByID(\n          currentComponentID,\n          nextMarkup\n        );\n      }\n    }\n  ),\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldUpdateComponent`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {?function} callback Called after update is complete.\n   * @final\n   * @protected\n   */\n  forceUpdate: function(callback) {\n    var compositeLifeCycleState = this._compositeLifeCycleState;\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      this.isMounted() ||\n        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,\n      'forceUpdate(...): Can only force an update on mounted or mounting ' +\n        'components.'\n    ) : invariant(this.isMounted() ||\n      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &&\n      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,\n      'forceUpdate(...): Cannot force an update while unmounting component ' +\n      'or during an existing state transition (such as within `render`).'\n    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &&\n    compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));\n    this._pendingForceUpdate = true;\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n\n  /**\n   * @private\n   */\n  _renderValidatedComponent: function() {\n    var renderedComponent;\n    ReactCurrentOwner.current = this;\n    try {\n      renderedComponent = this.render();\n    } catch (error) {\n      // IE8 requires `catch` in order to use `finally`.\n      throw error;\n    } finally {\n      ReactCurrentOwner.current = null;\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ReactComponent.isValidComponent(renderedComponent),\n      '%s.render(): A valid ReactComponent must be returned. You may have ' +\n      'returned null, undefined, an array, or some other invalid object.',\n      this.constructor.displayName || 'ReactCompositeComponent'\n    ) : invariant(ReactComponent.isValidComponent(renderedComponent)));\n    return renderedComponent;\n  },\n\n  /**\n   * @private\n   */\n  _bindAutoBindMethods: function() {\n    for (var autoBindKey in this.__reactAutoBindMap) {\n      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n        continue;\n      }\n      var method = this.__reactAutoBindMap[autoBindKey];\n      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(\n        method,\n        this.constructor.displayName + '.' + autoBindKey\n      ));\n    }\n  },\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {function} method Method to be bound.\n   * @private\n   */\n  _bindAutoBindMethod: function(method) {\n    var component = this;\n    var boundMethod = function() {\n      return method.apply(component, arguments);\n    };\n    if (\"production\" !== process.env.NODE_ENV) {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n      boundMethod.bind = function(newThis) {\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          console.warn(\n            'bind(): React component methods may only be bound to the ' +\n            'component instance. See ' + componentName\n          );\n        } else if (arguments.length === 1) {\n          console.warn(\n            'bind(): You are binding a component method to the component. ' +\n            'React does this for you automatically in a high-performance ' +\n            'way, so you can safely remove this call. See ' + componentName\n          );\n          return boundMethod;\n        }\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments =\n          Array.prototype.slice.call(arguments, 1);\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n};\n\nvar ReactCompositeComponentBase = function() {};\nmixInto(ReactCompositeComponentBase, ReactComponent.Mixin);\nmixInto(ReactCompositeComponentBase, ReactOwner.Mixin);\nmixInto(ReactCompositeComponentBase, ReactPropTransferer.Mixin);\nmixInto(ReactCompositeComponentBase, ReactCompositeComponentMixin);\n\n/**\n * Module for creating composite components.\n *\n * @class ReactCompositeComponent\n * @extends ReactComponent\n * @extends ReactOwner\n * @extends ReactPropTransferer\n */\nvar ReactCompositeComponent = {\n\n  LifeCycle: CompositeLifeCycle,\n\n  Base: ReactCompositeComponentBase,\n\n  /**\n   * Creates a composite component class given a class specification.\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function(spec) {\n    var Constructor = function() {};\n    Constructor.prototype = new ReactCompositeComponentBase();\n    Constructor.prototype.constructor = Constructor;\n    mixSpecIntoComponent(Constructor, spec);\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Constructor.prototype.render,\n      'createClass(...): Class specification must implement a `render` method.'\n    ) : invariant(Constructor.prototype.render));\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      if (Constructor.prototype.componentShouldUpdate) {\n        console.warn(\n          (spec.displayName || 'A component') + ' has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.'\n         );\n      }\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactCompositeComponentInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    var ConvenienceConstructor = function(props, children) {\n      var instance = new Constructor();\n      instance.construct.apply(instance, arguments);\n      return instance;\n    };\n    ConvenienceConstructor.componentConstructor = Constructor;\n    ConvenienceConstructor.originalSpec = spec;\n    return ConvenienceConstructor;\n  },\n\n  /**\n   * Checks if a value is a valid component constructor.\n   *\n   * @param {*}\n   * @return {boolean}\n   * @public\n   */\n  isValidClass: function(componentClass) {\n    return componentClass instanceof Function &&\n           'componentConstructor' in componentClass &&\n           componentClass.componentConstructor instanceof Function;\n  }\n};\n\nmodule.exports = ReactCompositeComponent;\n"]},"metadata":{},"sourceType":"script"}