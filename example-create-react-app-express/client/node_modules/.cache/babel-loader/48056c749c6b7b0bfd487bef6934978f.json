{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventPluginUtils\n */\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\n\nvar invariant = require(\"./invariant\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nfunction isEndish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;\n}\n\nfunction isMoveish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;\n}\n\nfunction isStartish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;\n}\n\nvar validateEventDispatches;\n\nif (\"production\" !== process.env.NODE_ENV) {\n  validateEventDispatches = function (event) {\n    var dispatchListeners = event._dispatchListeners;\n    var dispatchIDs = event._dispatchIDs;\n    var listenersIsArr = Array.isArray(dispatchListeners);\n    var idsIsArr = Array.isArray(dispatchIDs);\n    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;\n    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;\n    \"production\" !== process.env.NODE_ENV ? invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen);\n  };\n}\n/**\n * Invokes `cb(event, listener, id)`. Avoids using call if no scope is\n * provided. The `(listener,id)` pair effectively forms the \"dispatch\" but are\n * kept separate to conserve memory.\n */\n\n\nfunction forEachEventDispatch(event, cb) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchIDs = event._dispatchIDs;\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    validateEventDispatches(event);\n  }\n\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      } // Listeners and IDs are two parallel arrays that are always in sync.\n\n\n      cb(event, dispatchListeners[i], dispatchIDs[i]);\n    }\n  } else if (dispatchListeners) {\n    cb(event, dispatchListeners, dispatchIDs);\n  }\n}\n/**\n * Default implementation of PluginModule.executeDispatch().\n * @param {SyntheticEvent} SyntheticEvent to handle\n * @param {function} Application-level callback\n * @param {string} domID DOM id to pass to the callback.\n */\n\n\nfunction executeDispatch(event, listener, domID) {\n  listener(event, domID);\n}\n/**\n * Standard/simple iteration through an event's collected dispatches.\n */\n\n\nfunction executeDispatchesInOrder(event, executeDispatch) {\n  forEachEventDispatch(event, executeDispatch);\n  event._dispatchListeners = null;\n  event._dispatchIDs = null;\n}\n/**\n * Standard/simple iteration through an event's collected dispatches, but stops\n * at the first dispatch execution returning true, and returns that id.\n *\n * @return id of the first dispatch execution who's listener returns true, or\n * null if no listener returned true.\n */\n\n\nfunction executeDispatchesInOrderStopAtTrue(event) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchIDs = event._dispatchIDs;\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    validateEventDispatches(event);\n  }\n\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      } // Listeners and IDs are two parallel arrays that are always in sync.\n\n\n      if (dispatchListeners[i](event, dispatchIDs[i])) {\n        return dispatchIDs[i];\n      }\n    }\n  } else if (dispatchListeners) {\n    if (dispatchListeners(event, dispatchIDs)) {\n      return dispatchIDs;\n    }\n  }\n\n  return null;\n}\n/**\n * Execution of a \"direct\" dispatch - there must be at most one dispatch\n * accumulated on the event or it is considered an error. It doesn't really make\n * sense for an event with multiple dispatches (bubbled) to keep track of the\n * return values at each dispatch execution, but it does tend to make sense when\n * dealing with \"direct\" dispatches.\n *\n * @return The return value of executing the single dispatch.\n */\n\n\nfunction executeDirectDispatch(event) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    validateEventDispatches(event);\n  }\n\n  var dispatchListener = event._dispatchListeners;\n  var dispatchID = event._dispatchIDs;\n  \"production\" !== process.env.NODE_ENV ? invariant(!Array.isArray(dispatchListener), 'executeDirectDispatch(...): Invalid `event`.') : invariant(!Array.isArray(dispatchListener));\n  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;\n  event._dispatchListeners = null;\n  event._dispatchIDs = null;\n  return res;\n}\n/**\n * @param {SyntheticEvent} event\n * @return {bool} True iff number of dispatches accumulated is greater than 0.\n */\n\n\nfunction hasDispatches(event) {\n  return !!event._dispatchListeners;\n}\n/**\n * General utilities that are useful in creating custom Event Plugins.\n */\n\n\nvar EventPluginUtils = {\n  isEndish: isEndish,\n  isMoveish: isMoveish,\n  isStartish: isStartish,\n  executeDispatchesInOrder: executeDispatchesInOrder,\n  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,\n  executeDirectDispatch: executeDirectDispatch,\n  hasDispatches: hasDispatches,\n  executeDispatch: executeDispatch\n};\nmodule.exports = EventPluginUtils;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/EventPluginUtils.js"],"names":["EventConstants","require","invariant","topLevelTypes","isEndish","topLevelType","topMouseUp","topTouchEnd","topTouchCancel","isMoveish","topMouseMove","topTouchMove","isStartish","topMouseDown","topTouchStart","validateEventDispatches","process","env","NODE_ENV","event","dispatchListeners","_dispatchListeners","dispatchIDs","_dispatchIDs","listenersIsArr","Array","isArray","idsIsArr","IDsLen","length","listenersLen","forEachEventDispatch","cb","i","isPropagationStopped","executeDispatch","listener","domID","executeDispatchesInOrder","executeDispatchesInOrderStopAtTrue","executeDirectDispatch","dispatchListener","dispatchID","res","hasDispatches","EventPluginUtils","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventPluginUtils\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\n\nvar invariant = require(\"./invariant\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nfunction isEndish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseUp ||\n         topLevelType === topLevelTypes.topTouchEnd ||\n         topLevelType === topLevelTypes.topTouchCancel;\n}\n\nfunction isMoveish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseMove ||\n         topLevelType === topLevelTypes.topTouchMove;\n}\nfunction isStartish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseDown ||\n         topLevelType === topLevelTypes.topTouchStart;\n}\n\nvar validateEventDispatches;\nif (\"production\" !== process.env.NODE_ENV) {\n  validateEventDispatches = function(event) {\n    var dispatchListeners = event._dispatchListeners;\n    var dispatchIDs = event._dispatchIDs;\n\n    var listenersIsArr = Array.isArray(dispatchListeners);\n    var idsIsArr = Array.isArray(dispatchIDs);\n    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;\n    var listenersLen = listenersIsArr ?\n      dispatchListeners.length :\n      dispatchListeners ? 1 : 0;\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      idsIsArr === listenersIsArr && IDsLen === listenersLen,\n      'EventPluginUtils: Invalid `event`.'\n    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));\n  };\n}\n\n/**\n * Invokes `cb(event, listener, id)`. Avoids using call if no scope is\n * provided. The `(listener,id)` pair effectively forms the \"dispatch\" but are\n * kept separate to conserve memory.\n */\nfunction forEachEventDispatch(event, cb) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchIDs = event._dispatchIDs;\n  if (\"production\" !== process.env.NODE_ENV) {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and IDs are two parallel arrays that are always in sync.\n      cb(event, dispatchListeners[i], dispatchIDs[i]);\n    }\n  } else if (dispatchListeners) {\n    cb(event, dispatchListeners, dispatchIDs);\n  }\n}\n\n/**\n * Default implementation of PluginModule.executeDispatch().\n * @param {SyntheticEvent} SyntheticEvent to handle\n * @param {function} Application-level callback\n * @param {string} domID DOM id to pass to the callback.\n */\nfunction executeDispatch(event, listener, domID) {\n  listener(event, domID);\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches.\n */\nfunction executeDispatchesInOrder(event, executeDispatch) {\n  forEachEventDispatch(event, executeDispatch);\n  event._dispatchListeners = null;\n  event._dispatchIDs = null;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches, but stops\n * at the first dispatch execution returning true, and returns that id.\n *\n * @return id of the first dispatch execution who's listener returns true, or\n * null if no listener returned true.\n */\nfunction executeDispatchesInOrderStopAtTrue(event) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchIDs = event._dispatchIDs;\n  if (\"production\" !== process.env.NODE_ENV) {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and IDs are two parallel arrays that are always in sync.\n      if (dispatchListeners[i](event, dispatchIDs[i])) {\n        return dispatchIDs[i];\n      }\n    }\n  } else if (dispatchListeners) {\n    if (dispatchListeners(event, dispatchIDs)) {\n      return dispatchIDs;\n    }\n  }\n  return null;\n}\n\n/**\n * Execution of a \"direct\" dispatch - there must be at most one dispatch\n * accumulated on the event or it is considered an error. It doesn't really make\n * sense for an event with multiple dispatches (bubbled) to keep track of the\n * return values at each dispatch execution, but it does tend to make sense when\n * dealing with \"direct\" dispatches.\n *\n * @return The return value of executing the single dispatch.\n */\nfunction executeDirectDispatch(event) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    validateEventDispatches(event);\n  }\n  var dispatchListener = event._dispatchListeners;\n  var dispatchID = event._dispatchIDs;\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !Array.isArray(dispatchListener),\n    'executeDirectDispatch(...): Invalid `event`.'\n  ) : invariant(!Array.isArray(dispatchListener)));\n  var res = dispatchListener ?\n    dispatchListener(event, dispatchID) :\n    null;\n  event._dispatchListeners = null;\n  event._dispatchIDs = null;\n  return res;\n}\n\n/**\n * @param {SyntheticEvent} event\n * @return {bool} True iff number of dispatches accumulated is greater than 0.\n */\nfunction hasDispatches(event) {\n  return !!event._dispatchListeners;\n}\n\n/**\n * General utilities that are useful in creating custom Event Plugins.\n */\nvar EventPluginUtils = {\n  isEndish: isEndish,\n  isMoveish: isMoveish,\n  isStartish: isStartish,\n  executeDispatchesInOrder: executeDispatchesInOrder,\n  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,\n  executeDirectDispatch: executeDirectDispatch,\n  hasDispatches: hasDispatches,\n  executeDispatch: executeDispatch\n};\n\nmodule.exports = EventPluginUtils;\n"]},"metadata":{},"sourceType":"script"}