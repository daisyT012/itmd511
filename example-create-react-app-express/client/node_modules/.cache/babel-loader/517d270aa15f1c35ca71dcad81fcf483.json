{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactOwner\n */\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n/**\n * ReactOwners are capable of storing references to owned components.\n *\n * All components are capable of //being// referenced by owner components, but\n * only ReactOwner components are capable of //referencing// owned components.\n * The named reference is known as a \"ref\".\n *\n * Refs are available when mounted and updated during reconciliation.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return (\n *         <div onClick={this.handleClick}>\n *           <CustomComponent ref=\"custom\" />\n *         </div>\n *       );\n *     },\n *     handleClick: function() {\n *       this.refs.custom.handleClick();\n *     },\n *     componentDidMount: function() {\n *       this.refs.custom.initialize();\n *     }\n *   });\n *\n * Refs should rarely be used. When refs are used, they should only be done to\n * control data that is not handled by React's data flow.\n *\n * @class ReactOwner\n */\n\n\nvar ReactOwner = {\n  /**\n   * @param {?object} object\n   * @return {boolean} True if `object` is a valid owner.\n   * @final\n   */\n  isValidOwner: function (object) {\n    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');\n  },\n\n  /**\n   * Adds a component by ref to an owner component.\n   *\n   * @param {ReactComponent} component Component to reference.\n   * @param {string} ref Name by which to refer to the component.\n   * @param {ReactOwner} owner Component on which to record the ref.\n   * @final\n   * @internal\n   */\n  addComponentAsRefTo: function (component, ref, owner) {\n    \"production\" !== process.env.NODE_ENV ? invariant(ReactOwner.isValidOwner(owner), 'addComponentAsRefTo(...): Only a ReactOwner can have refs.') : invariant(ReactOwner.isValidOwner(owner));\n    owner.attachRef(ref, component);\n  },\n\n  /**\n   * Removes a component by ref from an owner component.\n   *\n   * @param {ReactComponent} component Component to dereference.\n   * @param {string} ref Name of the ref to remove.\n   * @param {ReactOwner} owner Component on which the ref is recorded.\n   * @final\n   * @internal\n   */\n  removeComponentAsRefFrom: function (component, ref, owner) {\n    \"production\" !== process.env.NODE_ENV ? invariant(ReactOwner.isValidOwner(owner), 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs.') : invariant(ReactOwner.isValidOwner(owner)); // Check that `component` is still the current ref because we do not want to\n    // detach the ref if another component stole it.\n\n    if (owner.refs[ref] === component) {\n      owner.detachRef(ref);\n    }\n  },\n\n  /**\n   * A ReactComponent must mix this in to have refs.\n   *\n   * @lends {ReactOwner.prototype}\n   */\n  Mixin: {\n    /**\n     * Lazily allocates the refs object and stores `component` as `ref`.\n     *\n     * @param {string} ref Reference name.\n     * @param {component} component Component to store as `ref`.\n     * @final\n     * @private\n     */\n    attachRef: function (ref, component) {\n      \"production\" !== process.env.NODE_ENV ? invariant(component.isOwnedBy(this), 'attachRef(%s, ...): Only a component\\'s owner can store a ref to it.', ref) : invariant(component.isOwnedBy(this));\n      var refs = this.refs || (this.refs = {});\n      refs[ref] = component;\n    },\n\n    /**\n     * Detaches a reference name.\n     *\n     * @param {string} ref Name to dereference.\n     * @final\n     * @private\n     */\n    detachRef: function (ref) {\n      delete this.refs[ref];\n    }\n  }\n};\nmodule.exports = ReactOwner;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ReactOwner.js"],"names":["invariant","require","ReactOwner","isValidOwner","object","attachRef","detachRef","addComponentAsRefTo","component","ref","owner","process","env","NODE_ENV","removeComponentAsRefFrom","refs","Mixin","isOwnedBy","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,UAAU,GAAG;AAEf;AACF;AACA;AACA;AACA;AACEC,EAAAA,YAAY,EAAE,UAASC,MAAT,EAAiB;AAC7B,WAAO,CAAC,EACNA,MAAM,IACN,OAAOA,MAAM,CAACC,SAAd,KAA4B,UAD5B,IAEA,OAAOD,MAAM,CAACE,SAAd,KAA4B,UAHtB,CAAR;AAKD,GAbc;;AAef;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,mBAAmB,EAAE,UAASC,SAAT,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgC;AAClD,qBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCb,SAAS,CAChDE,UAAU,CAACC,YAAX,CAAwBO,KAAxB,CADgD,EAEhD,4DAFgD,CAAjD,GAGGV,SAAS,CAACE,UAAU,CAACC,YAAX,CAAwBO,KAAxB,CAAD,CAHb;AAIAA,IAAAA,KAAK,CAACL,SAAN,CAAgBI,GAAhB,EAAqBD,SAArB;AACD,GA9Bc;;AAgCf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,wBAAwB,EAAE,UAASN,SAAT,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgC;AACvD,qBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCb,SAAS,CAChDE,UAAU,CAACC,YAAX,CAAwBO,KAAxB,CADgD,EAEhD,iEAFgD,CAAjD,GAGGV,SAAS,CAACE,UAAU,CAACC,YAAX,CAAwBO,KAAxB,CAAD,CAHb,CADwD,CAKxD;AACA;;AACA,QAAIA,KAAK,CAACK,IAAN,CAAWN,GAAX,MAAoBD,SAAxB,EAAmC;AACjCE,MAAAA,KAAK,CAACJ,SAAN,CAAgBG,GAAhB;AACD;AACF,GAnDc;;AAqDf;AACF;AACA;AACA;AACA;AACEO,EAAAA,KAAK,EAAE;AAEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIX,IAAAA,SAAS,EAAE,UAASI,GAAT,EAAcD,SAAd,EAAyB;AACjC,uBAAiBG,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCb,SAAS,CAChDQ,SAAS,CAACS,SAAV,CAAoB,IAApB,CADgD,EAEhD,sEAFgD,EAGhDR,GAHgD,CAAjD,GAIGT,SAAS,CAACQ,SAAS,CAACS,SAAV,CAAoB,IAApB,CAAD,CAJb;AAKA,UAAIF,IAAI,GAAG,KAAKA,IAAL,KAAc,KAAKA,IAAL,GAAY,EAA1B,CAAX;AACAA,MAAAA,IAAI,CAACN,GAAD,CAAJ,GAAYD,SAAZ;AACD,KAlBI;;AAoBL;AACJ;AACA;AACA;AACA;AACA;AACA;AACIF,IAAAA,SAAS,EAAE,UAASG,GAAT,EAAc;AACvB,aAAO,KAAKM,IAAL,CAAUN,GAAV,CAAP;AACD;AA7BI;AA1DQ,CAAjB;AA6FAS,MAAM,CAACC,OAAP,GAAiBjB,UAAjB","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactOwner\n */\n\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n\n/**\n * ReactOwners are capable of storing references to owned components.\n *\n * All components are capable of //being// referenced by owner components, but\n * only ReactOwner components are capable of //referencing// owned components.\n * The named reference is known as a \"ref\".\n *\n * Refs are available when mounted and updated during reconciliation.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return (\n *         <div onClick={this.handleClick}>\n *           <CustomComponent ref=\"custom\" />\n *         </div>\n *       );\n *     },\n *     handleClick: function() {\n *       this.refs.custom.handleClick();\n *     },\n *     componentDidMount: function() {\n *       this.refs.custom.initialize();\n *     }\n *   });\n *\n * Refs should rarely be used. When refs are used, they should only be done to\n * control data that is not handled by React's data flow.\n *\n * @class ReactOwner\n */\nvar ReactOwner = {\n\n  /**\n   * @param {?object} object\n   * @return {boolean} True if `object` is a valid owner.\n   * @final\n   */\n  isValidOwner: function(object) {\n    return !!(\n      object &&\n      typeof object.attachRef === 'function' &&\n      typeof object.detachRef === 'function'\n    );\n  },\n\n  /**\n   * Adds a component by ref to an owner component.\n   *\n   * @param {ReactComponent} component Component to reference.\n   * @param {string} ref Name by which to refer to the component.\n   * @param {ReactOwner} owner Component on which to record the ref.\n   * @final\n   * @internal\n   */\n  addComponentAsRefTo: function(component, ref, owner) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ReactOwner.isValidOwner(owner),\n      'addComponentAsRefTo(...): Only a ReactOwner can have refs.'\n    ) : invariant(ReactOwner.isValidOwner(owner)));\n    owner.attachRef(ref, component);\n  },\n\n  /**\n   * Removes a component by ref from an owner component.\n   *\n   * @param {ReactComponent} component Component to dereference.\n   * @param {string} ref Name of the ref to remove.\n   * @param {ReactOwner} owner Component on which the ref is recorded.\n   * @final\n   * @internal\n   */\n  removeComponentAsRefFrom: function(component, ref, owner) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ReactOwner.isValidOwner(owner),\n      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs.'\n    ) : invariant(ReactOwner.isValidOwner(owner)));\n    // Check that `component` is still the current ref because we do not want to\n    // detach the ref if another component stole it.\n    if (owner.refs[ref] === component) {\n      owner.detachRef(ref);\n    }\n  },\n\n  /**\n   * A ReactComponent must mix this in to have refs.\n   *\n   * @lends {ReactOwner.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Lazily allocates the refs object and stores `component` as `ref`.\n     *\n     * @param {string} ref Reference name.\n     * @param {component} component Component to store as `ref`.\n     * @final\n     * @private\n     */\n    attachRef: function(ref, component) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        component.isOwnedBy(this),\n        'attachRef(%s, ...): Only a component\\'s owner can store a ref to it.',\n        ref\n      ) : invariant(component.isOwnedBy(this)));\n      var refs = this.refs || (this.refs = {});\n      refs[ref] = component;\n    },\n\n    /**\n     * Detaches a reference name.\n     *\n     * @param {string} ref Name to dereference.\n     * @final\n     * @private\n     */\n    detachRef: function(ref) {\n      delete this.refs[ref];\n    }\n\n  }\n\n};\n\nmodule.exports = ReactOwner;\n"]},"metadata":{},"sourceType":"script"}