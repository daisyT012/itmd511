{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactReconcileTransaction\n * @typechecks static-only\n */\n\"use strict\";\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar PooledClass = require(\"./PooledClass\");\n\nvar ReactEventEmitter = require(\"./ReactEventEmitter\");\n\nvar ReactInputSelection = require(\"./ReactInputSelection\");\n\nvar ReactMountReady = require(\"./ReactMountReady\");\n\nvar Transaction = require(\"./Transaction\");\n\nvar mixInto = require(\"./mixInto\");\n/**\n * Ensures that, when possible, the selection range (currently selected text\n * input) is not disturbed by performing the transaction.\n */\n\n\nvar SELECTION_RESTORATION = {\n  /**\n   * @return {Selection} Selection information.\n   */\n  initialize: ReactInputSelection.getSelectionInformation,\n\n  /**\n   * @param {Selection} sel Selection information returned from `initialize`.\n   */\n  close: ReactInputSelection.restoreSelection\n};\n/**\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\n * high level DOM manipulations (like temporarily removing a text input from the\n * DOM).\n */\n\nvar EVENT_SUPPRESSION = {\n  /**\n   * @return {boolean} The enabled status of `ReactEventEmitter` before the\n   * reconciliation.\n   */\n  initialize: function () {\n    var currentlyEnabled = ReactEventEmitter.isEnabled();\n    ReactEventEmitter.setEnabled(false);\n    return currentlyEnabled;\n  },\n\n  /**\n   * @param {boolean} previouslyEnabled Enabled status of `ReactEventEmitter`\n   *   before the reconciliation occured. `close` restores the previous value.\n   */\n  close: function (previouslyEnabled) {\n    ReactEventEmitter.setEnabled(previouslyEnabled);\n  }\n};\n/**\n * Provides a `ReactMountReady` queue for collecting `onDOMReady` callbacks\n * during the performing of the transaction.\n */\n\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function () {\n    this.reactMountReady.reset();\n  },\n\n  /**\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\n   */\n  close: function () {\n    this.reactMountReady.notifyAll();\n  }\n};\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\n\nvar TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];\n/**\n * Currently:\n * - The order that these are listed in the transaction is critical:\n * - Suppresses events.\n * - Restores selection range.\n *\n * Future:\n * - Restore document/overflow scroll positions that were unintentionally\n *   modified via DOM insertions above the top viewport boundary.\n * - Implement/integrate with customized constraint based layout system and keep\n *   track of which dimensions must be remeasured.\n *\n * @class ReactReconcileTransaction\n */\n\nfunction ReactReconcileTransaction() {\n  this.reinitializeTransaction();\n  this.reactMountReady = ReactMountReady.getPooled(null);\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array<object>} List of operation wrap proceedures.\n   *   TODO: convert to array<TransactionWrapper>\n   */\n  getTransactionWrappers: function () {\n    if (ExecutionEnvironment.canUseDOM) {\n      return TRANSACTION_WRAPPERS;\n    } else {\n      return [];\n    }\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   *   TODO: convert to ReactMountReady\n   */\n  getReactMountReady: function () {\n    return this.reactMountReady;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be resused.\n   */\n  destructor: function () {\n    ReactMountReady.release(this.reactMountReady);\n    this.reactMountReady = null;\n  }\n};\nmixInto(ReactReconcileTransaction, Transaction.Mixin);\nmixInto(ReactReconcileTransaction, Mixin);\nPooledClass.addPoolingTo(ReactReconcileTransaction);\nmodule.exports = ReactReconcileTransaction;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ReactReconcileTransaction.js"],"names":["ExecutionEnvironment","require","PooledClass","ReactEventEmitter","ReactInputSelection","ReactMountReady","Transaction","mixInto","SELECTION_RESTORATION","initialize","getSelectionInformation","close","restoreSelection","EVENT_SUPPRESSION","currentlyEnabled","isEnabled","setEnabled","previouslyEnabled","ON_DOM_READY_QUEUEING","reactMountReady","reset","notifyAll","TRANSACTION_WRAPPERS","ReactReconcileTransaction","reinitializeTransaction","getPooled","Mixin","getTransactionWrappers","canUseDOM","getReactMountReady","destructor","release","addPoolingTo","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactReconcileTransaction\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar PooledClass = require(\"./PooledClass\");\nvar ReactEventEmitter = require(\"./ReactEventEmitter\");\nvar ReactInputSelection = require(\"./ReactInputSelection\");\nvar ReactMountReady = require(\"./ReactMountReady\");\nvar Transaction = require(\"./Transaction\");\n\nvar mixInto = require(\"./mixInto\");\n\n/**\n * Ensures that, when possible, the selection range (currently selected text\n * input) is not disturbed by performing the transaction.\n */\nvar SELECTION_RESTORATION = {\n  /**\n   * @return {Selection} Selection information.\n   */\n  initialize: ReactInputSelection.getSelectionInformation,\n  /**\n   * @param {Selection} sel Selection information returned from `initialize`.\n   */\n  close: ReactInputSelection.restoreSelection\n};\n\n/**\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\n * high level DOM manipulations (like temporarily removing a text input from the\n * DOM).\n */\nvar EVENT_SUPPRESSION = {\n  /**\n   * @return {boolean} The enabled status of `ReactEventEmitter` before the\n   * reconciliation.\n   */\n  initialize: function() {\n    var currentlyEnabled = ReactEventEmitter.isEnabled();\n    ReactEventEmitter.setEnabled(false);\n    return currentlyEnabled;\n  },\n\n  /**\n   * @param {boolean} previouslyEnabled Enabled status of `ReactEventEmitter`\n   *   before the reconciliation occured. `close` restores the previous value.\n   */\n  close: function(previouslyEnabled) {\n    ReactEventEmitter.setEnabled(previouslyEnabled);\n  }\n};\n\n/**\n * Provides a `ReactMountReady` queue for collecting `onDOMReady` callbacks\n * during the performing of the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function() {\n    this.reactMountReady.reset();\n  },\n\n  /**\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\n   */\n  close: function() {\n    this.reactMountReady.notifyAll();\n  }\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [\n  SELECTION_RESTORATION,\n  EVENT_SUPPRESSION,\n  ON_DOM_READY_QUEUEING\n];\n\n/**\n * Currently:\n * - The order that these are listed in the transaction is critical:\n * - Suppresses events.\n * - Restores selection range.\n *\n * Future:\n * - Restore document/overflow scroll positions that were unintentionally\n *   modified via DOM insertions above the top viewport boundary.\n * - Implement/integrate with customized constraint based layout system and keep\n *   track of which dimensions must be remeasured.\n *\n * @class ReactReconcileTransaction\n */\nfunction ReactReconcileTransaction() {\n  this.reinitializeTransaction();\n  this.reactMountReady = ReactMountReady.getPooled(null);\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array<object>} List of operation wrap proceedures.\n   *   TODO: convert to array<TransactionWrapper>\n   */\n  getTransactionWrappers: function() {\n    if (ExecutionEnvironment.canUseDOM) {\n      return TRANSACTION_WRAPPERS;\n    } else {\n      return [];\n    }\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   *   TODO: convert to ReactMountReady\n   */\n  getReactMountReady: function() {\n    return this.reactMountReady;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be resused.\n   */\n  destructor: function() {\n    ReactMountReady.release(this.reactMountReady);\n    this.reactMountReady = null;\n  }\n};\n\n\nmixInto(ReactReconcileTransaction, Transaction.Mixin);\nmixInto(ReactReconcileTransaction, Mixin);\n\nPooledClass.addPoolingTo(ReactReconcileTransaction);\n\nmodule.exports = ReactReconcileTransaction;\n"]},"metadata":{},"sourceType":"script"}