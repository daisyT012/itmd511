{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule CompositionEventPlugin\n * @typechecks static-only\n */\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\n\nvar EventPropagators = require(\"./EventPropagators\");\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar ReactInputSelection = require(\"./ReactInputSelection\");\n\nvar SyntheticCompositionEvent = require(\"./SyntheticCompositionEvent\");\n\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\n\nvar keyOf = require(\"./keyOf\");\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n\nvar START_KEYCODE = 229;\nvar useCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar currentComposition = null; // Events and their corresponding property names.\n\nvar eventTypes = {\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionEnd: null\n      }),\n      captured: keyOf({\n        onCompositionEndCapture: null\n      })\n    }\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionStart: null\n      }),\n      captured: keyOf({\n        onCompositionStartCapture: null\n      })\n    }\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionUpdate: null\n      }),\n      captured: keyOf({\n        onCompositionUpdateCapture: null\n      })\n    }\n  }\n};\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\n\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\n\n\nfunction isFallbackStart(topLevelType, nativeEvent) {\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;\n}\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\n\n\nfunction isFallbackEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n\n    default:\n      return false;\n  }\n}\n/**\n * Helper class stores information about selection and document state\n * so we can figure out what changed at a later date.\n *\n * @param {DOMEventTarget} root\n */\n\n\nfunction FallbackCompositionState(root) {\n  this.root = root;\n  this.startSelection = ReactInputSelection.getSelection(root);\n  this.startValue = this.getText();\n}\n/**\n * Get current text of input.\n *\n * @return {string}\n */\n\n\nFallbackCompositionState.prototype.getText = function () {\n  return this.root.value || this.root[getTextContentAccessor()];\n};\n/**\n * Text that has changed since the start of composition.\n *\n * @return {string}\n */\n\n\nFallbackCompositionState.prototype.getData = function () {\n  var endValue = this.getText();\n  var prefixLength = this.startSelection.start;\n  var suffixLength = this.startValue.length - this.startSelection.end;\n  return endValue.substr(prefixLength, endValue.length - suffixLength - prefixLength);\n};\n/**\n * This plugin creates `onCompositionStart`, `onCompositionUpdate` and\n * `onCompositionEnd` events on inputs, textareas and contentEditable\n * nodes.\n */\n\n\nvar CompositionEventPlugin = {\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n    var eventType;\n    var data;\n\n    if (useCompositionEvent) {\n      eventType = getCompositionEventType(topLevelType);\n    } else if (!currentComposition) {\n      if (isFallbackStart(topLevelType, nativeEvent)) {\n        eventType = eventTypes.start;\n        currentComposition = new FallbackCompositionState(topLevelTarget);\n      }\n    } else if (isFallbackEnd(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionEnd;\n      data = currentComposition.getData();\n      currentComposition = null;\n    }\n\n    if (eventType) {\n      var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent);\n\n      if (data) {\n        // Inject data generated from fallback path into the synthetic event.\n        // This matches the property of native CompositionEventInterface.\n        event.data = data;\n      }\n\n      EventPropagators.accumulateTwoPhaseDispatches(event);\n      return event;\n    }\n  }\n};\nmodule.exports = CompositionEventPlugin;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/CompositionEventPlugin.js"],"names":["EventConstants","require","EventPropagators","ExecutionEnvironment","ReactInputSelection","SyntheticCompositionEvent","getTextContentAccessor","keyOf","END_KEYCODES","START_KEYCODE","useCompositionEvent","canUseDOM","window","topLevelTypes","currentComposition","eventTypes","compositionEnd","phasedRegistrationNames","bubbled","onCompositionEnd","captured","onCompositionEndCapture","compositionStart","onCompositionStart","onCompositionStartCapture","compositionUpdate","onCompositionUpdate","onCompositionUpdateCapture","getCompositionEventType","topLevelType","topCompositionStart","topCompositionEnd","topCompositionUpdate","isFallbackStart","nativeEvent","topKeyDown","keyCode","isFallbackEnd","topKeyUp","indexOf","topKeyPress","topMouseDown","topBlur","FallbackCompositionState","root","startSelection","getSelection","startValue","getText","prototype","value","getData","endValue","prefixLength","start","suffixLength","length","end","substr","CompositionEventPlugin","extractEvents","topLevelTarget","topLevelTargetID","eventType","data","event","getPooled","accumulateTwoPhaseDispatches","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule CompositionEventPlugin\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar ReactInputSelection = require(\"./ReactInputSelection\");\nvar SyntheticCompositionEvent = require(\"./SyntheticCompositionEvent\");\n\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\nvar keyOf = require(\"./keyOf\");\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar useCompositionEvent = ExecutionEnvironment.canUseDOM &&\n  'CompositionEvent' in window;\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar currentComposition = null;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionEnd: null}),\n      captured: keyOf({onCompositionEndCapture: null})\n    }\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionStart: null}),\n      captured: keyOf({onCompositionStartCapture: null})\n    }\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionUpdate: null}),\n      captured: keyOf({onCompositionUpdateCapture: null})\n    }\n  }\n};\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackStart(topLevelType, nativeEvent) {\n  return (\n    topLevelType === topLevelTypes.topKeyDown &&\n    nativeEvent.keyCode === START_KEYCODE\n  );\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return (nativeEvent.keyCode !== START_KEYCODE);\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Helper class stores information about selection and document state\n * so we can figure out what changed at a later date.\n *\n * @param {DOMEventTarget} root\n */\nfunction FallbackCompositionState(root) {\n  this.root = root;\n  this.startSelection = ReactInputSelection.getSelection(root);\n  this.startValue = this.getText();\n}\n\n/**\n * Get current text of input.\n *\n * @return {string}\n */\nFallbackCompositionState.prototype.getText = function() {\n  return this.root.value || this.root[getTextContentAccessor()];\n};\n\n/**\n * Text that has changed since the start of composition.\n *\n * @return {string}\n */\nFallbackCompositionState.prototype.getData = function() {\n  var endValue = this.getText();\n  var prefixLength = this.startSelection.start;\n  var suffixLength = this.startValue.length - this.startSelection.end;\n\n  return endValue.substr(\n    prefixLength,\n    endValue.length - suffixLength - prefixLength\n  );\n};\n\n/**\n * This plugin creates `onCompositionStart`, `onCompositionUpdate` and\n * `onCompositionEnd` events on inputs, textareas and contentEditable\n * nodes.\n */\nvar CompositionEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    var eventType;\n    var data;\n\n    if (useCompositionEvent) {\n      eventType = getCompositionEventType(topLevelType);\n    } else if (!currentComposition) {\n      if (isFallbackStart(topLevelType, nativeEvent)) {\n        eventType = eventTypes.start;\n        currentComposition = new FallbackCompositionState(topLevelTarget);\n      }\n    } else if (isFallbackEnd(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionEnd;\n      data = currentComposition.getData();\n      currentComposition = null;\n    }\n\n    if (eventType) {\n      var event = SyntheticCompositionEvent.getPooled(\n        eventType,\n        topLevelTargetID,\n        nativeEvent\n      );\n      if (data) {\n        // Inject data generated from fallback path into the synthetic event.\n        // This matches the property of native CompositionEventInterface.\n        event.data = data;\n      }\n      EventPropagators.accumulateTwoPhaseDispatches(event);\n      return event;\n    }\n  }\n};\n\nmodule.exports = CompositionEventPlugin;\n"]},"metadata":{},"sourceType":"script"}