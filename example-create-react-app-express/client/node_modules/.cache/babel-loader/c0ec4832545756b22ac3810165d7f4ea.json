{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\n\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\n\nvar flattenChildren = require(\"./flattenChildren\");\n/**\n * Given a `curChild` and `newChild`, determines if `curChild` should be\n * updated as opposed to being destroyed or replaced.\n *\n * @param {?ReactComponent} curChild\n * @param {?ReactComponent} newChild\n * @return {boolean} True if `curChild` should be updated with `newChild`.\n * @protected\n */\n\n\nfunction shouldUpdateChild(curChild, newChild) {\n  return curChild && newChild && curChild.constructor === newChild.constructor;\n}\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\n\n\nvar updateDepth = 0;\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\n\nvar updateQueue = [];\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\n\nvar markupQueue = [];\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\n\nfunction enqueueMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    textContent: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\n\n\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\n\n\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\n\n\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    textContent: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\n\n\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponent.DOMIDOperations.dangerouslyProcessChildrenUpdates(updateQueue, markupQueue);\n    clearQueue();\n  }\n}\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\n\n\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\n\n\nvar ReactMultiChild = {\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction) {\n      var children = flattenChildren(nestedChildren);\n      var mountImages = [];\n      var index = 0;\n      this._renderedChildren = children;\n\n      for (var name in children) {\n        var child = children[name];\n\n        if (children.hasOwnProperty(name) && child) {\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + '.' + name;\n          var mountImage = child.mountComponent(rootID, transaction, this._mountDepth + 1);\n          child._mountImage = mountImage;\n          child._mountIndex = index;\n          mountImages.push(mountImage);\n          index++;\n        }\n      }\n\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      updateDepth++;\n\n      try {\n        var prevChildren = this._renderedChildren; // Remove any rendered children.\n\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name) && prevChildren[name]) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        } // Set new text content.\n\n\n        this.setTextContent(nextContent);\n      } catch (error) {\n        updateDepth--;\n        updateDepth || clearQueue();\n        throw error;\n      }\n\n      updateDepth--;\n      updateDepth || processQueue();\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildren, transaction) {\n      updateDepth++;\n\n      try {\n        this._updateChildren(nextNestedChildren, transaction);\n      } catch (error) {\n        updateDepth--;\n        updateDepth || clearQueue();\n        throw error;\n      }\n\n      updateDepth--;\n      updateDepth || processQueue();\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildren, transaction) {\n      var nextChildren = flattenChildren(nextNestedChildren);\n      var prevChildren = this._renderedChildren;\n\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n\n      var name; // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n\n      var lastIndex = 0;\n      var nextIndex = 0;\n\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n\n        if (shouldUpdateChild(prevChild, nextChild)) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild.receiveComponent(nextChild, transaction);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n\n            this._unmountChildByName(prevChild, name);\n          }\n\n          if (nextChild) {\n            this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction);\n          }\n        }\n\n        if (nextChild) {\n          nextIndex++;\n        }\n      } // Remove children that are no longer present.\n\n\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) && prevChildren[name] && !(nextChildren && nextChildren[name])) {\n          this._unmountChildByName(prevChildren[name], name);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function () {\n      var renderedChildren = this._renderedChildren;\n\n      for (var name in renderedChildren) {\n        var renderedChild = renderedChildren[name];\n\n        if (renderedChild && renderedChild.unmountComponent) {\n          renderedChild.unmountComponent();\n        }\n      }\n\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @protected\n     */\n    createChild: function (child) {\n      enqueueMarkup(this._rootNodeID, child._mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function (textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function (child, name, index, transaction) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + '.' + name;\n      var mountImage = child.mountComponent(rootID, transaction, this._mountDepth + 1);\n      child._mountImage = mountImage;\n      child._mountIndex = index;\n      this.createChild(child);\n      this._renderedChildren = this._renderedChildren || {};\n      this._renderedChildren[name] = child;\n    },\n\n    /**\n     * Unmounts a rendered child by name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @param {string} name Name of the child in `this._renderedChildren`.\n     * @private\n     */\n    _unmountChildByName: function (child, name) {\n      if (ReactComponent.isValidComponent(child)) {\n        this.removeChild(child);\n        child._mountImage = null;\n        child._mountIndex = null;\n        child.unmountComponent();\n        delete this._renderedChildren[name];\n      }\n    }\n  }\n};\nmodule.exports = ReactMultiChild;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ReactMultiChild.js"],"names":["ReactComponent","require","ReactMultiChildUpdateTypes","flattenChildren","shouldUpdateChild","curChild","newChild","constructor","updateDepth","updateQueue","markupQueue","enqueueMarkup","parentID","markup","toIndex","push","parentNode","type","INSERT_MARKUP","markupIndex","textContent","fromIndex","enqueueMove","MOVE_EXISTING","enqueueRemove","REMOVE_NODE","enqueueTextContent","TEXT_CONTENT","processQueue","length","DOMIDOperations","dangerouslyProcessChildrenUpdates","clearQueue","ReactMultiChild","Mixin","mountChildren","nestedChildren","transaction","children","mountImages","index","_renderedChildren","name","child","hasOwnProperty","rootID","_rootNodeID","mountImage","mountComponent","_mountDepth","_mountImage","_mountIndex","updateTextContent","nextContent","prevChildren","_unmountChildByName","setTextContent","error","updateChildren","nextNestedChildren","_updateChildren","nextChildren","lastIndex","nextIndex","prevChild","nextChild","moveChild","Math","max","receiveComponent","_mountChildByNameAtIndex","unmountChildren","renderedChildren","renderedChild","unmountComponent","createChild","removeChild","isValidComponent","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\n\nvar flattenChildren = require(\"./flattenChildren\");\n\n/**\n * Given a `curChild` and `newChild`, determines if `curChild` should be\n * updated as opposed to being destroyed or replaced.\n *\n * @param {?ReactComponent} curChild\n * @param {?ReactComponent} newChild\n * @return {boolean} True if `curChild` should be updated with `newChild`.\n * @protected\n */\nfunction shouldUpdateChild(curChild, newChild) {\n  return curChild && newChild && curChild.constructor === newChild.constructor;\n}\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    textContent: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    textContent: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponent.DOMIDOperations.dangerouslyProcessChildrenUpdates(\n      updateQueue,\n      markupQueue\n    );\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function(nestedChildren, transaction) {\n      var children = flattenChildren(nestedChildren);\n      var mountImages = [];\n      var index = 0;\n      this._renderedChildren = children;\n      for (var name in children) {\n        var child = children[name];\n        if (children.hasOwnProperty(name) && child) {\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + '.' + name;\n          var mountImage = child.mountComponent(\n            rootID,\n            transaction,\n            this._mountDepth + 1\n          );\n          child._mountImage = mountImage;\n          child._mountIndex = index;\n          mountImages.push(mountImage);\n          index++;\n        }\n      }\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function(nextContent) {\n      updateDepth++;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name) &&\n              prevChildren[name]) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n      } catch (error) {\n        updateDepth--;\n        updateDepth || clearQueue();\n        throw error;\n      }\n      updateDepth--;\n      updateDepth || processQueue();\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function(nextNestedChildren, transaction) {\n      updateDepth++;\n      try {\n        this._updateChildren(nextNestedChildren, transaction);\n      } catch (error) {\n        updateDepth--;\n        updateDepth || clearQueue();\n        throw error;\n      }\n      updateDepth--;\n      updateDepth || processQueue();\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function(nextNestedChildren, transaction) {\n      var nextChildren = flattenChildren(nextNestedChildren);\n      var prevChildren = this._renderedChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (shouldUpdateChild(prevChild, nextChild)) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild.receiveComponent(nextChild, transaction);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChildByName(prevChild, name);\n          }\n          if (nextChild) {\n            this._mountChildByNameAtIndex(\n              nextChild, name, nextIndex, transaction\n            );\n          }\n        }\n        if (nextChild) {\n          nextIndex++;\n        }\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) &&\n            prevChildren[name] &&\n            !(nextChildren && nextChildren[name])) {\n          this._unmountChildByName(prevChildren[name], name);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function() {\n      var renderedChildren = this._renderedChildren;\n      for (var name in renderedChildren) {\n        var renderedChild = renderedChildren[name];\n        if (renderedChild && renderedChild.unmountComponent) {\n          renderedChild.unmountComponent();\n        }\n      }\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function(child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @protected\n     */\n    createChild: function(child) {\n      enqueueMarkup(this._rootNodeID, child._mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function(child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function(textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function(child, name, index, transaction) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + '.' + name;\n      var mountImage = child.mountComponent(\n        rootID,\n        transaction,\n        this._mountDepth + 1\n      );\n      child._mountImage = mountImage;\n      child._mountIndex = index;\n      this.createChild(child);\n      this._renderedChildren = this._renderedChildren || {};\n      this._renderedChildren[name] = child;\n    },\n\n    /**\n     * Unmounts a rendered child by name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @param {string} name Name of the child in `this._renderedChildren`.\n     * @private\n     */\n    _unmountChildByName: function(child, name) {\n      if (ReactComponent.isValidComponent(child)) {\n        this.removeChild(child);\n        child._mountImage = null;\n        child._mountIndex = null;\n        child.unmountComponent();\n        delete this._renderedChildren[name];\n      }\n    }\n\n  }\n\n};\n\nmodule.exports = ReactMultiChild;\n"]},"metadata":{},"sourceType":"script"}