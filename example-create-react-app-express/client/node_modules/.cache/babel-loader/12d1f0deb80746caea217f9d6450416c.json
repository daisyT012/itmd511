{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @typechecks static-only\n * @providesModule ReactServerRendering\n */\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\n\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\n\nvar ReactMarkupChecksum = require(\"./ReactMarkupChecksum\");\n\nvar ReactReconcileTransaction = require(\"./ReactReconcileTransaction\");\n\nvar invariant = require(\"./invariant\");\n/**\n * @param {ReactComponent} component\n * @param {function} callback\n */\n\n\nfunction renderComponentToString(component, callback) {\n  // We use a callback API to keep the API async in case in the future we ever\n  // need it, but in reality this is a synchronous operation.\n  \"production\" !== process.env.NODE_ENV ? invariant(ReactComponent.isValidComponent(component), 'renderComponentToString(): You must pass a valid ReactComponent.') : invariant(ReactComponent.isValidComponent(component));\n  \"production\" !== process.env.NODE_ENV ? invariant(typeof callback === 'function', 'renderComponentToString(): You must pass a function as a callback.') : invariant(typeof callback === 'function');\n  var id = ReactInstanceHandles.createReactRootID();\n  var transaction = ReactReconcileTransaction.getPooled();\n  transaction.reinitializeTransaction();\n\n  try {\n    transaction.perform(function () {\n      var markup = component.mountComponent(id, transaction, 0);\n      markup = ReactMarkupChecksum.addChecksumToMarkup(markup);\n      callback(markup);\n    }, null);\n  } finally {\n    ReactReconcileTransaction.release(transaction);\n  }\n}\n\nmodule.exports = {\n  renderComponentToString: renderComponentToString\n};","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ReactServerRendering.js"],"names":["ReactComponent","require","ReactInstanceHandles","ReactMarkupChecksum","ReactReconcileTransaction","invariant","renderComponentToString","component","callback","process","env","NODE_ENV","isValidComponent","id","createReactRootID","transaction","getPooled","reinitializeTransaction","perform","markup","mountComponent","addChecksumToMarkup","release","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIE,mBAAmB,GAAGF,OAAO,CAAC,uBAAD,CAAjC;;AACA,IAAIG,yBAAyB,GAAGH,OAAO,CAAC,6BAAD,CAAvC;;AAEA,IAAII,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAvB;AAEA;AACA;AACA;AACA;;;AACA,SAASK,uBAAT,CAAiCC,SAAjC,EAA4CC,QAA5C,EAAsD;AACpD;AACA;AAEC,mBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCN,SAAS,CAChDL,cAAc,CAACY,gBAAf,CAAgCL,SAAhC,CADgD,EAEhD,kEAFgD,CAAjD,GAGGF,SAAS,CAACL,cAAc,CAACY,gBAAf,CAAgCL,SAAhC,CAAD,CAHb;AAKC,mBAAiBE,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCN,SAAS,CAChD,OAAOG,QAAP,KAAoB,UAD4B,EAEhD,oEAFgD,CAAjD,GAGGH,SAAS,CAAC,OAAOG,QAAP,KAAoB,UAArB,CAHb;AAKA,MAAIK,EAAE,GAAGX,oBAAoB,CAACY,iBAArB,EAAT;AACA,MAAIC,WAAW,GAAGX,yBAAyB,CAACY,SAA1B,EAAlB;AACAD,EAAAA,WAAW,CAACE,uBAAZ;;AACA,MAAI;AACFF,IAAAA,WAAW,CAACG,OAAZ,CAAoB,YAAW;AAC7B,UAAIC,MAAM,GAAGZ,SAAS,CAACa,cAAV,CAAyBP,EAAzB,EAA6BE,WAA7B,EAA0C,CAA1C,CAAb;AACAI,MAAAA,MAAM,GAAGhB,mBAAmB,CAACkB,mBAApB,CAAwCF,MAAxC,CAAT;AACAX,MAAAA,QAAQ,CAACW,MAAD,CAAR;AACD,KAJD,EAIG,IAJH;AAKD,GAND,SAMU;AACRf,IAAAA,yBAAyB,CAACkB,OAA1B,CAAkCP,WAAlC;AACD;AACF;;AAEDQ,MAAM,CAACC,OAAP,GAAiB;AACflB,EAAAA,uBAAuB,EAAEA;AADV,CAAjB","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @typechecks static-only\n * @providesModule ReactServerRendering\n */\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\nvar ReactMarkupChecksum = require(\"./ReactMarkupChecksum\");\nvar ReactReconcileTransaction = require(\"./ReactReconcileTransaction\");\n\nvar invariant = require(\"./invariant\");\n\n/**\n * @param {ReactComponent} component\n * @param {function} callback\n */\nfunction renderComponentToString(component, callback) {\n  // We use a callback API to keep the API async in case in the future we ever\n  // need it, but in reality this is a synchronous operation.\n\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    ReactComponent.isValidComponent(component),\n    'renderComponentToString(): You must pass a valid ReactComponent.'\n  ) : invariant(ReactComponent.isValidComponent(component)));\n\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    typeof callback === 'function',\n    'renderComponentToString(): You must pass a function as a callback.'\n  ) : invariant(typeof callback === 'function'));\n\n  var id = ReactInstanceHandles.createReactRootID();\n  var transaction = ReactReconcileTransaction.getPooled();\n  transaction.reinitializeTransaction();\n  try {\n    transaction.perform(function() {\n      var markup = component.mountComponent(id, transaction, 0);\n      markup = ReactMarkupChecksum.addChecksumToMarkup(markup);\n      callback(markup);\n    }, null);\n  } finally {\n    ReactReconcileTransaction.release(transaction);\n  }\n}\n\nmodule.exports = {\n  renderComponentToString: renderComponentToString\n};\n"]},"metadata":{},"sourceType":"script"}