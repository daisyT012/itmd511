{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule createArrayFrom\n * @typechecks\n */\n\n/**\n * NOTE: if you are a previous user of this function, it has been considered\n * unsafe because it's inconsistent across browsers for some inputs.\n * Instead use `Array.isArray()`.\n *\n * Perform a heuristic test to determine if an object is \"array-like\".\n *\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\n *   Joshu replied: \"Mu.\"\n *\n * This function determines if its argument has \"array nature\": it returns\n * true if the argument is an actual array, an `arguments' object, or an\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\n *\n * @param {*} obj\n * @return {boolean}\n */\nfunction hasArrayNature(obj) {\n  return (// not null/false\n    !!obj && ( // arrays are objects, NodeLists are functions in Safari\n    typeof obj == 'object' || typeof obj == 'function') && // quacks like an array\n    'length' in obj && // not window\n    !('setInterval' in obj) && // no DOM node should be considered an array-like\n    // a 'select' element has 'length' and 'item' properties on IE8\n    typeof obj.nodeType != 'number' && ( // a real array\n    // HTMLCollection/NodeList\n    Array.isArray(obj) || // arguments\n    'callee' in obj || 'item' in obj)\n  );\n}\n/**\n * Ensure that the argument is an array by wrapping it in an array if it is not.\n * Creates a copy of the argument if it is already an array.\n *\n * This is mostly useful idiomatically:\n *\n *   var createArrayFrom = require('createArrayFrom');\n *\n *   function takesOneOrMoreThings(things) {\n *     things = createArrayFrom(things);\n *     ...\n *   }\n *\n * This allows you to treat `things' as an array, but accept scalars in the API.\n *\n * This is also good for converting certain pseudo-arrays, like `arguments` or\n * HTMLCollections, into arrays.\n *\n * @param {*} obj\n * @return {array}\n */\n\n\nfunction createArrayFrom(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  }\n\n  if (obj.item) {\n    // IE does not support Array#slice on HTMLCollections\n    var l = obj.length,\n        ret = new Array(l);\n\n    while (l--) {\n      ret[l] = obj[l];\n    }\n\n    return ret;\n  }\n\n  return Array.prototype.slice.call(obj);\n}\n\nmodule.exports = createArrayFrom;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/createArrayFrom.js"],"names":["hasArrayNature","obj","nodeType","Array","isArray","createArrayFrom","item","l","length","ret","prototype","slice","call","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,SACE;AACA,KAAC,CAACA,GAAF,MACA;AACC,WAAOA,GAAP,IAAc,QAAd,IAA0B,OAAOA,GAAP,IAAc,UAFzC,KAGA;AACC,gBAAYA,GAJb,IAKA;AACA,MAAE,iBAAiBA,GAAnB,CANA,IAOA;AACA;AACC,WAAOA,GAAG,CAACC,QAAX,IAAuB,QATxB,MAWE;AACC;AACAC,IAAAA,KAAK,CAACC,OAAN,CAAcH,GAAd,KACD;AACC,gBAAYA,GAFZ,IAEoB,UAAUA,GAfjC;AAFF;AAoBD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,eAAT,CAAyBJ,GAAzB,EAA8B;AAC5B,MAAI,CAACD,cAAc,CAACC,GAAD,CAAnB,EAA0B;AACxB,WAAO,CAACA,GAAD,CAAP;AACD;;AACD,MAAIA,GAAG,CAACK,IAAR,EAAc;AACZ;AACA,QAAIC,CAAC,GAAGN,GAAG,CAACO,MAAZ;AAAA,QAAoBC,GAAG,GAAG,IAAIN,KAAJ,CAAUI,CAAV,CAA1B;;AACA,WAAOA,CAAC,EAAR,EAAY;AAAEE,MAAAA,GAAG,CAACF,CAAD,CAAH,GAASN,GAAG,CAACM,CAAD,CAAZ;AAAkB;;AAChC,WAAOE,GAAP;AACD;;AACD,SAAON,KAAK,CAACO,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BX,GAA3B,CAAP;AACD;;AAEDY,MAAM,CAACC,OAAP,GAAiBT,eAAjB","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule createArrayFrom\n * @typechecks\n */\n\n/**\n * NOTE: if you are a previous user of this function, it has been considered\n * unsafe because it's inconsistent across browsers for some inputs.\n * Instead use `Array.isArray()`.\n *\n * Perform a heuristic test to determine if an object is \"array-like\".\n *\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\n *   Joshu replied: \"Mu.\"\n *\n * This function determines if its argument has \"array nature\": it returns\n * true if the argument is an actual array, an `arguments' object, or an\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\n *\n * @param {*} obj\n * @return {boolean}\n */\nfunction hasArrayNature(obj) {\n  return (\n    // not null/false\n    !!obj &&\n    // arrays are objects, NodeLists are functions in Safari\n    (typeof obj == 'object' || typeof obj == 'function') &&\n    // quacks like an array\n    ('length' in obj) &&\n    // not window\n    !('setInterval' in obj) &&\n    // no DOM node should be considered an array-like\n    // a 'select' element has 'length' and 'item' properties on IE8\n    (typeof obj.nodeType != 'number') &&\n    (\n      // a real array\n      (// HTMLCollection/NodeList\n      (Array.isArray(obj) ||\n      // arguments\n      ('callee' in obj) || 'item' in obj))\n    )\n  );\n}\n\n/**\n * Ensure that the argument is an array by wrapping it in an array if it is not.\n * Creates a copy of the argument if it is already an array.\n *\n * This is mostly useful idiomatically:\n *\n *   var createArrayFrom = require('createArrayFrom');\n *\n *   function takesOneOrMoreThings(things) {\n *     things = createArrayFrom(things);\n *     ...\n *   }\n *\n * This allows you to treat `things' as an array, but accept scalars in the API.\n *\n * This is also good for converting certain pseudo-arrays, like `arguments` or\n * HTMLCollections, into arrays.\n *\n * @param {*} obj\n * @return {array}\n */\nfunction createArrayFrom(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  }\n  if (obj.item) {\n    // IE does not support Array#slice on HTMLCollections\n    var l = obj.length, ret = new Array(l);\n    while (l--) { ret[l] = obj[l]; }\n    return ret;\n  }\n  return Array.prototype.slice.call(obj);\n}\n\nmodule.exports = createArrayFrom;\n"]},"metadata":{},"sourceType":"script"}