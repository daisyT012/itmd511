{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule mutateHTMLNodeWithMarkup\n * @typechecks static-only\n */\n\n/*jslint evil: true */\n'use strict';\n\nvar createNodesFromMarkup = require(\"./createNodesFromMarkup\");\n\nvar filterAttributes = require(\"./filterAttributes\");\n\nvar invariant = require(\"./invariant\");\n/**\n * You can't set the innerHTML of a document. Unless you have\n * this function.\n *\n * @param {DOMElement} node with tagName == 'html'\n * @param {string} markup markup string including <html>.\n */\n\n\nfunction mutateHTMLNodeWithMarkup(node, markup) {\n  \"production\" !== process.env.NODE_ENV ? invariant(node.tagName.toLowerCase() === 'html', 'mutateHTMLNodeWithMarkup(): node must have tagName of \"html\", got %s', node.tagName) : invariant(node.tagName.toLowerCase() === 'html');\n  markup = markup.trim();\n  \"production\" !== process.env.NODE_ENV ? invariant(markup.toLowerCase().indexOf('<html') === 0, 'mutateHTMLNodeWithMarkup(): markup must start with <html') : invariant(markup.toLowerCase().indexOf('<html') === 0); // First let's extract the various pieces of markup.\n\n  var htmlOpenTagEnd = markup.indexOf('>') + 1;\n  var htmlCloseTagStart = markup.lastIndexOf('<');\n  var htmlOpenTag = markup.substring(0, htmlOpenTagEnd);\n  var innerHTML = markup.substring(htmlOpenTagEnd, htmlCloseTagStart); // Now for the fun stuff. Pass through both sets of attributes and\n  // bring them up-to-date. We get the new set by creating a markup\n  // fragment.\n\n  var shouldExtractAttributes = htmlOpenTag.indexOf(' ') > -1;\n  var attributeHolder = null;\n\n  if (shouldExtractAttributes) {\n    // We extract the attributes by creating a <span> and evaluating\n    // the node.\n    attributeHolder = createNodesFromMarkup(htmlOpenTag.replace('html ', 'span ') + '</span>')[0]; // Add all attributes present in attributeHolder\n\n    var attributesToSet = filterAttributes(attributeHolder, function (attr) {\n      return node.getAttributeNS(attr.namespaceURI, attr.name) !== attr.value;\n    });\n    attributesToSet.forEach(function (attr) {\n      node.setAttributeNS(attr.namespaceURI, attr.name, attr.value);\n    });\n  } // Remove all attributes not present in attributeHolder\n\n\n  var attributesToRemove = filterAttributes(node, function (attr) {\n    // Remove all attributes if attributeHolder is null or if it does not have\n    // the desired attribute.\n    return !(attributeHolder && attributeHolder.hasAttributeNS(attr.namespaceURI, attr.name));\n  });\n  attributesToRemove.forEach(function (attr) {\n    node.removeAttributeNS(attr.namespaceURI, attr.name);\n  }); // Finally, set the inner HTML. No tricks needed. Do this last to\n  // minimize likelihood of triggering reflows.\n\n  node.innerHTML = innerHTML;\n}\n\nmodule.exports = mutateHTMLNodeWithMarkup;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/mutateHTMLNodeWithMarkup.js"],"names":["createNodesFromMarkup","require","filterAttributes","invariant","mutateHTMLNodeWithMarkup","node","markup","process","env","NODE_ENV","tagName","toLowerCase","trim","indexOf","htmlOpenTagEnd","htmlCloseTagStart","lastIndexOf","htmlOpenTag","substring","innerHTML","shouldExtractAttributes","attributeHolder","replace","attributesToSet","attr","getAttributeNS","namespaceURI","name","value","forEach","setAttributeNS","attributesToRemove","hasAttributeNS","removeAttributeNS","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AAEA,IAAIA,qBAAqB,GAAGC,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,wBAAT,CAAkCC,IAAlC,EAAwCC,MAAxC,EAAgD;AAC7C,mBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCN,SAAS,CAChDE,IAAI,CAACK,OAAL,CAAaC,WAAb,OAA+B,MADiB,EAEhD,sEAFgD,EAGhDN,IAAI,CAACK,OAH2C,CAAjD,GAIGP,SAAS,CAACE,IAAI,CAACK,OAAL,CAAaC,WAAb,OAA+B,MAAhC,CAJb;AAMAL,EAAAA,MAAM,GAAGA,MAAM,CAACM,IAAP,EAAT;AACC,mBAAiBL,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCN,SAAS,CAChDG,MAAM,CAACK,WAAP,GAAqBE,OAArB,CAA6B,OAA7B,MAA0C,CADM,EAEhD,0DAFgD,CAAjD,GAGGV,SAAS,CAACG,MAAM,CAACK,WAAP,GAAqBE,OAArB,CAA6B,OAA7B,MAA0C,CAA3C,CAHb,CAR8C,CAa9C;;AACA,MAAIC,cAAc,GAAGR,MAAM,CAACO,OAAP,CAAe,GAAf,IAAsB,CAA3C;AACA,MAAIE,iBAAiB,GAAGT,MAAM,CAACU,WAAP,CAAmB,GAAnB,CAAxB;AACA,MAAIC,WAAW,GAAGX,MAAM,CAACY,SAAP,CAAiB,CAAjB,EAAoBJ,cAApB,CAAlB;AACA,MAAIK,SAAS,GAAGb,MAAM,CAACY,SAAP,CAAiBJ,cAAjB,EAAiCC,iBAAjC,CAAhB,CAjB8C,CAmB9C;AACA;AACA;;AACA,MAAIK,uBAAuB,GAAGH,WAAW,CAACJ,OAAZ,CAAoB,GAApB,IAA2B,CAAC,CAA1D;AACA,MAAIQ,eAAe,GAAG,IAAtB;;AAEA,MAAID,uBAAJ,EAA6B;AAC3B;AACA;AACAC,IAAAA,eAAe,GAAGrB,qBAAqB,CACrCiB,WAAW,CAACK,OAAZ,CAAoB,OAApB,EAA6B,OAA7B,IAAwC,SADH,CAArB,CAEhB,CAFgB,CAAlB,CAH2B,CAO3B;;AACA,QAAIC,eAAe,GAAGrB,gBAAgB,CACpCmB,eADoC,EAEpC,UAASG,IAAT,EAAe;AACb,aAAOnB,IAAI,CAACoB,cAAL,CAAoBD,IAAI,CAACE,YAAzB,EAAuCF,IAAI,CAACG,IAA5C,MAAsDH,IAAI,CAACI,KAAlE;AACD,KAJmC,CAAtC;AAMAL,IAAAA,eAAe,CAACM,OAAhB,CAAwB,UAASL,IAAT,EAAe;AACrCnB,MAAAA,IAAI,CAACyB,cAAL,CAAoBN,IAAI,CAACE,YAAzB,EAAuCF,IAAI,CAACG,IAA5C,EAAkDH,IAAI,CAACI,KAAvD;AACD,KAFD;AAGD,GA1C6C,CA4C9C;;;AACA,MAAIG,kBAAkB,GAAG7B,gBAAgB,CACvCG,IADuC,EAEvC,UAASmB,IAAT,EAAe;AACb;AACA;AACA,WAAO,EACLH,eAAe,IACbA,eAAe,CAACW,cAAhB,CAA+BR,IAAI,CAACE,YAApC,EAAkDF,IAAI,CAACG,IAAvD,CAFG,CAAP;AAID,GATsC,CAAzC;AAWAI,EAAAA,kBAAkB,CAACF,OAAnB,CAA2B,UAASL,IAAT,EAAe;AACxCnB,IAAAA,IAAI,CAAC4B,iBAAL,CAAuBT,IAAI,CAACE,YAA5B,EAA0CF,IAAI,CAACG,IAA/C;AACD,GAFD,EAxD8C,CA4D9C;AACA;;AACAtB,EAAAA,IAAI,CAACc,SAAL,GAAiBA,SAAjB;AACD;;AAEDe,MAAM,CAACC,OAAP,GAAiB/B,wBAAjB","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule mutateHTMLNodeWithMarkup\n * @typechecks static-only\n */\n\n/*jslint evil: true */\n\n'use strict';\n\nvar createNodesFromMarkup = require(\"./createNodesFromMarkup\");\nvar filterAttributes = require(\"./filterAttributes\");\nvar invariant = require(\"./invariant\");\n\n/**\n * You can't set the innerHTML of a document. Unless you have\n * this function.\n *\n * @param {DOMElement} node with tagName == 'html'\n * @param {string} markup markup string including <html>.\n */\nfunction mutateHTMLNodeWithMarkup(node, markup) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    node.tagName.toLowerCase() === 'html',\n    'mutateHTMLNodeWithMarkup(): node must have tagName of \"html\", got %s',\n    node.tagName\n  ) : invariant(node.tagName.toLowerCase() === 'html'));\n\n  markup = markup.trim();\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    markup.toLowerCase().indexOf('<html') === 0,\n    'mutateHTMLNodeWithMarkup(): markup must start with <html'\n  ) : invariant(markup.toLowerCase().indexOf('<html') === 0));\n\n  // First let's extract the various pieces of markup.\n  var htmlOpenTagEnd = markup.indexOf('>') + 1;\n  var htmlCloseTagStart = markup.lastIndexOf('<');\n  var htmlOpenTag = markup.substring(0, htmlOpenTagEnd);\n  var innerHTML = markup.substring(htmlOpenTagEnd, htmlCloseTagStart);\n\n  // Now for the fun stuff. Pass through both sets of attributes and\n  // bring them up-to-date. We get the new set by creating a markup\n  // fragment.\n  var shouldExtractAttributes = htmlOpenTag.indexOf(' ') > -1;\n  var attributeHolder = null;\n\n  if (shouldExtractAttributes) {\n    // We extract the attributes by creating a <span> and evaluating\n    // the node.\n    attributeHolder = createNodesFromMarkup(\n      htmlOpenTag.replace('html ', 'span ') + '</span>'\n    )[0];\n\n    // Add all attributes present in attributeHolder\n    var attributesToSet = filterAttributes(\n      attributeHolder,\n      function(attr) {\n        return node.getAttributeNS(attr.namespaceURI, attr.name) !== attr.value;\n      }\n    );\n    attributesToSet.forEach(function(attr) {\n      node.setAttributeNS(attr.namespaceURI, attr.name, attr.value);\n    });\n  }\n\n  // Remove all attributes not present in attributeHolder\n  var attributesToRemove = filterAttributes(\n    node,\n    function(attr) {\n      // Remove all attributes if attributeHolder is null or if it does not have\n      // the desired attribute.\n      return !(\n        attributeHolder &&\n          attributeHolder.hasAttributeNS(attr.namespaceURI, attr.name)\n      );\n    }\n  );\n  attributesToRemove.forEach(function(attr) {\n    node.removeAttributeNS(attr.namespaceURI, attr.name);\n  });\n\n  // Finally, set the inner HTML. No tricks needed. Do this last to\n  // minimize likelihood of triggering reflows.\n  node.innerHTML = innerHTML;\n}\n\nmodule.exports = mutateHTMLNodeWithMarkup;\n"]},"metadata":{},"sourceType":"script"}