{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactComponent\n */\n\"use strict\";\n\nvar ReactComponentEnvironment = require(\"./ReactComponentEnvironment\");\n\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\n\nvar ReactOwner = require(\"./ReactOwner\");\n\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar invariant = require(\"./invariant\");\n\nvar keyMirror = require(\"./keyMirror\");\n\nvar merge = require(\"./merge\");\n/**\n * Every React component is in one of these life cycles.\n */\n\n\nvar ComponentLifeCycle = keyMirror({\n  /**\n   * Mounted components have a DOM node representation and are capable of\n   * receiving new props.\n   */\n  MOUNTED: null,\n\n  /**\n   * Unmounted components are inactive and cannot receive new props.\n   */\n  UNMOUNTED: null\n});\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children.\n * This allows us to keep track of children between updates.\n */\n\nvar ownerHasWarned = {};\n/**\n * Warn if the component doesn't have an explicit key assigned to it.\n * This component is in an array. The array could grow and shrink or be\n * reordered. All children, that hasn't already been validated, are required to\n * have a \"key\" property assigned to it.\n *\n * @internal\n * @param {ReactComponent} component Component that requires a key.\n */\n\nfunction validateExplicitKey(component) {\n  if (component.__keyValidated__ || component.props.key != null) {\n    return;\n  }\n\n  component.__keyValidated__ = true; // We can't provide friendly warnings for top level components.\n\n  if (!ReactCurrentOwner.current) {\n    return;\n  } // Name of the component whose render method tried to pass children.\n\n\n  var currentName = ReactCurrentOwner.current.constructor.displayName;\n\n  if (ownerHasWarned.hasOwnProperty(currentName)) {\n    return;\n  }\n\n  ownerHasWarned[currentName] = true;\n  var message = 'Each child in an array should have a unique \"key\" prop. ' + 'Check the render method of ' + currentName + '.';\n\n  if (!component.isOwnedBy(ReactCurrentOwner.current)) {\n    // Name of the component that originally created this child.\n    var childOwnerName = component.props.__owner__ && component.props.__owner__.constructor.displayName; // Usually the current owner is the offender, but if it accepts\n    // children as a property, it may be the creator of the child that's\n    // responsible for assigning it a key.\n\n    message += ' It was passed a child from ' + childOwnerName + '.';\n  }\n\n  console.warn(message);\n}\n/**\n * Ensure that every component either is passed in a static location or, if\n * if it's passed in an array, has an explicit key property defined.\n *\n * @internal\n * @param {*} component Statically passed child of any type.\n * @return {boolean}\n */\n\n\nfunction validateChildKeys(component) {\n  if (Array.isArray(component)) {\n    for (var i = 0; i < component.length; i++) {\n      var child = component[i];\n\n      if (ReactComponent.isValidComponent(child)) {\n        validateExplicitKey(child);\n      }\n    }\n  } else if (ReactComponent.isValidComponent(component)) {\n    // This component was passed in a valid location.\n    component.__keyValidated__ = true;\n  }\n}\n/**\n * Components are the basic units of composition in React.\n *\n * Every component accepts a set of keyed input parameters known as \"props\" that\n * are initialized by the constructor. Once a component is mounted, the props\n * can be mutated using `setProps` or `replaceProps`.\n *\n * Every component is capable of the following operations:\n *\n *   `mountComponent`\n *     Initializes the component, renders markup, and registers event listeners.\n *\n *   `receiveComponent`\n *     Updates the rendered DOM nodes to match the given component.\n *\n *   `unmountComponent`\n *     Releases any resources allocated by this component.\n *\n * Components can also be \"owned\" by other components. Being owned by another\n * component means being constructed by that component. This is different from\n * being the child of a component, which means having a DOM representation that\n * is a child of the DOM representation of that component.\n *\n * @class ReactComponent\n */\n\n\nvar ReactComponent = {\n  /**\n   * @param {?object} object\n   * @return {boolean} True if `object` is a valid component.\n   * @final\n   */\n  isValidComponent: function (object) {\n    return !!(object && typeof object.mountComponentIntoNode === 'function' && typeof object.receiveComponent === 'function');\n  },\n\n  /**\n   * Generate a key string that identifies a component within a set.\n   *\n   * @param {*} component A component that could contain a manual key.\n   * @param {number} index Index that is used if a manual key is not provided.\n   * @return {string}\n   * @internal\n   */\n  getKey: function (component, index) {\n    if (component && component.props && component.props.key != null) {\n      // Explicit key\n      return '{' + component.props.key + '}';\n    } // Implicit key determined by the index in the set\n\n\n    return '[' + index + ']';\n  },\n\n  /**\n   * @internal\n   */\n  LifeCycle: ComponentLifeCycle,\n\n  /**\n   * Injected module that provides ability to mutate individual properties.\n   * Injected into the base class because many different subclasses need access\n   * to this.\n   *\n   * @internal\n   */\n  DOMIDOperations: ReactComponentEnvironment.DOMIDOperations,\n\n  /**\n   * Optionally injectable environment dependent cleanup hook. (server vs.\n   * browser etc). Example: A browser system caches DOM nodes based on component\n   * ID and must remove that cache entry when this instance is unmounted.\n   *\n   * @private\n   */\n  unmountIDFromEnvironment: ReactComponentEnvironment.unmountIDFromEnvironment,\n\n  /**\n   * The \"image\" of a component tree, is the platform specific (typically\n   * serialized) data that represents a tree of lower level UI building blocks.\n   * On the web, this \"image\" is HTML markup which describes a construction of\n   * low level `div` and `span` nodes. Other platforms may have different\n   * encoding of this \"image\". This must be injected.\n   *\n   * @private\n   */\n  mountImageIntoNode: ReactComponentEnvironment.mountImageIntoNode,\n\n  /**\n   * React references `ReactReconcileTransaction` using this property in order\n   * to allow dependency injection.\n   *\n   * @internal\n   */\n  ReactReconcileTransaction: ReactComponentEnvironment.ReactReconcileTransaction,\n\n  /**\n   * Base functionality for every ReactComponent constructor. Mixed into the\n   * `ReactComponent` prototype, but exposed statically for easy access.\n   *\n   * @lends {ReactComponent.prototype}\n   */\n  Mixin: merge(ReactComponentEnvironment.Mixin, {\n    /**\n     * Checks whether or not this component is mounted.\n     *\n     * @return {boolean} True if mounted, false otherwise.\n     * @final\n     * @protected\n     */\n    isMounted: function () {\n      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;\n    },\n\n    /**\n     * Sets a subset of the props.\n     *\n     * @param {object} partialProps Subset of the next props.\n     * @param {?function} callback Called after props are updated.\n     * @final\n     * @public\n     */\n    setProps: function (partialProps, callback) {\n      // Merge with `_pendingProps` if it exists, otherwise with existing props.\n      this.replaceProps(merge(this._pendingProps || this.props, partialProps), callback);\n    },\n\n    /**\n     * Replaces all of the props.\n     *\n     * @param {object} props New props.\n     * @param {?function} callback Called after props are updated.\n     * @final\n     * @public\n     */\n    replaceProps: function (props, callback) {\n      \"production\" !== process.env.NODE_ENV ? invariant(!this.props.__owner__, 'replaceProps(...): You called `setProps` or `replaceProps` on a ' + 'component with an owner. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(!this.props.__owner__);\n      \"production\" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'replaceProps(...): Can only update a mounted component.') : invariant(this.isMounted());\n      this._pendingProps = props;\n      ReactUpdates.enqueueUpdate(this, callback);\n    },\n\n    /**\n     * Base constructor for all React component.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.construct.call(this, ...)`.\n     *\n     * @param {?object} initialProps\n     * @param {*} children\n     * @internal\n     */\n    construct: function (initialProps, children) {\n      this.props = initialProps || {}; // Record the component responsible for creating this component.\n\n      this.props.__owner__ = ReactCurrentOwner.current; // All components start unmounted.\n\n      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;\n      this._pendingProps = null;\n      this._pendingCallbacks = null; // Children can be more than one argument\n\n      var childrenLength = arguments.length - 1;\n\n      if (childrenLength === 1) {\n        if (\"production\" !== process.env.NODE_ENV) {\n          validateChildKeys(children);\n        }\n\n        this.props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n\n        for (var i = 0; i < childrenLength; i++) {\n          if (\"production\" !== process.env.NODE_ENV) {\n            validateChildKeys(arguments[i + 1]);\n          }\n\n          childArray[i] = arguments[i + 1];\n        }\n\n        this.props.children = childArray;\n      }\n    },\n\n    /**\n     * Initializes the component, renders markup, and registers event listeners.\n     *\n     * NOTE: This does not insert any nodes into the DOM.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.\n     *\n     * @param {string} rootID DOM ID of the root node.\n     * @param {ReactReconcileTransaction} transaction\n     * @param {number} mountDepth number of components in the owner hierarchy.\n     * @return {?string} Rendered markup to be inserted into the DOM.\n     * @internal\n     */\n    mountComponent: function (rootID, transaction, mountDepth) {\n      \"production\" !== process.env.NODE_ENV ? invariant(!this.isMounted(), 'mountComponent(%s, ...): Can only mount an unmounted component.', rootID) : invariant(!this.isMounted());\n      var props = this.props;\n\n      if (props.ref != null) {\n        ReactOwner.addComponentAsRefTo(this, props.ref, props.__owner__);\n      }\n\n      this._rootNodeID = rootID;\n      this._lifeCycleState = ComponentLifeCycle.MOUNTED;\n      this._mountDepth = mountDepth; // Effectively: return '';\n    },\n\n    /**\n     * Releases any resources allocated by `mountComponent`.\n     *\n     * NOTE: This does not remove any nodes from the DOM.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.unmountComponent.call(this)`.\n     *\n     * @internal\n     */\n    unmountComponent: function () {\n      \"production\" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'unmountComponent(): Can only unmount a mounted component.') : invariant(this.isMounted());\n      var props = this.props;\n\n      if (props.ref != null) {\n        ReactOwner.removeComponentAsRefFrom(this, props.ref, props.__owner__);\n      }\n\n      ReactComponent.unmountIDFromEnvironment(this._rootNodeID);\n      this._rootNodeID = null;\n      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;\n    },\n\n    /**\n     * Given a new instance of this component, updates the rendered DOM nodes\n     * as if that instance was rendered instead.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.\n     *\n     * @param {object} nextComponent Next set of properties.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    receiveComponent: function (nextComponent, transaction) {\n      \"production\" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'receiveComponent(...): Can only update a mounted component.') : invariant(this.isMounted());\n      this._pendingProps = nextComponent.props;\n\n      this._performUpdateIfNecessary(transaction);\n    },\n\n    /**\n     * Call `_performUpdateIfNecessary` within a new transaction.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    performUpdateIfNecessary: function () {\n      var transaction = ReactComponent.ReactReconcileTransaction.getPooled();\n      transaction.perform(this._performUpdateIfNecessary, this, transaction);\n      ReactComponent.ReactReconcileTransaction.release(transaction);\n    },\n\n    /**\n     * If `_pendingProps` is set, update the component.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    _performUpdateIfNecessary: function (transaction) {\n      if (this._pendingProps == null) {\n        return;\n      }\n\n      var prevProps = this.props;\n      this.props = this._pendingProps;\n      this._pendingProps = null;\n      this.updateComponent(transaction, prevProps);\n    },\n\n    /**\n     * Updates the component's currently mounted representation.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @param {object} prevProps\n     * @internal\n     */\n    updateComponent: function (transaction, prevProps) {\n      var props = this.props; // If either the owner or a `ref` has changed, make sure the newest owner\n      // has stored a reference to `this`, and the previous owner (if different)\n      // has forgotten the reference to `this`.\n\n      if (props.__owner__ !== prevProps.__owner__ || props.ref !== prevProps.ref) {\n        if (prevProps.ref != null) {\n          ReactOwner.removeComponentAsRefFrom(this, prevProps.ref, prevProps.__owner__);\n        } // Correct, even if the owner is the same, and only the ref has changed.\n\n\n        if (props.ref != null) {\n          ReactOwner.addComponentAsRefTo(this, props.ref, props.__owner__);\n        }\n      }\n    },\n\n    /**\n     * Mounts this component and inserts it into the DOM.\n     *\n     * @param {string} rootID DOM ID of the root node.\n     * @param {DOMElement} container DOM element to mount into.\n     * @param {boolean} shouldReuseMarkup If true, do not insert markup\n     * @final\n     * @internal\n     * @see {ReactMount.renderComponent}\n     */\n    mountComponentIntoNode: function (rootID, container, shouldReuseMarkup) {\n      var transaction = ReactComponent.ReactReconcileTransaction.getPooled();\n      transaction.perform(this._mountComponentIntoNode, this, rootID, container, transaction, shouldReuseMarkup);\n      ReactComponent.ReactReconcileTransaction.release(transaction);\n    },\n\n    /**\n     * @param {string} rootID DOM ID of the root node.\n     * @param {DOMElement} container DOM element to mount into.\n     * @param {ReactReconcileTransaction} transaction\n     * @param {boolean} shouldReuseMarkup If true, do not insert markup\n     * @final\n     * @private\n     */\n    _mountComponentIntoNode: function (rootID, container, transaction, shouldReuseMarkup) {\n      var markup = this.mountComponent(rootID, transaction, 0);\n      ReactComponent.mountImageIntoNode(markup, container, shouldReuseMarkup);\n    },\n\n    /**\n     * Checks if this component is owned by the supplied `owner` component.\n     *\n     * @param {ReactComponent} owner Component to check.\n     * @return {boolean} True if `owners` owns this component.\n     * @final\n     * @internal\n     */\n    isOwnedBy: function (owner) {\n      return this.props.__owner__ === owner;\n    },\n\n    /**\n     * Gets another component, that shares the same owner as this one, by ref.\n     *\n     * @param {string} ref of a sibling Component.\n     * @return {?ReactComponent} the actual sibling Component.\n     * @final\n     * @internal\n     */\n    getSiblingByRef: function (ref) {\n      var owner = this.props.__owner__;\n\n      if (!owner || !owner.refs) {\n        return null;\n      }\n\n      return owner.refs[ref];\n    }\n  })\n};\nmodule.exports = ReactComponent;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ReactComponent.js"],"names":["ReactComponentEnvironment","require","ReactCurrentOwner","ReactOwner","ReactUpdates","invariant","keyMirror","merge","ComponentLifeCycle","MOUNTED","UNMOUNTED","ownerHasWarned","validateExplicitKey","component","__keyValidated__","props","key","current","currentName","constructor","displayName","hasOwnProperty","message","isOwnedBy","childOwnerName","__owner__","console","warn","validateChildKeys","Array","isArray","i","length","child","ReactComponent","isValidComponent","object","mountComponentIntoNode","receiveComponent","getKey","index","LifeCycle","DOMIDOperations","unmountIDFromEnvironment","mountImageIntoNode","ReactReconcileTransaction","Mixin","isMounted","_lifeCycleState","setProps","partialProps","callback","replaceProps","_pendingProps","process","env","NODE_ENV","enqueueUpdate","construct","initialProps","children","_pendingCallbacks","childrenLength","arguments","childArray","mountComponent","rootID","transaction","mountDepth","ref","addComponentAsRefTo","_rootNodeID","_mountDepth","unmountComponent","removeComponentAsRefFrom","nextComponent","_performUpdateIfNecessary","performUpdateIfNecessary","getPooled","perform","release","prevProps","updateComponent","container","shouldReuseMarkup","_mountComponentIntoNode","markup","owner","getSiblingByRef","refs","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactComponent\n */\n\n\"use strict\";\n\nvar ReactComponentEnvironment = require(\"./ReactComponentEnvironment\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactOwner = require(\"./ReactOwner\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar invariant = require(\"./invariant\");\nvar keyMirror = require(\"./keyMirror\");\nvar merge = require(\"./merge\");\n\n/**\n * Every React component is in one of these life cycles.\n */\nvar ComponentLifeCycle = keyMirror({\n  /**\n   * Mounted components have a DOM node representation and are capable of\n   * receiving new props.\n   */\n  MOUNTED: null,\n  /**\n   * Unmounted components are inactive and cannot receive new props.\n   */\n  UNMOUNTED: null\n});\n\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children.\n * This allows us to keep track of children between updates.\n */\n\nvar ownerHasWarned = {};\n\n/**\n * Warn if the component doesn't have an explicit key assigned to it.\n * This component is in an array. The array could grow and shrink or be\n * reordered. All children, that hasn't already been validated, are required to\n * have a \"key\" property assigned to it.\n *\n * @internal\n * @param {ReactComponent} component Component that requires a key.\n */\nfunction validateExplicitKey(component) {\n  if (component.__keyValidated__ || component.props.key != null) {\n    return;\n  }\n  component.__keyValidated__ = true;\n\n  // We can't provide friendly warnings for top level components.\n  if (!ReactCurrentOwner.current) {\n    return;\n  }\n\n  // Name of the component whose render method tried to pass children.\n  var currentName = ReactCurrentOwner.current.constructor.displayName;\n  if (ownerHasWarned.hasOwnProperty(currentName)) {\n    return;\n  }\n  ownerHasWarned[currentName] = true;\n\n  var message = 'Each child in an array should have a unique \"key\" prop. ' +\n                'Check the render method of ' + currentName + '.';\n  if (!component.isOwnedBy(ReactCurrentOwner.current)) {\n    // Name of the component that originally created this child.\n    var childOwnerName =\n      component.props.__owner__ &&\n      component.props.__owner__.constructor.displayName;\n\n    // Usually the current owner is the offender, but if it accepts\n    // children as a property, it may be the creator of the child that's\n    // responsible for assigning it a key.\n    message += ' It was passed a child from ' + childOwnerName + '.';\n  }\n\n  console.warn(message);\n}\n\n/**\n * Ensure that every component either is passed in a static location or, if\n * if it's passed in an array, has an explicit key property defined.\n *\n * @internal\n * @param {*} component Statically passed child of any type.\n * @return {boolean}\n */\nfunction validateChildKeys(component) {\n  if (Array.isArray(component)) {\n    for (var i = 0; i < component.length; i++) {\n      var child = component[i];\n      if (ReactComponent.isValidComponent(child)) {\n        validateExplicitKey(child);\n      }\n    }\n  } else if (ReactComponent.isValidComponent(component)) {\n    // This component was passed in a valid location.\n    component.__keyValidated__ = true;\n  }\n}\n\n/**\n * Components are the basic units of composition in React.\n *\n * Every component accepts a set of keyed input parameters known as \"props\" that\n * are initialized by the constructor. Once a component is mounted, the props\n * can be mutated using `setProps` or `replaceProps`.\n *\n * Every component is capable of the following operations:\n *\n *   `mountComponent`\n *     Initializes the component, renders markup, and registers event listeners.\n *\n *   `receiveComponent`\n *     Updates the rendered DOM nodes to match the given component.\n *\n *   `unmountComponent`\n *     Releases any resources allocated by this component.\n *\n * Components can also be \"owned\" by other components. Being owned by another\n * component means being constructed by that component. This is different from\n * being the child of a component, which means having a DOM representation that\n * is a child of the DOM representation of that component.\n *\n * @class ReactComponent\n */\nvar ReactComponent = {\n\n  /**\n   * @param {?object} object\n   * @return {boolean} True if `object` is a valid component.\n   * @final\n   */\n  isValidComponent: function(object) {\n    return !!(\n      object &&\n      typeof object.mountComponentIntoNode === 'function' &&\n      typeof object.receiveComponent === 'function'\n    );\n  },\n\n  /**\n   * Generate a key string that identifies a component within a set.\n   *\n   * @param {*} component A component that could contain a manual key.\n   * @param {number} index Index that is used if a manual key is not provided.\n   * @return {string}\n   * @internal\n   */\n  getKey: function(component, index) {\n    if (component && component.props && component.props.key != null) {\n      // Explicit key\n      return '{' + component.props.key + '}';\n    }\n    // Implicit key determined by the index in the set\n    return '[' + index + ']';\n  },\n\n  /**\n   * @internal\n   */\n  LifeCycle: ComponentLifeCycle,\n\n  /**\n   * Injected module that provides ability to mutate individual properties.\n   * Injected into the base class because many different subclasses need access\n   * to this.\n   *\n   * @internal\n   */\n  DOMIDOperations: ReactComponentEnvironment.DOMIDOperations,\n\n  /**\n   * Optionally injectable environment dependent cleanup hook. (server vs.\n   * browser etc). Example: A browser system caches DOM nodes based on component\n   * ID and must remove that cache entry when this instance is unmounted.\n   *\n   * @private\n   */\n  unmountIDFromEnvironment: ReactComponentEnvironment.unmountIDFromEnvironment,\n\n  /**\n   * The \"image\" of a component tree, is the platform specific (typically\n   * serialized) data that represents a tree of lower level UI building blocks.\n   * On the web, this \"image\" is HTML markup which describes a construction of\n   * low level `div` and `span` nodes. Other platforms may have different\n   * encoding of this \"image\". This must be injected.\n   *\n   * @private\n   */\n  mountImageIntoNode: ReactComponentEnvironment.mountImageIntoNode,\n\n  /**\n   * React references `ReactReconcileTransaction` using this property in order\n   * to allow dependency injection.\n   *\n   * @internal\n   */\n  ReactReconcileTransaction:\n    ReactComponentEnvironment.ReactReconcileTransaction,\n\n  /**\n   * Base functionality for every ReactComponent constructor. Mixed into the\n   * `ReactComponent` prototype, but exposed statically for easy access.\n   *\n   * @lends {ReactComponent.prototype}\n   */\n  Mixin: merge(ReactComponentEnvironment.Mixin, {\n\n    /**\n     * Checks whether or not this component is mounted.\n     *\n     * @return {boolean} True if mounted, false otherwise.\n     * @final\n     * @protected\n     */\n    isMounted: function() {\n      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;\n    },\n\n    /**\n     * Sets a subset of the props.\n     *\n     * @param {object} partialProps Subset of the next props.\n     * @param {?function} callback Called after props are updated.\n     * @final\n     * @public\n     */\n    setProps: function(partialProps, callback) {\n      // Merge with `_pendingProps` if it exists, otherwise with existing props.\n      this.replaceProps(\n        merge(this._pendingProps || this.props, partialProps),\n        callback\n      );\n    },\n\n    /**\n     * Replaces all of the props.\n     *\n     * @param {object} props New props.\n     * @param {?function} callback Called after props are updated.\n     * @final\n     * @public\n     */\n    replaceProps: function(props, callback) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !this.props.__owner__,\n        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +\n        'component with an owner. This is an anti-pattern since props will ' +\n        'get reactively updated when rendered. Instead, change the owner\\'s ' +\n        '`render` method to pass the correct value as props to the component ' +\n        'where it is created.'\n      ) : invariant(!this.props.__owner__));\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        this.isMounted(),\n        'replaceProps(...): Can only update a mounted component.'\n      ) : invariant(this.isMounted()));\n      this._pendingProps = props;\n      ReactUpdates.enqueueUpdate(this, callback);\n    },\n\n    /**\n     * Base constructor for all React component.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.construct.call(this, ...)`.\n     *\n     * @param {?object} initialProps\n     * @param {*} children\n     * @internal\n     */\n    construct: function(initialProps, children) {\n      this.props = initialProps || {};\n      // Record the component responsible for creating this component.\n      this.props.__owner__ = ReactCurrentOwner.current;\n      // All components start unmounted.\n      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;\n\n      this._pendingProps = null;\n      this._pendingCallbacks = null;\n\n      // Children can be more than one argument\n      var childrenLength = arguments.length - 1;\n      if (childrenLength === 1) {\n        if (\"production\" !== process.env.NODE_ENV) {\n          validateChildKeys(children);\n        }\n        this.props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          if (\"production\" !== process.env.NODE_ENV) {\n            validateChildKeys(arguments[i + 1]);\n          }\n          childArray[i] = arguments[i + 1];\n        }\n        this.props.children = childArray;\n      }\n    },\n\n    /**\n     * Initializes the component, renders markup, and registers event listeners.\n     *\n     * NOTE: This does not insert any nodes into the DOM.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.\n     *\n     * @param {string} rootID DOM ID of the root node.\n     * @param {ReactReconcileTransaction} transaction\n     * @param {number} mountDepth number of components in the owner hierarchy.\n     * @return {?string} Rendered markup to be inserted into the DOM.\n     * @internal\n     */\n    mountComponent: function(rootID, transaction, mountDepth) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !this.isMounted(),\n        'mountComponent(%s, ...): Can only mount an unmounted component.',\n        rootID\n      ) : invariant(!this.isMounted()));\n      var props = this.props;\n      if (props.ref != null) {\n        ReactOwner.addComponentAsRefTo(this, props.ref, props.__owner__);\n      }\n      this._rootNodeID = rootID;\n      this._lifeCycleState = ComponentLifeCycle.MOUNTED;\n      this._mountDepth = mountDepth;\n      // Effectively: return '';\n    },\n\n    /**\n     * Releases any resources allocated by `mountComponent`.\n     *\n     * NOTE: This does not remove any nodes from the DOM.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.unmountComponent.call(this)`.\n     *\n     * @internal\n     */\n    unmountComponent: function() {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        this.isMounted(),\n        'unmountComponent(): Can only unmount a mounted component.'\n      ) : invariant(this.isMounted()));\n      var props = this.props;\n      if (props.ref != null) {\n        ReactOwner.removeComponentAsRefFrom(this, props.ref, props.__owner__);\n      }\n      ReactComponent.unmountIDFromEnvironment(this._rootNodeID);\n      this._rootNodeID = null;\n      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;\n    },\n\n    /**\n     * Given a new instance of this component, updates the rendered DOM nodes\n     * as if that instance was rendered instead.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.\n     *\n     * @param {object} nextComponent Next set of properties.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    receiveComponent: function(nextComponent, transaction) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        this.isMounted(),\n        'receiveComponent(...): Can only update a mounted component.'\n      ) : invariant(this.isMounted()));\n      this._pendingProps = nextComponent.props;\n      this._performUpdateIfNecessary(transaction);\n    },\n\n    /**\n     * Call `_performUpdateIfNecessary` within a new transaction.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    performUpdateIfNecessary: function() {\n      var transaction = ReactComponent.ReactReconcileTransaction.getPooled();\n      transaction.perform(this._performUpdateIfNecessary, this, transaction);\n      ReactComponent.ReactReconcileTransaction.release(transaction);\n    },\n\n    /**\n     * If `_pendingProps` is set, update the component.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    _performUpdateIfNecessary: function(transaction) {\n      if (this._pendingProps == null) {\n        return;\n      }\n      var prevProps = this.props;\n      this.props = this._pendingProps;\n      this._pendingProps = null;\n      this.updateComponent(transaction, prevProps);\n    },\n\n    /**\n     * Updates the component's currently mounted representation.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @param {object} prevProps\n     * @internal\n     */\n    updateComponent: function(transaction, prevProps) {\n      var props = this.props;\n      // If either the owner or a `ref` has changed, make sure the newest owner\n      // has stored a reference to `this`, and the previous owner (if different)\n      // has forgotten the reference to `this`.\n      if (props.__owner__ !== prevProps.__owner__ ||\n          props.ref !== prevProps.ref) {\n        if (prevProps.ref != null) {\n          ReactOwner.removeComponentAsRefFrom(\n            this, prevProps.ref, prevProps.__owner__\n          );\n        }\n        // Correct, even if the owner is the same, and only the ref has changed.\n        if (props.ref != null) {\n          ReactOwner.addComponentAsRefTo(this, props.ref, props.__owner__);\n        }\n      }\n    },\n\n    /**\n     * Mounts this component and inserts it into the DOM.\n     *\n     * @param {string} rootID DOM ID of the root node.\n     * @param {DOMElement} container DOM element to mount into.\n     * @param {boolean} shouldReuseMarkup If true, do not insert markup\n     * @final\n     * @internal\n     * @see {ReactMount.renderComponent}\n     */\n    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {\n      var transaction = ReactComponent.ReactReconcileTransaction.getPooled();\n      transaction.perform(\n        this._mountComponentIntoNode,\n        this,\n        rootID,\n        container,\n        transaction,\n        shouldReuseMarkup\n      );\n      ReactComponent.ReactReconcileTransaction.release(transaction);\n    },\n\n    /**\n     * @param {string} rootID DOM ID of the root node.\n     * @param {DOMElement} container DOM element to mount into.\n     * @param {ReactReconcileTransaction} transaction\n     * @param {boolean} shouldReuseMarkup If true, do not insert markup\n     * @final\n     * @private\n     */\n    _mountComponentIntoNode: function(\n        rootID,\n        container,\n        transaction,\n        shouldReuseMarkup) {\n      var markup = this.mountComponent(rootID, transaction, 0);\n      ReactComponent.mountImageIntoNode(markup, container, shouldReuseMarkup);\n    },\n\n    /**\n     * Checks if this component is owned by the supplied `owner` component.\n     *\n     * @param {ReactComponent} owner Component to check.\n     * @return {boolean} True if `owners` owns this component.\n     * @final\n     * @internal\n     */\n    isOwnedBy: function(owner) {\n      return this.props.__owner__ === owner;\n    },\n\n    /**\n     * Gets another component, that shares the same owner as this one, by ref.\n     *\n     * @param {string} ref of a sibling Component.\n     * @return {?ReactComponent} the actual sibling Component.\n     * @final\n     * @internal\n     */\n    getSiblingByRef: function(ref) {\n      var owner = this.props.__owner__;\n      if (!owner || !owner.refs) {\n        return null;\n      }\n      return owner.refs[ref];\n    }\n  })\n};\n\nmodule.exports = ReactComponent;\n"]},"metadata":{},"sourceType":"script"}