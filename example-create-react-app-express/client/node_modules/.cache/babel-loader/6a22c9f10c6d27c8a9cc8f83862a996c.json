{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMSelect\n */\n\"use strict\";\n\nvar LinkedValueMixin = require(\"./LinkedValueMixin\");\n\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\n\nvar ReactDOM = require(\"./ReactDOM\");\n\nvar invariant = require(\"./invariant\");\n\nvar merge = require(\"./merge\"); // Store a reference to the <select> `ReactDOMComponent`.\n\n\nvar select = ReactDOM.select;\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\n\nfunction selectValueType(props, propName, componentName) {\n  if (props[propName] == null) {\n    return;\n  }\n\n  if (props.multiple) {\n    \"production\" !== process.env.NODE_ENV ? invariant(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if `multiple` is ' + 'true.', propName) : invariant(Array.isArray(props[propName]));\n  } else {\n    \"production\" !== process.env.NODE_ENV ? invariant(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar value if ' + '`multiple` is false.', propName) : invariant(!Array.isArray(props[propName]));\n  }\n}\n/**\n * If `value` is supplied, updates <option> elements on mount and update.\n * @private\n */\n\n\nfunction updateOptions() {\n  /*jshint validthis:true */\n  var propValue = this.getValue();\n  var value = propValue != null ? propValue : this.state.value;\n  var options = this.getDOMNode().options;\n  var selectedValue = '' + value;\n\n  for (var i = 0, l = options.length; i < l; i++) {\n    var selected = this.props.multiple ? selectedValue.indexOf(options[i].value) >= 0 : selected = options[i].value === selectedValue;\n\n    if (selected !== options[i].selected) {\n      options[i].selected = selected;\n    }\n  }\n}\n/**\n * Implements a <select> native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * string. If `multiple` is true, the prop must be an array of strings.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\n\n\nvar ReactDOMSelect = ReactCompositeComponent.createClass({\n  mixins: [LinkedValueMixin],\n  propTypes: {\n    defaultValue: selectValueType,\n    value: selectValueType\n  },\n  getInitialState: function () {\n    return {\n      value: this.props.defaultValue || (this.props.multiple ? [] : '')\n    };\n  },\n  componentWillReceiveProps: function (nextProps) {\n    if (!this.props.multiple && nextProps.multiple) {\n      this.setState({\n        value: [this.state.value]\n      });\n    } else if (this.props.multiple && !nextProps.multiple) {\n      this.setState({\n        value: this.state.value[0]\n      });\n    }\n  },\n  shouldComponentUpdate: function () {\n    // Defer any updates to this component during the `onChange` handler.\n    return !this._isChanging;\n  },\n  render: function () {\n    // Clone `this.props` so we don't mutate the input.\n    var props = merge(this.props);\n    props.onChange = this._handleChange;\n    props.value = null;\n    return select(props, this.props.children);\n  },\n  componentDidMount: updateOptions,\n  componentDidUpdate: updateOptions,\n  _handleChange: function (event) {\n    var returnValue;\n    var onChange = this.getOnChange();\n\n    if (onChange) {\n      this._isChanging = true;\n      returnValue = onChange(event);\n      this._isChanging = false;\n    }\n\n    var selectedValue;\n\n    if (this.props.multiple) {\n      selectedValue = [];\n      var options = event.target.options;\n\n      for (var i = 0, l = options.length; i < l; i++) {\n        if (options[i].selected) {\n          selectedValue.push(options[i].value);\n        }\n      }\n    } else {\n      selectedValue = event.target.value;\n    }\n\n    this.setState({\n      value: selectedValue\n    });\n    return returnValue;\n  }\n});\nmodule.exports = ReactDOMSelect;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ReactDOMSelect.js"],"names":["LinkedValueMixin","require","ReactCompositeComponent","ReactDOM","invariant","merge","select","selectValueType","props","propName","componentName","multiple","process","env","NODE_ENV","Array","isArray","updateOptions","propValue","getValue","value","state","options","getDOMNode","selectedValue","i","l","length","selected","indexOf","ReactDOMSelect","createClass","mixins","propTypes","defaultValue","getInitialState","componentWillReceiveProps","nextProps","setState","shouldComponentUpdate","_isChanging","render","onChange","_handleChange","children","componentDidMount","componentDidUpdate","event","returnValue","getOnChange","target","push","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMSelect\n */\n\n\"use strict\";\n\nvar LinkedValueMixin = require(\"./LinkedValueMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactDOM = require(\"./ReactDOM\");\n\nvar invariant = require(\"./invariant\");\nvar merge = require(\"./merge\");\n\n// Store a reference to the <select> `ReactDOMComponent`.\nvar select = ReactDOM.select;\n\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\nfunction selectValueType(props, propName, componentName) {\n  if (props[propName] == null) {\n    return;\n  }\n  if (props.multiple) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Array.isArray(props[propName]),\n      'The `%s` prop supplied to <select> must be an array if `multiple` is ' +\n      'true.',\n      propName\n    ) : invariant(Array.isArray(props[propName])));\n  } else {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !Array.isArray(props[propName]),\n      'The `%s` prop supplied to <select> must be a scalar value if ' +\n      '`multiple` is false.',\n      propName\n    ) : invariant(!Array.isArray(props[propName])));\n  }\n}\n\n/**\n * If `value` is supplied, updates <option> elements on mount and update.\n * @private\n */\nfunction updateOptions() {\n  /*jshint validthis:true */\n  var propValue = this.getValue();\n  var value = propValue != null ? propValue : this.state.value;\n  var options = this.getDOMNode().options;\n  var selectedValue = '' + value;\n\n  for (var i = 0, l = options.length; i < l; i++) {\n    var selected = this.props.multiple ?\n      selectedValue.indexOf(options[i].value) >= 0 :\n      selected = options[i].value === selectedValue;\n\n    if (selected !== options[i].selected) {\n      options[i].selected = selected;\n    }\n  }\n}\n\n/**\n * Implements a <select> native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * string. If `multiple` is true, the prop must be an array of strings.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\nvar ReactDOMSelect = ReactCompositeComponent.createClass({\n  mixins: [LinkedValueMixin],\n\n  propTypes: {\n    defaultValue: selectValueType,\n    value: selectValueType\n  },\n\n  getInitialState: function() {\n    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    if (!this.props.multiple && nextProps.multiple) {\n      this.setState({value: [this.state.value]});\n    } else if (this.props.multiple && !nextProps.multiple) {\n      this.setState({value: this.state.value[0]});\n    }\n  },\n\n  shouldComponentUpdate: function() {\n    // Defer any updates to this component during the `onChange` handler.\n    return !this._isChanging;\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = merge(this.props);\n\n    props.onChange = this._handleChange;\n    props.value = null;\n\n    return select(props, this.props.children);\n  },\n\n  componentDidMount: updateOptions,\n\n  componentDidUpdate: updateOptions,\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = this.getOnChange();\n    if (onChange) {\n      this._isChanging = true;\n      returnValue = onChange(event);\n      this._isChanging = false;\n    }\n\n    var selectedValue;\n    if (this.props.multiple) {\n      selectedValue = [];\n      var options = event.target.options;\n      for (var i = 0, l = options.length; i < l; i++) {\n        if (options[i].selected) {\n          selectedValue.push(options[i].value);\n        }\n      }\n    } else {\n      selectedValue = event.target.value;\n    }\n\n    this.setState({value: selectedValue});\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMSelect;\n"]},"metadata":{},"sourceType":"script"}