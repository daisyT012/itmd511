{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n\"use strict\";\n\nvar performanceNow = require(\"./performanceNow\");\n\nvar ReactDefaultPerf = {};\n\nif (\"production\" !== process.env.NODE_ENV) {\n  ReactDefaultPerf = {\n    /**\n     * Gets the stored information for a given object's function.\n     *\n     * @param {string} objName\n     * @param {string} fnName\n     * @return {?object}\n     */\n    getInfo: function (objName, fnName) {\n      if (!this.info[objName] || !this.info[objName][fnName]) {\n        return null;\n      }\n\n      return this.info[objName][fnName];\n    },\n\n    /**\n     * Gets the logs pertaining to a given object's function.\n     *\n     * @param {string} objName\n     * @param {string} fnName\n     * @return {?array<object>}\n     */\n    getLogs: function (objName, fnName) {\n      if (!this.getInfo(objName, fnName)) {\n        return null;\n      }\n\n      return this.logs.filter(function (log) {\n        return log.objName === objName && log.fnName === fnName;\n      });\n    },\n\n    /**\n     * Runs through the logs and builds an array of arrays, where each array\n     * walks through the mounting/updating of each component underneath.\n     *\n     * @param {string} rootID The reactID of the root node, e.g. '.r[2cpyq]'\n     * @return {array<array>}\n     */\n    getRawRenderHistory: function (rootID) {\n      var history = [];\n      /**\n       * Since logs are added after the method returns, the logs are in a sense\n       * upside-down: the inner-most elements from mounting/updating are logged\n       * first, and the last addition to the log is the top renderComponent.\n       * Therefore, we flip the logs upside down for ease of processing, and\n       * reverse the history array at the end so the earliest event has index 0.\n       */\n\n      var logs = this.logs.filter(function (log) {\n        return log.reactID.indexOf(rootID) === 0;\n      }).reverse();\n      var subHistory = [];\n      logs.forEach(function (log, i) {\n        if (i && log.reactID === rootID && logs[i - 1].reactID !== rootID) {\n          subHistory.length && history.push(subHistory);\n          subHistory = [];\n        }\n\n        subHistory.push(log);\n      });\n\n      if (subHistory.length) {\n        history.push(subHistory);\n      }\n\n      return history.reverse();\n    },\n\n    /**\n     * Runs through the logs and builds an array of strings, where each string\n     * is a multiline formatted way of walking through the mounting/updating\n     * underneath.\n     *\n     * @param {string} rootID The reactID of the root node, e.g. '.r[2cpyq]'\n     * @return {array<string>}\n     */\n    getRenderHistory: function (rootID) {\n      var history = this.getRawRenderHistory(rootID);\n      return history.map(function (subHistory) {\n        var headerString = 'log# Component (execution time) [bloat from logging]\\n' + '================================================================\\n';\n        return headerString + subHistory.map(function (log) {\n          // Add two spaces for every layer in the reactID.\n          var indents = '\\t' + Array(log.reactID.split('.[').length).join('  ');\n\n          var delta = _microTime(log.timing.delta);\n\n          var bloat = _microTime(log.timing.timeToLog);\n\n          return log.index + indents + log.name + ' (' + delta + 'ms)' + ' [' + bloat + 'ms]';\n        }).join('\\n');\n      });\n    },\n\n    /**\n     * Print the render history from `getRenderHistory` using console.log.\n     * This is currently the best way to display perf data from\n     * any React component; working on that.\n     *\n     * @param {string} rootID The reactID of the root node, e.g. '.r[2cpyq]'\n     * @param {number} index\n     */\n    printRenderHistory: function (rootID, index) {\n      var history = this.getRenderHistory(rootID);\n\n      if (!history[index]) {\n        console.warn('Index', index, 'isn\\'t available! ' + 'The render history is', history.length, 'long.');\n        return;\n      }\n\n      console.log('Loading render history #' + (index + 1) + ' of ' + history.length + ':\\n' + history[index]);\n    },\n\n    /**\n     * Prints the heatmap legend to console, showing how the colors correspond\n     * with render times. This relies on console.log styles.\n     */\n    printHeatmapLegend: function () {\n      if (!this.options.heatmap.enabled) {\n        return;\n      }\n\n      var max = this.info.React && this.info.React.renderComponent && this.info.React.renderComponent.max;\n\n      if (max) {\n        var logStr = 'Heatmap: ';\n\n        for (var ii = 0; ii <= 10 * max; ii += max) {\n          logStr += '%c ' + Math.round(ii) / 10 + 'ms ';\n        }\n\n        console.log(logStr, 'background-color: hsla(100, 100%, 50%, 0.6);', 'background-color: hsla( 90, 100%, 50%, 0.6);', 'background-color: hsla( 80, 100%, 50%, 0.6);', 'background-color: hsla( 70, 100%, 50%, 0.6);', 'background-color: hsla( 60, 100%, 50%, 0.6);', 'background-color: hsla( 50, 100%, 50%, 0.6);', 'background-color: hsla( 40, 100%, 50%, 0.6);', 'background-color: hsla( 30, 100%, 50%, 0.6);', 'background-color: hsla( 20, 100%, 50%, 0.6);', 'background-color: hsla( 10, 100%, 50%, 0.6);', 'background-color: hsla(  0, 100%, 50%, 0.6);');\n      }\n    },\n\n    /**\n     * Measure a given function with logging information, and calls a callback\n     * if there is one.\n     *\n     * @param {string} objName\n     * @param {string} fnName\n     * @param {function} func\n     * @return {function}\n     */\n    measure: function (objName, fnName, func) {\n      var info = _getNewInfo(objName, fnName);\n\n      var fnArgs = _getFnArguments(func);\n\n      return function () {\n        var timeBeforeFn = performanceNow();\n        var fnReturn = func.apply(this, arguments);\n        var timeAfterFn = performanceNow();\n        /**\n         * Hold onto arguments in a readable way: args[1] -> args.component.\n         * args is also passed to the callback, so if you want to save an\n         * argument in the log, do so in the callback.\n         */\n\n        var args = {};\n\n        for (var i = 0; i < arguments.length; i++) {\n          args[fnArgs[i]] = arguments[i];\n        }\n\n        var log = {\n          index: ReactDefaultPerf.logs.length,\n          fnName: fnName,\n          objName: objName,\n          timing: {\n            before: timeBeforeFn,\n            after: timeAfterFn,\n            delta: timeAfterFn - timeBeforeFn\n          }\n        };\n        ReactDefaultPerf.logs.push(log);\n        /**\n         * The callback gets:\n         * - this (the component)\n         * - the original method's arguments\n         * - what the method returned\n         * - the log object, and\n         * - the wrapped method's info object.\n         */\n\n        var callback = _getCallback(objName, fnName);\n\n        callback && callback(this, args, fnReturn, log, info);\n        log.timing.timeToLog = performanceNow() - timeAfterFn;\n        return fnReturn;\n      };\n    },\n\n    /**\n     * Holds information on wrapped objects/methods.\n     * For instance, ReactDefaultPerf.info.React.renderComponent\n     */\n    info: {},\n\n    /**\n     * Holds all of the logs. Filter this to pull desired information.\n     */\n    logs: [],\n\n    /**\n     * Toggle settings for ReactDefaultPerf\n     */\n    options: {\n      /**\n       * The heatmap sets the background color of the React containers\n       * according to how much total time has been spent rendering them.\n       * The most temporally expensive component is set as pure red,\n       * and the others are colored from green to red as a fraction\n       * of that max component time.\n       */\n      heatmap: {\n        enabled: true\n      }\n    }\n  };\n  /**\n   * Gets a info area for a given object's function, adding a new one if\n   * necessary.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @return {object}\n   */\n\n  var _getNewInfo = function (objName, fnName) {\n    var info = ReactDefaultPerf.getInfo(objName, fnName);\n\n    if (info) {\n      return info;\n    }\n\n    ReactDefaultPerf.info[objName] = ReactDefaultPerf.info[objName] || {};\n    return ReactDefaultPerf.info[objName][fnName] = {\n      getLogs: function () {\n        return ReactDefaultPerf.getLogs(objName, fnName);\n      }\n    };\n  };\n  /**\n   * Gets a list of the argument names from a function's definition.\n   * This is useful for storing arguments by their names within wrapFn().\n   *\n   * @param {function} fn\n   * @return {array<string>}\n   */\n\n\n  var _getFnArguments = function (fn) {\n    var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n    var fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n    fnStr = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')'));\n    return fnStr.match(/([^\\s,]+)/g);\n  };\n  /**\n   * Store common callbacks within ReactDefaultPerf.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @return {?function}\n   */\n\n\n  var _getCallback = function (objName, fnName) {\n    switch (objName + '.' + fnName) {\n      case 'React.renderComponent':\n        return _renderComponentCallback;\n\n      case 'ReactDOMComponent.mountComponent':\n      case 'ReactDOMComponent.updateComponent':\n        return _nativeComponentCallback;\n\n      case 'ReactCompositeComponent.mountComponent':\n      case 'ReactCompositeComponent.updateComponent':\n        return _compositeComponentCallback;\n\n      default:\n        return null;\n    }\n  };\n  /**\n   * Callback function for React.renderComponent\n   *\n   * @param {object} component\n   * @param {object} args\n   * @param {?object} fnReturn\n   * @param {object} log\n   * @param {object} info\n   */\n\n\n  var _renderComponentCallback = function (component, args, fnReturn, log, info) {\n    log.name = args.nextComponent.constructor.displayName || '[unknown]';\n    log.reactID = fnReturn._rootNodeID || null;\n\n    if (ReactDefaultPerf.options.heatmap.enabled) {\n      var container = args.container;\n\n      if (!container.loggedByReactDefaultPerf) {\n        container.loggedByReactDefaultPerf = true;\n        info.components = info.components || [];\n        info.components.push(container);\n      }\n\n      container.count = container.count || 0;\n      container.count += log.timing.delta;\n      info.max = info.max || 0;\n\n      if (container.count > info.max) {\n        info.max = container.count;\n        info.components.forEach(function (component) {\n          _setHue(component, 100 - 100 * component.count / info.max);\n        });\n      } else {\n        _setHue(container, 100 - 100 * container.count / info.max);\n      }\n    }\n  };\n  /**\n   * Callback function for ReactDOMComponent\n   *\n   * @param {object} component\n   * @param {object} args\n   * @param {?object} fnReturn\n   * @param {object} log\n   * @param {object} info\n   */\n\n\n  var _nativeComponentCallback = function (component, args, fnReturn, log, info) {\n    log.name = component.tagName || '[unknown]';\n    log.reactID = component._rootNodeID;\n  };\n  /**\n   * Callback function for ReactCompositeComponent\n   *\n   * @param {object} component\n   * @param {object} args\n   * @param {?object} fnReturn\n   * @param {object} log\n   * @param {object} info\n   */\n\n\n  var _compositeComponentCallback = function (component, args, fnReturn, log, info) {\n    log.name = component.constructor.displayName || '[unknown]';\n    log.reactID = component._rootNodeID;\n  };\n  /**\n   * Using the hsl() background-color attribute, colors an element.\n   *\n   * @param {DOMElement} el\n   * @param {number} hue [0 for red, 120 for green, 240 for blue]\n   */\n\n\n  var _setHue = function (el, hue) {\n    el.style.backgroundColor = 'hsla(' + hue + ', 100%, 50%, 0.6)';\n  };\n  /**\n   * Round to the thousandth place.\n   * @param {number} time\n   * @return {number}\n   */\n\n\n  var _microTime = function (time) {\n    return Math.round(time * 1000) / 1000;\n  };\n}\n\nmodule.exports = ReactDefaultPerf;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ReactDefaultPerf.js"],"names":["performanceNow","require","ReactDefaultPerf","process","env","NODE_ENV","getInfo","objName","fnName","info","getLogs","logs","filter","log","getRawRenderHistory","rootID","history","reactID","indexOf","reverse","subHistory","forEach","i","length","push","getRenderHistory","map","headerString","indents","Array","split","join","delta","_microTime","timing","bloat","timeToLog","index","name","printRenderHistory","console","warn","printHeatmapLegend","options","heatmap","enabled","max","React","renderComponent","logStr","ii","Math","round","measure","func","_getNewInfo","fnArgs","_getFnArguments","timeBeforeFn","fnReturn","apply","arguments","timeAfterFn","args","before","after","callback","_getCallback","fn","STRIP_COMMENTS","fnStr","toString","replace","slice","match","_renderComponentCallback","_nativeComponentCallback","_compositeComponentCallback","component","nextComponent","constructor","displayName","_rootNodeID","container","loggedByReactDefaultPerf","components","count","_setHue","tagName","el","hue","style","backgroundColor","time","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar performanceNow = require(\"./performanceNow\");\n\nvar ReactDefaultPerf = {};\n\nif (\"production\" !== process.env.NODE_ENV) {\n  ReactDefaultPerf = {\n    /**\n     * Gets the stored information for a given object's function.\n     *\n     * @param {string} objName\n     * @param {string} fnName\n     * @return {?object}\n     */\n    getInfo: function(objName, fnName) {\n      if (!this.info[objName] || !this.info[objName][fnName]) {\n        return null;\n      }\n      return this.info[objName][fnName];\n    },\n\n    /**\n     * Gets the logs pertaining to a given object's function.\n     *\n     * @param {string} objName\n     * @param {string} fnName\n     * @return {?array<object>}\n     */\n    getLogs: function(objName, fnName) {\n      if (!this.getInfo(objName, fnName)) {\n        return null;\n      }\n      return this.logs.filter(function(log) {\n        return log.objName === objName && log.fnName === fnName;\n      });\n    },\n\n    /**\n     * Runs through the logs and builds an array of arrays, where each array\n     * walks through the mounting/updating of each component underneath.\n     *\n     * @param {string} rootID The reactID of the root node, e.g. '.r[2cpyq]'\n     * @return {array<array>}\n     */\n    getRawRenderHistory: function(rootID) {\n      var history = [];\n      /**\n       * Since logs are added after the method returns, the logs are in a sense\n       * upside-down: the inner-most elements from mounting/updating are logged\n       * first, and the last addition to the log is the top renderComponent.\n       * Therefore, we flip the logs upside down for ease of processing, and\n       * reverse the history array at the end so the earliest event has index 0.\n       */\n      var logs = this.logs.filter(function(log) {\n        return log.reactID.indexOf(rootID) === 0;\n      }).reverse();\n\n      var subHistory = [];\n      logs.forEach(function(log, i) {\n        if (i && log.reactID === rootID && logs[i - 1].reactID !== rootID) {\n          subHistory.length && history.push(subHistory);\n          subHistory = [];\n        }\n        subHistory.push(log);\n      });\n      if (subHistory.length) {\n        history.push(subHistory);\n      }\n      return history.reverse();\n    },\n\n    /**\n     * Runs through the logs and builds an array of strings, where each string\n     * is a multiline formatted way of walking through the mounting/updating\n     * underneath.\n     *\n     * @param {string} rootID The reactID of the root node, e.g. '.r[2cpyq]'\n     * @return {array<string>}\n     */\n    getRenderHistory: function(rootID) {\n      var history = this.getRawRenderHistory(rootID);\n\n      return history.map(function(subHistory) {\n        var headerString = (\n          'log# Component (execution time) [bloat from logging]\\n' +\n          '================================================================\\n'\n        );\n        return headerString + subHistory.map(function(log) {\n          // Add two spaces for every layer in the reactID.\n          var indents = '\\t' + Array(log.reactID.split('.[').length).join('  ');\n          var delta = _microTime(log.timing.delta);\n          var bloat = _microTime(log.timing.timeToLog);\n\n          return log.index + indents + log.name + ' (' + delta + 'ms)' +\n            ' [' + bloat + 'ms]';\n        }).join('\\n');\n      });\n    },\n\n    /**\n     * Print the render history from `getRenderHistory` using console.log.\n     * This is currently the best way to display perf data from\n     * any React component; working on that.\n     *\n     * @param {string} rootID The reactID of the root node, e.g. '.r[2cpyq]'\n     * @param {number} index\n     */\n    printRenderHistory: function(rootID, index) {\n      var history = this.getRenderHistory(rootID);\n      if (!history[index]) {\n        console.warn(\n          'Index', index, 'isn\\'t available! ' +\n          'The render history is', history.length, 'long.'\n        );\n        return;\n      }\n      console.log(\n        'Loading render history #' + (index + 1) +\n        ' of ' + history.length + ':\\n' + history[index]\n      );\n    },\n\n    /**\n     * Prints the heatmap legend to console, showing how the colors correspond\n     * with render times. This relies on console.log styles.\n     */\n    printHeatmapLegend: function() {\n      if (!this.options.heatmap.enabled) {\n        return;\n      }\n      var max = this.info.React\n        && this.info.React.renderComponent\n        && this.info.React.renderComponent.max;\n      if (max) {\n        var logStr = 'Heatmap: ';\n        for (var ii = 0; ii <= 10 * max; ii += max) {\n          logStr += '%c ' + (Math.round(ii) / 10) + 'ms ';\n        }\n        console.log(\n          logStr,\n          'background-color: hsla(100, 100%, 50%, 0.6);',\n          'background-color: hsla( 90, 100%, 50%, 0.6);',\n          'background-color: hsla( 80, 100%, 50%, 0.6);',\n          'background-color: hsla( 70, 100%, 50%, 0.6);',\n          'background-color: hsla( 60, 100%, 50%, 0.6);',\n          'background-color: hsla( 50, 100%, 50%, 0.6);',\n          'background-color: hsla( 40, 100%, 50%, 0.6);',\n          'background-color: hsla( 30, 100%, 50%, 0.6);',\n          'background-color: hsla( 20, 100%, 50%, 0.6);',\n          'background-color: hsla( 10, 100%, 50%, 0.6);',\n          'background-color: hsla(  0, 100%, 50%, 0.6);'\n        );\n      }\n    },\n\n    /**\n     * Measure a given function with logging information, and calls a callback\n     * if there is one.\n     *\n     * @param {string} objName\n     * @param {string} fnName\n     * @param {function} func\n     * @return {function}\n     */\n    measure: function(objName, fnName, func) {\n      var info = _getNewInfo(objName, fnName);\n\n      var fnArgs = _getFnArguments(func);\n\n      return function() {\n        var timeBeforeFn = performanceNow();\n        var fnReturn = func.apply(this, arguments);\n        var timeAfterFn = performanceNow();\n\n        /**\n         * Hold onto arguments in a readable way: args[1] -> args.component.\n         * args is also passed to the callback, so if you want to save an\n         * argument in the log, do so in the callback.\n         */\n        var args = {};\n        for (var i = 0; i < arguments.length; i++) {\n          args[fnArgs[i]] = arguments[i];\n        }\n\n        var log = {\n          index: ReactDefaultPerf.logs.length,\n          fnName: fnName,\n          objName: objName,\n          timing: {\n            before: timeBeforeFn,\n            after: timeAfterFn,\n            delta: timeAfterFn - timeBeforeFn\n          }\n        };\n\n        ReactDefaultPerf.logs.push(log);\n\n        /**\n         * The callback gets:\n         * - this (the component)\n         * - the original method's arguments\n         * - what the method returned\n         * - the log object, and\n         * - the wrapped method's info object.\n         */\n        var callback = _getCallback(objName, fnName);\n        callback && callback(this, args, fnReturn, log, info);\n\n        log.timing.timeToLog = performanceNow() - timeAfterFn;\n\n        return fnReturn;\n      };\n    },\n\n    /**\n     * Holds information on wrapped objects/methods.\n     * For instance, ReactDefaultPerf.info.React.renderComponent\n     */\n    info: {},\n\n    /**\n     * Holds all of the logs. Filter this to pull desired information.\n     */\n    logs: [],\n\n    /**\n     * Toggle settings for ReactDefaultPerf\n     */\n    options: {\n      /**\n       * The heatmap sets the background color of the React containers\n       * according to how much total time has been spent rendering them.\n       * The most temporally expensive component is set as pure red,\n       * and the others are colored from green to red as a fraction\n       * of that max component time.\n       */\n      heatmap: {\n        enabled: true\n      }\n    }\n  };\n\n  /**\n   * Gets a info area for a given object's function, adding a new one if\n   * necessary.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @return {object}\n   */\n  var _getNewInfo = function(objName, fnName) {\n    var info = ReactDefaultPerf.getInfo(objName, fnName);\n    if (info) {\n      return info;\n    }\n    ReactDefaultPerf.info[objName] = ReactDefaultPerf.info[objName] || {};\n\n    return ReactDefaultPerf.info[objName][fnName] = {\n      getLogs: function() {\n        return ReactDefaultPerf.getLogs(objName, fnName);\n      }\n    };\n  };\n\n  /**\n   * Gets a list of the argument names from a function's definition.\n   * This is useful for storing arguments by their names within wrapFn().\n   *\n   * @param {function} fn\n   * @return {array<string>}\n   */\n  var _getFnArguments = function(fn) {\n    var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n    var fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n    fnStr = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')'));\n    return fnStr.match(/([^\\s,]+)/g);\n  };\n\n  /**\n   * Store common callbacks within ReactDefaultPerf.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @return {?function}\n   */\n  var _getCallback = function(objName, fnName) {\n    switch (objName + '.' + fnName) {\n      case 'React.renderComponent':\n        return _renderComponentCallback;\n      case 'ReactDOMComponent.mountComponent':\n      case 'ReactDOMComponent.updateComponent':\n        return _nativeComponentCallback;\n      case 'ReactCompositeComponent.mountComponent':\n      case 'ReactCompositeComponent.updateComponent':\n        return _compositeComponentCallback;\n      default:\n        return null;\n    }\n  };\n\n  /**\n   * Callback function for React.renderComponent\n   *\n   * @param {object} component\n   * @param {object} args\n   * @param {?object} fnReturn\n   * @param {object} log\n   * @param {object} info\n   */\n  var _renderComponentCallback =\n    function(component, args, fnReturn, log, info) {\n    log.name = args.nextComponent.constructor.displayName || '[unknown]';\n    log.reactID = fnReturn._rootNodeID || null;\n\n    if (ReactDefaultPerf.options.heatmap.enabled) {\n      var container = args.container;\n      if (!container.loggedByReactDefaultPerf) {\n        container.loggedByReactDefaultPerf = true;\n        info.components = info.components || [];\n        info.components.push(container);\n      }\n\n      container.count = container.count || 0;\n      container.count += log.timing.delta;\n      info.max = info.max || 0;\n      if (container.count > info.max) {\n        info.max = container.count;\n        info.components.forEach(function(component) {\n          _setHue(component, 100 - 100 * component.count / info.max);\n        });\n      } else {\n        _setHue(container, 100 - 100 * container.count / info.max);\n      }\n    }\n  };\n\n  /**\n   * Callback function for ReactDOMComponent\n   *\n   * @param {object} component\n   * @param {object} args\n   * @param {?object} fnReturn\n   * @param {object} log\n   * @param {object} info\n   */\n  var _nativeComponentCallback =\n    function(component, args, fnReturn, log, info) {\n    log.name = component.tagName || '[unknown]';\n    log.reactID = component._rootNodeID;\n  };\n\n  /**\n   * Callback function for ReactCompositeComponent\n   *\n   * @param {object} component\n   * @param {object} args\n   * @param {?object} fnReturn\n   * @param {object} log\n   * @param {object} info\n   */\n  var _compositeComponentCallback =\n    function(component, args, fnReturn, log, info) {\n    log.name = component.constructor.displayName || '[unknown]';\n    log.reactID = component._rootNodeID;\n  };\n\n  /**\n   * Using the hsl() background-color attribute, colors an element.\n   *\n   * @param {DOMElement} el\n   * @param {number} hue [0 for red, 120 for green, 240 for blue]\n   */\n  var _setHue = function(el, hue) {\n    el.style.backgroundColor = 'hsla(' + hue + ', 100%, 50%, 0.6)';\n  };\n\n  /**\n   * Round to the thousandth place.\n   * @param {number} time\n   * @return {number}\n   */\n  var _microTime = function(time) {\n    return Math.round(time * 1000) / 1000;\n  };\n}\n\nmodule.exports = ReactDefaultPerf;\n"]},"metadata":{},"sourceType":"script"}