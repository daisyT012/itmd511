{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactEventEmitterMixin\n */\n\"use strict\";\n\nvar EventPluginHub = require(\"./EventPluginHub\");\n\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nfunction runEventQueueInBatch(events) {\n  EventPluginHub.enqueueEvents(events);\n  EventPluginHub.processEventQueue();\n}\n\nvar ReactEventEmitterMixin = {\n  /**\n   * Whether or not `ensureListening` has been invoked.\n   * @type {boolean}\n   * @private\n   */\n  _isListening: false,\n\n  /**\n   * Function, must be implemented. Listens to events on the top level of the\n   * application.\n   *\n   * @abstract\n   *\n   * listenAtTopLevel: null,\n   */\n\n  /**\n   * Ensures that top-level event delegation listeners are installed.\n   *\n   * There are issues with listening to both touch events and mouse events on\n   * the top-level, so we make the caller choose which one to listen to. (If\n   * there's a touch top-level listeners, anchors don't receive clicks for some\n   * reason, and only in some cases).\n   *\n   * @param {*} config Configuration passed through to `listenAtTopLevel`.\n   */\n  ensureListening: function (config) {\n    if (!config.contentDocument._reactIsListening) {\n      this.listenAtTopLevel(config.touchNotMouse, config.contentDocument);\n      config.contentDocument._reactIsListening = true;\n    }\n  },\n\n  /**\n   * Streams a fired top-level event to `EventPluginHub` where plugins have the\n   * opportunity to create `ReactEvent`s to be dispatched.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {object} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native environment event.\n   */\n  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent); // Event queue being processed in the same cycle allows `preventDefault`.\n\n    ReactUpdates.batchedUpdates(runEventQueueInBatch, events);\n  }\n};\nmodule.exports = ReactEventEmitterMixin;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ReactEventEmitterMixin.js"],"names":["EventPluginHub","require","ReactUpdates","runEventQueueInBatch","events","enqueueEvents","processEventQueue","ReactEventEmitterMixin","_isListening","ensureListening","config","contentDocument","_reactIsListening","listenAtTopLevel","touchNotMouse","handleTopLevel","topLevelType","topLevelTarget","topLevelTargetID","nativeEvent","extractEvents","batchedUpdates","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA1B;;AAEA,SAASE,oBAAT,CAA8BC,MAA9B,EAAsC;AACpCJ,EAAAA,cAAc,CAACK,aAAf,CAA6BD,MAA7B;AACAJ,EAAAA,cAAc,CAACM,iBAAf;AACD;;AAED,IAAIC,sBAAsB,GAAG;AAC3B;AACF;AACA;AACA;AACA;AACEC,EAAAA,YAAY,EAAE,KANa;;AAQ3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,eAAe,EAAE,UAASC,MAAT,EAAiB;AAChC,QAAI,CAACA,MAAM,CAACC,eAAP,CAAuBC,iBAA5B,EAA+C;AAC7C,WAAKC,gBAAL,CAAsBH,MAAM,CAACI,aAA7B,EAA4CJ,MAAM,CAACC,eAAnD;AACAD,MAAAA,MAAM,CAACC,eAAP,CAAuBC,iBAAvB,GAA2C,IAA3C;AACD;AACF,GAhC0B;;AAkC3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEG,EAAAA,cAAc,EAAE,UACZC,YADY,EAEZC,cAFY,EAGZC,gBAHY,EAIZC,WAJY,EAIC;AACf,QAAIf,MAAM,GAAGJ,cAAc,CAACoB,aAAf,CACXJ,YADW,EAEXC,cAFW,EAGXC,gBAHW,EAIXC,WAJW,CAAb,CADe,CAQf;;AACAjB,IAAAA,YAAY,CAACmB,cAAb,CAA4BlB,oBAA5B,EAAkDC,MAAlD;AACD;AAzD0B,CAA7B;AA4DAkB,MAAM,CAACC,OAAP,GAAiBhB,sBAAjB","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactEventEmitterMixin\n */\n\n\"use strict\";\n\nvar EventPluginHub = require(\"./EventPluginHub\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nfunction runEventQueueInBatch(events) {\n  EventPluginHub.enqueueEvents(events);\n  EventPluginHub.processEventQueue();\n}\n\nvar ReactEventEmitterMixin = {\n  /**\n   * Whether or not `ensureListening` has been invoked.\n   * @type {boolean}\n   * @private\n   */\n  _isListening: false,\n\n  /**\n   * Function, must be implemented. Listens to events on the top level of the\n   * application.\n   *\n   * @abstract\n   *\n   * listenAtTopLevel: null,\n   */\n\n  /**\n   * Ensures that top-level event delegation listeners are installed.\n   *\n   * There are issues with listening to both touch events and mouse events on\n   * the top-level, so we make the caller choose which one to listen to. (If\n   * there's a touch top-level listeners, anchors don't receive clicks for some\n   * reason, and only in some cases).\n   *\n   * @param {*} config Configuration passed through to `listenAtTopLevel`.\n   */\n  ensureListening: function(config) {\n    if (!config.contentDocument._reactIsListening) {\n      this.listenAtTopLevel(config.touchNotMouse, config.contentDocument);\n      config.contentDocument._reactIsListening = true;\n    }\n  },\n\n  /**\n   * Streams a fired top-level event to `EventPluginHub` where plugins have the\n   * opportunity to create `ReactEvent`s to be dispatched.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {object} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native environment event.\n   */\n  handleTopLevel: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    var events = EventPluginHub.extractEvents(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent\n    );\n\n    // Event queue being processed in the same cycle allows `preventDefault`.\n    ReactUpdates.batchedUpdates(runEventQueueInBatch, events);\n  }\n};\n\nmodule.exports = ReactEventEmitterMixin;\n"]},"metadata":{},"sourceType":"script"}