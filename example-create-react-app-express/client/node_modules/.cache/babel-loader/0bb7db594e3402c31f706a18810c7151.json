{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactPropTransferer\n */\n\"use strict\";\n\nvar emptyFunction = require(\"./emptyFunction\");\n\nvar invariant = require(\"./invariant\");\n\nvar joinClasses = require(\"./joinClasses\");\n\nvar merge = require(\"./merge\");\n/**\n * Creates a transfer strategy that will merge prop values using the supplied\n * `mergeStrategy`. If a prop was previously unset, this just sets it.\n *\n * @param {function} mergeStrategy\n * @return {function}\n */\n\n\nfunction createTransferStrategy(mergeStrategy) {\n  return function (props, key, value) {\n    if (!props.hasOwnProperty(key)) {\n      props[key] = value;\n    } else {\n      props[key] = mergeStrategy(props[key], value);\n    }\n  };\n}\n/**\n * Transfer strategies dictate how props are transferred by `transferPropsTo`.\n */\n\n\nvar TransferStrategies = {\n  /**\n   * Never transfer `children`.\n   */\n  children: emptyFunction,\n\n  /**\n   * Transfer the `className` prop by merging them.\n   */\n  className: createTransferStrategy(joinClasses),\n\n  /**\n   * Never transfer the `ref` prop.\n   */\n  ref: emptyFunction,\n\n  /**\n   * Transfer the `style` prop (which is an object) by merging them.\n   */\n  style: createTransferStrategy(merge)\n};\n/**\n * ReactPropTransferer are capable of transferring props to another component\n * using a `transferPropsTo` method.\n *\n * @class ReactPropTransferer\n */\n\nvar ReactPropTransferer = {\n  TransferStrategies: TransferStrategies,\n\n  /**\n   * @lends {ReactPropTransferer.prototype}\n   */\n  Mixin: {\n    /**\n     * Transfer props from this component to a target component.\n     *\n     * Props that do not have an explicit transfer strategy will be transferred\n     * only if the target component does not already have the prop set.\n     *\n     * This is usually used to pass down props to a returned root component.\n     *\n     * @param {ReactComponent} component Component receiving the properties.\n     * @return {ReactComponent} The supplied `component`.\n     * @final\n     * @protected\n     */\n    transferPropsTo: function (component) {\n      \"production\" !== process.env.NODE_ENV ? invariant(component.props.__owner__ === this, '%s: You can\\'t call transferPropsTo() on a component that you ' + 'don\\'t own, %s. This usually means you are calling ' + 'transferPropsTo() on a component passed in as props or children.', this.constructor.displayName, component.constructor.displayName) : invariant(component.props.__owner__ === this);\n      var props = {};\n\n      for (var thatKey in component.props) {\n        if (component.props.hasOwnProperty(thatKey)) {\n          props[thatKey] = component.props[thatKey];\n        }\n      }\n\n      for (var thisKey in this.props) {\n        if (!this.props.hasOwnProperty(thisKey)) {\n          continue;\n        }\n\n        var transferStrategy = TransferStrategies[thisKey];\n\n        if (transferStrategy) {\n          transferStrategy(props, thisKey, this.props[thisKey]);\n        } else if (!props.hasOwnProperty(thisKey)) {\n          props[thisKey] = this.props[thisKey];\n        }\n      }\n\n      component.props = props;\n      return component;\n    }\n  }\n};\nmodule.exports = ReactPropTransferer;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ReactPropTransferer.js"],"names":["emptyFunction","require","invariant","joinClasses","merge","createTransferStrategy","mergeStrategy","props","key","value","hasOwnProperty","TransferStrategies","children","className","ref","style","ReactPropTransferer","Mixin","transferPropsTo","component","process","env","NODE_ENV","__owner__","constructor","displayName","thatKey","thisKey","transferStrategy","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactPropTransferer\n */\n\n\"use strict\";\n\nvar emptyFunction = require(\"./emptyFunction\");\nvar invariant = require(\"./invariant\");\nvar joinClasses = require(\"./joinClasses\");\nvar merge = require(\"./merge\");\n\n/**\n * Creates a transfer strategy that will merge prop values using the supplied\n * `mergeStrategy`. If a prop was previously unset, this just sets it.\n *\n * @param {function} mergeStrategy\n * @return {function}\n */\nfunction createTransferStrategy(mergeStrategy) {\n  return function(props, key, value) {\n    if (!props.hasOwnProperty(key)) {\n      props[key] = value;\n    } else {\n      props[key] = mergeStrategy(props[key], value);\n    }\n  };\n}\n\n/**\n * Transfer strategies dictate how props are transferred by `transferPropsTo`.\n */\nvar TransferStrategies = {\n  /**\n   * Never transfer `children`.\n   */\n  children: emptyFunction,\n  /**\n   * Transfer the `className` prop by merging them.\n   */\n  className: createTransferStrategy(joinClasses),\n  /**\n   * Never transfer the `ref` prop.\n   */\n  ref: emptyFunction,\n  /**\n   * Transfer the `style` prop (which is an object) by merging them.\n   */\n  style: createTransferStrategy(merge)\n};\n\n/**\n * ReactPropTransferer are capable of transferring props to another component\n * using a `transferPropsTo` method.\n *\n * @class ReactPropTransferer\n */\nvar ReactPropTransferer = {\n\n  TransferStrategies: TransferStrategies,\n\n  /**\n   * @lends {ReactPropTransferer.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Transfer props from this component to a target component.\n     *\n     * Props that do not have an explicit transfer strategy will be transferred\n     * only if the target component does not already have the prop set.\n     *\n     * This is usually used to pass down props to a returned root component.\n     *\n     * @param {ReactComponent} component Component receiving the properties.\n     * @return {ReactComponent} The supplied `component`.\n     * @final\n     * @protected\n     */\n    transferPropsTo: function(component) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        component.props.__owner__ === this,\n        '%s: You can\\'t call transferPropsTo() on a component that you ' +\n        'don\\'t own, %s. This usually means you are calling ' +\n        'transferPropsTo() on a component passed in as props or children.',\n        this.constructor.displayName,\n        component.constructor.displayName\n      ) : invariant(component.props.__owner__ === this));\n\n      var props = {};\n      for (var thatKey in component.props) {\n        if (component.props.hasOwnProperty(thatKey)) {\n          props[thatKey] = component.props[thatKey];\n        }\n      }\n      for (var thisKey in this.props) {\n        if (!this.props.hasOwnProperty(thisKey)) {\n          continue;\n        }\n        var transferStrategy = TransferStrategies[thisKey];\n        if (transferStrategy) {\n          transferStrategy(props, thisKey, this.props[thisKey]);\n        } else if (!props.hasOwnProperty(thisKey)) {\n          props[thisKey] = this.props[thisKey];\n        }\n      }\n      component.props = props;\n      return component;\n    }\n\n  }\n\n};\n\nmodule.exports = ReactPropTransferer;\n"]},"metadata":{},"sourceType":"script"}