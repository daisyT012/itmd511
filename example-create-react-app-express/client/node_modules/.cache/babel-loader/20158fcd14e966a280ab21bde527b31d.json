{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ex\n * @typechecks\n * @nostacktrace\n */\n\n/**\n * This function transforms error message with arguments into plain text error\n * message, so that it can be passed to window.onerror without losing anything.\n * It can then be transformed back by `erx()` function.\n *\n * Usage:\n *   throw new Error(ex('Error %s from %s', errorCode, userID));\n *\n * @param {string} errorMessage\n */\nvar ex = function (errorMessage\n/*, arg1, arg2, ...*/\n) {\n  var args = Array.prototype.slice.call(arguments).map(function (arg) {\n    return String(arg);\n  });\n  var expectedLength = errorMessage.split('%s').length - 1;\n\n  if (expectedLength !== args.length - 1) {\n    // something wrong with the formatting string\n    return ex('ex args number mismatch: %s', JSON.stringify(args));\n  }\n\n  return ex._prefix + JSON.stringify(args) + ex._suffix;\n};\n\nex._prefix = '<![EX[';\nex._suffix = ']]>';\nmodule.exports = ex;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ex.js"],"names":["ex","errorMessage","args","Array","prototype","slice","call","arguments","map","arg","String","expectedLength","split","length","JSON","stringify","_prefix","_suffix","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,EAAE,GAAG,UAASC;AAAY;AAArB,EAA4C;AACnD,MAAIC,IAAI,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsCC,GAAtC,CAA0C,UAASC,GAAT,EAAc;AACjE,WAAOC,MAAM,CAACD,GAAD,CAAb;AACD,GAFU,CAAX;AAGA,MAAIE,cAAc,GAAGV,YAAY,CAACW,KAAb,CAAmB,IAAnB,EAAyBC,MAAzB,GAAkC,CAAvD;;AAEA,MAAIF,cAAc,KAAKT,IAAI,CAACW,MAAL,GAAc,CAArC,EAAwC;AACtC;AACA,WAAOb,EAAE,CAAC,6BAAD,EAAgCc,IAAI,CAACC,SAAL,CAAeb,IAAf,CAAhC,CAAT;AACD;;AAED,SAAOF,EAAE,CAACgB,OAAH,GAAaF,IAAI,CAACC,SAAL,CAAeb,IAAf,CAAb,GAAoCF,EAAE,CAACiB,OAA9C;AACD,CAZD;;AAcAjB,EAAE,CAACgB,OAAH,GAAa,QAAb;AACAhB,EAAE,CAACiB,OAAH,GAAa,KAAb;AAEAC,MAAM,CAACC,OAAP,GAAiBnB,EAAjB","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ex\n * @typechecks\n * @nostacktrace\n */\n\n/**\n * This function transforms error message with arguments into plain text error\n * message, so that it can be passed to window.onerror without losing anything.\n * It can then be transformed back by `erx()` function.\n *\n * Usage:\n *   throw new Error(ex('Error %s from %s', errorCode, userID));\n *\n * @param {string} errorMessage\n */\n\nvar ex = function(errorMessage/*, arg1, arg2, ...*/) {\n  var args = Array.prototype.slice.call(arguments).map(function(arg) {\n    return String(arg);\n  });\n  var expectedLength = errorMessage.split('%s').length - 1;\n\n  if (expectedLength !== args.length - 1) {\n    // something wrong with the formatting string\n    return ex('ex args number mismatch: %s', JSON.stringify(args));\n  }\n\n  return ex._prefix + JSON.stringify(args) + ex._suffix;\n};\n\nex._prefix = '<![EX[';\nex._suffix = ']]>';\n\nmodule.exports = ex;\n"]},"metadata":{},"sourceType":"script"}