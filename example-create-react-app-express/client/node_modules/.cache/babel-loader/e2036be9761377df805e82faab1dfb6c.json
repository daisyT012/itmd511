{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMTextarea\n */\n\"use strict\";\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\n\nvar LinkedValueMixin = require(\"./LinkedValueMixin\");\n\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\n\nvar ReactDOM = require(\"./ReactDOM\");\n\nvar invariant = require(\"./invariant\");\n\nvar merge = require(\"./merge\"); // Store a reference to the <textarea> `ReactDOMComponent`.\n\n\nvar textarea = ReactDOM.textarea;\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\n\nvar ReactDOMTextarea = ReactCompositeComponent.createClass({\n  mixins: [LinkedValueMixin],\n  getInitialState: function () {\n    var defaultValue = this.props.defaultValue; // TODO (yungsters): Remove support for children content in <textarea>.\n\n    var children = this.props.children;\n\n    if (children != null) {\n      if (\"production\" !== process.env.NODE_ENV) {\n        console.warn('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');\n      }\n\n      \"production\" !== process.env.NODE_ENV ? invariant(defaultValue == null, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(defaultValue == null);\n\n      if (Array.isArray(children)) {\n        \"production\" !== process.env.NODE_ENV ? invariant(children.length <= 1, '<textarea> can only have at most one child.') : invariant(children.length <= 1);\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n\n    var value = this.getValue();\n    return {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue),\n      value: defaultValue\n    };\n  },\n  shouldComponentUpdate: function () {\n    // Defer any updates to this component during the `onChange` handler.\n    return !this._isChanging;\n  },\n  render: function () {\n    // Clone `this.props` so we don't mutate the input.\n    var props = merge(this.props);\n    var value = this.getValue();\n    \"production\" !== process.env.NODE_ENV ? invariant(props.dangerouslySetInnerHTML == null, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(props.dangerouslySetInnerHTML == null);\n    props.defaultValue = null;\n    props.value = value != null ? value : this.state.value;\n    props.onChange = this._handleChange; // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n\n    return textarea(props, this.state.initialValue);\n  },\n  componentDidUpdate: function (prevProps, prevState, rootNode) {\n    var value = this.getValue();\n\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n  _handleChange: function (event) {\n    var returnValue;\n    var onChange = this.getOnChange();\n\n    if (onChange) {\n      this._isChanging = true;\n      returnValue = onChange(event);\n      this._isChanging = false;\n    }\n\n    this.setState({\n      value: event.target.value\n    });\n    return returnValue;\n  }\n});\nmodule.exports = ReactDOMTextarea;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ReactDOMTextarea.js"],"names":["DOMPropertyOperations","require","LinkedValueMixin","ReactCompositeComponent","ReactDOM","invariant","merge","textarea","ReactDOMTextarea","createClass","mixins","getInitialState","defaultValue","props","children","process","env","NODE_ENV","console","warn","Array","isArray","length","value","getValue","initialValue","shouldComponentUpdate","_isChanging","render","dangerouslySetInnerHTML","state","onChange","_handleChange","componentDidUpdate","prevProps","prevState","rootNode","setValueForProperty","event","returnValue","getOnChange","setState","target","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMTextarea\n */\n\n\"use strict\";\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar LinkedValueMixin = require(\"./LinkedValueMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactDOM = require(\"./ReactDOM\");\n\nvar invariant = require(\"./invariant\");\nvar merge = require(\"./merge\");\n\n// Store a reference to the <textarea> `ReactDOMComponent`.\nvar textarea = ReactDOM.textarea;\n\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = ReactCompositeComponent.createClass({\n  mixins: [LinkedValueMixin],\n\n  getInitialState: function() {\n    var defaultValue = this.props.defaultValue;\n    // TODO (yungsters): Remove support for children content in <textarea>.\n    var children = this.props.children;\n    if (children != null) {\n      if (\"production\" !== process.env.NODE_ENV) {\n        console.warn(\n          'Use the `defaultValue` or `value` props instead of setting ' +\n          'children on <textarea>.'\n        );\n      }\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        defaultValue == null,\n        'If you supply `defaultValue` on a <textarea>, do not pass children.'\n      ) : invariant(defaultValue == null));\n      if (Array.isArray(children)) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          children.length <= 1,\n          '<textarea> can only have at most one child.'\n        ) : invariant(children.length <= 1));\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    var value = this.getValue();\n    return {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue),\n      value: defaultValue\n    };\n  },\n\n  shouldComponentUpdate: function() {\n    // Defer any updates to this component during the `onChange` handler.\n    return !this._isChanging;\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = merge(this.props);\n    var value = this.getValue();\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      props.dangerouslySetInnerHTML == null,\n      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'\n    ) : invariant(props.dangerouslySetInnerHTML == null));\n\n    props.defaultValue = null;\n    props.value = value != null ? value : this.state.value;\n    props.onChange = this._handleChange;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n    return textarea(props, this.state.initialValue);\n  },\n\n  componentDidUpdate: function(prevProps, prevState, rootNode) {\n    var value = this.getValue();\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = this.getOnChange();\n    if (onChange) {\n      this._isChanging = true;\n      returnValue = onChange(event);\n      this._isChanging = false;\n    }\n    this.setState({value: event.target.value});\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMTextarea;\n"]},"metadata":{},"sourceType":"script"}