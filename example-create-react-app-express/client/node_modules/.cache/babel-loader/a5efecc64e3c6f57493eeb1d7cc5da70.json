{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactComponentBrowserEnvironment\n */\n\n/*jslint evil: true */\n\"use strict\";\n\nvar ReactDOMIDOperations = require(\"./ReactDOMIDOperations\");\n\nvar ReactMarkupChecksum = require(\"./ReactMarkupChecksum\");\n\nvar ReactMount = require(\"./ReactMount\");\n\nvar ReactReconcileTransaction = require(\"./ReactReconcileTransaction\");\n\nvar getReactRootElementInContainer = require(\"./getReactRootElementInContainer\");\n\nvar invariant = require(\"./invariant\");\n\nvar mutateHTMLNodeWithMarkup = require(\"./mutateHTMLNodeWithMarkup\");\n\nvar ELEMENT_NODE_TYPE = 1;\nvar DOC_NODE_TYPE = 9;\n/**\n * Abstracts away all functionality of `ReactComponent` requires knowledge of\n * the browser context.\n */\n\nvar ReactComponentBrowserEnvironment = {\n  /**\n   * Mixed into every component instance.\n   */\n  Mixin: {\n    /**\n     * Returns the DOM node rendered by this component.\n     *\n     * @return {DOMElement} The root node of this component.\n     * @final\n     * @protected\n     */\n    getDOMNode: function () {\n      \"production\" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'getDOMNode(): A component must be mounted to have a DOM node.') : invariant(this.isMounted());\n      return ReactMount.getNode(this._rootNodeID);\n    }\n  },\n  ReactReconcileTransaction: ReactReconcileTransaction,\n  DOMIDOperations: ReactDOMIDOperations,\n\n  /**\n   * If a particular environment requires that some resources be cleaned up,\n   * specify this in the injected Mixin. In the DOM, we would likely want to\n   * purge any cached node ID lookups.\n   *\n   * @private\n   */\n  unmountIDFromEnvironment: function (rootNodeID) {\n    ReactMount.purgeID(rootNodeID);\n  },\n\n  /**\n   * @param {string} markup Markup string to place into the DOM Element.\n   * @param {DOMElement} container DOM Element to insert markup into.\n   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the\n   * container if possible.\n   */\n  mountImageIntoNode: function (markup, container, shouldReuseMarkup) {\n    \"production\" !== process.env.NODE_ENV ? invariant(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE && ReactMount.allowFullPageRender), 'mountComponentIntoNode(...): Target container is not valid.') : invariant(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE && ReactMount.allowFullPageRender));\n\n    if (shouldReuseMarkup) {\n      if (ReactMarkupChecksum.canReuseMarkup(markup, getReactRootElementInContainer(container))) {\n        return;\n      } else {\n        if (\"production\" !== process.env.NODE_ENV) {\n          console.warn('React attempted to use reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are using ' + 'server rendering and the markup generated on the server was ' + 'not what the client was expecting. React injected new markup ' + 'to compensate which works but you have lost many of the ' + 'benefits of server rendering. Instead, figure out why the ' + 'markup being generated is different on the client or server.');\n        }\n      }\n    } // You can't naively set the innerHTML of the entire document. You need\n    // to mutate documentElement which requires doing some crazy tricks. See\n    // mutateHTMLNodeWithMarkup()\n\n\n    if (container.nodeType === DOC_NODE_TYPE) {\n      mutateHTMLNodeWithMarkup(container.documentElement, markup);\n      return;\n    } // Asynchronously inject markup by ensuring that the container is not in\n    // the document when settings its `innerHTML`.\n\n\n    var parent = container.parentNode;\n\n    if (parent) {\n      var next = container.nextSibling;\n      parent.removeChild(container);\n      container.innerHTML = markup;\n\n      if (next) {\n        parent.insertBefore(container, next);\n      } else {\n        parent.appendChild(container);\n      }\n    } else {\n      container.innerHTML = markup;\n    }\n  }\n};\nmodule.exports = ReactComponentBrowserEnvironment;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ReactComponentBrowserEnvironment.js"],"names":["ReactDOMIDOperations","require","ReactMarkupChecksum","ReactMount","ReactReconcileTransaction","getReactRootElementInContainer","invariant","mutateHTMLNodeWithMarkup","ELEMENT_NODE_TYPE","DOC_NODE_TYPE","ReactComponentBrowserEnvironment","Mixin","getDOMNode","process","env","NODE_ENV","isMounted","getNode","_rootNodeID","DOMIDOperations","unmountIDFromEnvironment","rootNodeID","purgeID","mountImageIntoNode","markup","container","shouldReuseMarkup","nodeType","allowFullPageRender","canReuseMarkup","console","warn","documentElement","parent","parentNode","next","nextSibling","removeChild","innerHTML","insertBefore","appendChild","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactComponentBrowserEnvironment\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\nvar ReactDOMIDOperations = require(\"./ReactDOMIDOperations\");\nvar ReactMarkupChecksum = require(\"./ReactMarkupChecksum\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactReconcileTransaction = require(\"./ReactReconcileTransaction\");\n\nvar getReactRootElementInContainer = require(\"./getReactRootElementInContainer\");\nvar invariant = require(\"./invariant\");\nvar mutateHTMLNodeWithMarkup = require(\"./mutateHTMLNodeWithMarkup\");\n\n\nvar ELEMENT_NODE_TYPE = 1;\nvar DOC_NODE_TYPE = 9;\n\n\n/**\n * Abstracts away all functionality of `ReactComponent` requires knowledge of\n * the browser context.\n */\nvar ReactComponentBrowserEnvironment = {\n  /**\n   * Mixed into every component instance.\n   */\n  Mixin: {\n    /**\n     * Returns the DOM node rendered by this component.\n     *\n     * @return {DOMElement} The root node of this component.\n     * @final\n     * @protected\n     */\n    getDOMNode: function() {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        this.isMounted(),\n        'getDOMNode(): A component must be mounted to have a DOM node.'\n      ) : invariant(this.isMounted()));\n      return ReactMount.getNode(this._rootNodeID);\n    }\n  },\n\n  ReactReconcileTransaction: ReactReconcileTransaction,\n\n  DOMIDOperations: ReactDOMIDOperations,\n\n  /**\n   * If a particular environment requires that some resources be cleaned up,\n   * specify this in the injected Mixin. In the DOM, we would likely want to\n   * purge any cached node ID lookups.\n   *\n   * @private\n   */\n  unmountIDFromEnvironment: function(rootNodeID) {\n    ReactMount.purgeID(rootNodeID);\n  },\n\n  /**\n   * @param {string} markup Markup string to place into the DOM Element.\n   * @param {DOMElement} container DOM Element to insert markup into.\n   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the\n   * container if possible.\n   */\n  mountImageIntoNode: function(markup, container, shouldReuseMarkup) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      container && (\n        container.nodeType === ELEMENT_NODE_TYPE ||\n        container.nodeType === DOC_NODE_TYPE && ReactMount.allowFullPageRender\n      ),\n      'mountComponentIntoNode(...): Target container is not valid.'\n    ) : invariant(container && (\n      container.nodeType === ELEMENT_NODE_TYPE ||\n      container.nodeType === DOC_NODE_TYPE && ReactMount.allowFullPageRender\n    )));\n    if (shouldReuseMarkup) {\n      if (ReactMarkupChecksum.canReuseMarkup(\n            markup,\n            getReactRootElementInContainer(container))) {\n        return;\n      } else {\n        if (\"production\" !== process.env.NODE_ENV) {\n          console.warn(\n            'React attempted to use reuse markup in a container but the ' +\n            'checksum was invalid. This generally means that you are using ' +\n            'server rendering and the markup generated on the server was ' +\n            'not what the client was expecting. React injected new markup ' +\n            'to compensate which works but you have lost many of the ' +\n            'benefits of server rendering. Instead, figure out why the ' +\n            'markup being generated is different on the client or server.'\n          );\n        }\n      }\n    }\n\n    // You can't naively set the innerHTML of the entire document. You need\n    // to mutate documentElement which requires doing some crazy tricks. See\n    // mutateHTMLNodeWithMarkup()\n    if (container.nodeType === DOC_NODE_TYPE) {\n      mutateHTMLNodeWithMarkup(container.documentElement, markup);\n      return;\n    }\n\n    // Asynchronously inject markup by ensuring that the container is not in\n    // the document when settings its `innerHTML`.\n    var parent = container.parentNode;\n    if (parent) {\n      var next = container.nextSibling;\n      parent.removeChild(container);\n      container.innerHTML = markup;\n      if (next) {\n        parent.insertBefore(container, next);\n      } else {\n        parent.appendChild(container);\n      }\n    } else {\n      container.innerHTML = markup;\n    }\n  }\n};\n\nmodule.exports = ReactComponentBrowserEnvironment;\n"]},"metadata":{},"sourceType":"script"}