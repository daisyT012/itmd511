{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactTextComponent\n * @typechecks static-only\n */\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\n\nvar ReactMount = require(\"./ReactMount\");\n\nvar escapeTextForBrowser = require(\"./escapeTextForBrowser\");\n\nvar mixInto = require(\"./mixInto\");\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactTextComponent\n * @extends ReactComponent\n * @internal\n */\n\n\nvar ReactTextComponent = function (initialText) {\n  this.construct({\n    text: initialText\n  });\n};\n\nmixInto(ReactTextComponent, ReactComponent.Mixin);\nmixInto(ReactTextComponent, {\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function (rootID, transaction, mountDepth) {\n    ReactComponent.Mixin.mountComponent.call(this, rootID, transaction, mountDepth);\n    return '<span ' + ReactMount.ATTR_NAME + '=\"' + escapeTextForBrowser(rootID) + '\">' + escapeTextForBrowser(this.props.text) + '</span>';\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {object} nextComponent Contains the next text content.\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function (nextComponent, transaction) {\n    var nextProps = nextComponent.props;\n\n    if (nextProps.text !== this.props.text) {\n      this.props.text = nextProps.text;\n      ReactComponent.DOMIDOperations.updateTextContentByID(this._rootNodeID, nextProps.text);\n    }\n  }\n});\nmodule.exports = ReactTextComponent;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ReactTextComponent.js"],"names":["ReactComponent","require","ReactMount","escapeTextForBrowser","mixInto","ReactTextComponent","initialText","construct","text","Mixin","mountComponent","rootID","transaction","mountDepth","call","ATTR_NAME","props","receiveComponent","nextComponent","nextProps","DOMIDOperations","updateTextContentByID","_rootNodeID","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAAxB;;AAEA,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,WAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAII,kBAAkB,GAAG,UAASC,WAAT,EAAsB;AAC7C,OAAKC,SAAL,CAAe;AAACC,IAAAA,IAAI,EAAEF;AAAP,GAAf;AACD,CAFD;;AAIAF,OAAO,CAACC,kBAAD,EAAqBL,cAAc,CAACS,KAApC,CAAP;AACAL,OAAO,CAACC,kBAAD,EAAqB;AAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEK,EAAAA,cAAc,EAAE,UAASC,MAAT,EAAiBC,WAAjB,EAA8BC,UAA9B,EAA0C;AACxDb,IAAAA,cAAc,CAACS,KAAf,CAAqBC,cAArB,CAAoCI,IAApC,CACE,IADF,EAEEH,MAFF,EAGEC,WAHF,EAIEC,UAJF;AAMA,WACE,WAAWX,UAAU,CAACa,SAAtB,GAAkC,IAAlC,GAAyCZ,oBAAoB,CAACQ,MAAD,CAA7D,GAAwE,IAAxE,GACER,oBAAoB,CAAC,KAAKa,KAAL,CAAWR,IAAZ,CADtB,GAEA,SAHF;AAKD,GAxByB;;AA0B1B;AACF;AACA;AACA;AACA;AACA;AACA;AACES,EAAAA,gBAAgB,EAAE,UAASC,aAAT,EAAwBN,WAAxB,EAAqC;AACrD,QAAIO,SAAS,GAAGD,aAAa,CAACF,KAA9B;;AACA,QAAIG,SAAS,CAACX,IAAV,KAAmB,KAAKQ,KAAL,CAAWR,IAAlC,EAAwC;AACtC,WAAKQ,KAAL,CAAWR,IAAX,GAAkBW,SAAS,CAACX,IAA5B;AACAR,MAAAA,cAAc,CAACoB,eAAf,CAA+BC,qBAA/B,CACE,KAAKC,WADP,EAEEH,SAAS,CAACX,IAFZ;AAID;AACF;AA1CyB,CAArB,CAAP;AA8CAe,MAAM,CAACC,OAAP,GAAiBnB,kBAAjB","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactTextComponent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactMount = require(\"./ReactMount\");\n\nvar escapeTextForBrowser = require(\"./escapeTextForBrowser\");\nvar mixInto = require(\"./mixInto\");\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactTextComponent = function(initialText) {\n  this.construct({text: initialText});\n};\n\nmixInto(ReactTextComponent, ReactComponent.Mixin);\nmixInto(ReactTextComponent, {\n\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function(rootID, transaction, mountDepth) {\n    ReactComponent.Mixin.mountComponent.call(\n      this,\n      rootID,\n      transaction,\n      mountDepth\n    );\n    return (\n      '<span ' + ReactMount.ATTR_NAME + '=\"' + escapeTextForBrowser(rootID) + '\">' +\n        escapeTextForBrowser(this.props.text) +\n      '</span>'\n    );\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {object} nextComponent Contains the next text content.\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function(nextComponent, transaction) {\n    var nextProps = nextComponent.props;\n    if (nextProps.text !== this.props.text) {\n      this.props.text = nextProps.text;\n      ReactComponent.DOMIDOperations.updateTextContentByID(\n        this._rootNodeID,\n        nextProps.text\n      );\n    }\n  }\n\n});\n\nmodule.exports = ReactTextComponent;\n"]},"metadata":{},"sourceType":"script"}