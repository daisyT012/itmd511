{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ChangeEventPlugin\n */\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\n\nvar EventPluginHub = require(\"./EventPluginHub\");\n\nvar EventPropagators = require(\"./EventPropagators\");\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar isEventSupported = require(\"./isEventSupported\");\n\nvar isTextInputElement = require(\"./isTextInputElement\");\n\nvar keyOf = require(\"./keyOf\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onChange: null\n      }),\n      captured: keyOf({\n        onChangeCapture: null\n      })\n    }\n  }\n};\n/**\n * For IE shims\n */\n\nvar activeElement = null;\nvar activeElementID = null;\nvar activeElementValue = null;\nvar activeElementValueProp = null;\n/**\n * SECTION: handle `change` event\n */\n\nfunction shouldUseChangeEvent(elem) {\n  return elem.nodeName === 'SELECT' || elem.nodeName === 'INPUT' && elem.type === 'file';\n}\n\nvar doesChangeEventBubble = false;\n\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent);\n  EventPropagators.accumulateTwoPhaseDispatches(event); // If change bubbled, we'd just bind to it like all the other events\n  // and have it go through ReactEventTopLevelCallback. Since it doesn't, we\n  // manually listen for the change event and so we have to enqueue and\n  // process the abstract event manually.\n\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue();\n}\n\nfunction startWatchingForChangeEventIE8(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\n}\n\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\n  activeElement = null;\n  activeElementID = null;\n}\n\nfunction getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topChange) {\n    return topLevelTargetID;\n  }\n}\n\nfunction handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForChangeEventIE8();\n  }\n}\n/**\n * SECTION: handle `input` event\n */\n\n\nvar isInputEventSupported = false;\n\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events\n  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);\n}\n/**\n * (For old IE.) Replacement getter/setter for the `value` property that gets\n * set on the active element.\n */\n\n\nvar newValueProp = {\n  get: function () {\n    return activeElementValueProp.get.call(this);\n  },\n  set: function (val) {\n    // Cast to a string so we can do equality checks.\n    activeElementValue = '' + val;\n    activeElementValueProp.set.call(this, val);\n  }\n};\n/**\n * (For old IE.) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\n\nfunction startWatchingForValueChange(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElementValue = target.value;\n  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');\n  Object.defineProperty(activeElement, 'value', newValueProp);\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);\n}\n/**\n * (For old IE.) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\n\n\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  } // delete restores the original property definition\n\n\n  delete activeElement.value;\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);\n  activeElement = null;\n  activeElementID = null;\n  activeElementValue = null;\n  activeElementValueProp = null;\n}\n/**\n * (For old IE.) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\n\n\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n\n  var value = nativeEvent.srcElement.value;\n\n  if (value === activeElementValue) {\n    return;\n  }\n\n  activeElementValue = value;\n  manualDispatchChangeEvent(nativeEvent);\n}\n/**\n * If a `change` event should be fired, returns the target's ID.\n */\n\n\nfunction getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topInput) {\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\n    // what we want so fall through here and trigger an abstract event\n    return topLevelTargetID;\n  }\n} // For IE8 and IE9.\n\n\nfunction handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to 'value'\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForValueChange();\n  }\n} // For IE8 and IE9.\n\n\nfunction getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    if (activeElement && activeElement.value !== activeElementValue) {\n      activeElementValue = activeElement.value;\n      return activeElementID;\n    }\n  }\n}\n/**\n * SECTION: handle `click` event\n */\n\n\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  return elem.nodeName === 'INPUT' && (elem.type === 'checkbox' || elem.type === 'radio');\n}\n\nfunction getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topClick) {\n    return topLevelTargetID;\n  }\n}\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\n\n\nvar ChangeEventPlugin = {\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n    var getTargetIDFunc, handleEventFunc;\n\n    if (shouldUseChangeEvent(topLevelTarget)) {\n      if (doesChangeEventBubble) {\n        getTargetIDFunc = getTargetIDForChangeEvent;\n      } else {\n        handleEventFunc = handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(topLevelTarget)) {\n      if (isInputEventSupported) {\n        getTargetIDFunc = getTargetIDForInputEvent;\n      } else {\n        getTargetIDFunc = getTargetIDForInputEventIE;\n        handleEventFunc = handleEventsForInputEventIE;\n      }\n    } else if (shouldUseClickEvent(topLevelTarget)) {\n      getTargetIDFunc = getTargetIDForClickEvent;\n    }\n\n    if (getTargetIDFunc) {\n      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);\n\n      if (targetID) {\n        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent);\n        EventPropagators.accumulateTwoPhaseDispatches(event);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);\n    }\n  }\n};\nmodule.exports = ChangeEventPlugin;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ChangeEventPlugin.js"],"names":["EventConstants","require","EventPluginHub","EventPropagators","ExecutionEnvironment","SyntheticEvent","isEventSupported","isTextInputElement","keyOf","topLevelTypes","eventTypes","change","phasedRegistrationNames","bubbled","onChange","captured","onChangeCapture","activeElement","activeElementID","activeElementValue","activeElementValueProp","shouldUseChangeEvent","elem","nodeName","type","doesChangeEventBubble","canUseDOM","document","documentMode","manualDispatchChangeEvent","nativeEvent","event","getPooled","accumulateTwoPhaseDispatches","enqueueEvents","processEventQueue","startWatchingForChangeEventIE8","target","targetID","attachEvent","stopWatchingForChangeEventIE8","detachEvent","getTargetIDForChangeEvent","topLevelType","topLevelTarget","topLevelTargetID","topChange","handleEventsForChangeEventIE8","topFocus","topBlur","isInputEventSupported","newValueProp","get","call","set","val","startWatchingForValueChange","value","Object","getOwnPropertyDescriptor","constructor","prototype","defineProperty","handlePropertyChange","stopWatchingForValueChange","propertyName","srcElement","getTargetIDForInputEvent","topInput","handleEventsForInputEventIE","getTargetIDForInputEventIE","topSelectionChange","topKeyUp","topKeyDown","shouldUseClickEvent","getTargetIDForClickEvent","topClick","ChangeEventPlugin","extractEvents","getTargetIDFunc","handleEventFunc","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIG,oBAAoB,GAAGH,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAII,cAAc,GAAGJ,OAAO,CAAC,kBAAD,CAA5B;;AAEA,IAAIK,gBAAgB,GAAGL,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIM,kBAAkB,GAAGN,OAAO,CAAC,sBAAD,CAAhC;;AACA,IAAIO,KAAK,GAAGP,OAAO,CAAC,SAAD,CAAnB;;AAEA,IAAIQ,aAAa,GAAGT,cAAc,CAACS,aAAnC;AAEA,IAAIC,UAAU,GAAG;AACfC,EAAAA,MAAM,EAAE;AACNC,IAAAA,uBAAuB,EAAE;AACvBC,MAAAA,OAAO,EAAEL,KAAK,CAAC;AAACM,QAAAA,QAAQ,EAAE;AAAX,OAAD,CADS;AAEvBC,MAAAA,QAAQ,EAAEP,KAAK,CAAC;AAACQ,QAAAA,eAAe,EAAE;AAAlB,OAAD;AAFQ;AADnB;AADO,CAAjB;AASA;AACA;AACA;;AACA,IAAIC,aAAa,GAAG,IAApB;AACA,IAAIC,eAAe,GAAG,IAAtB;AACA,IAAIC,kBAAkB,GAAG,IAAzB;AACA,IAAIC,sBAAsB,GAAG,IAA7B;AAEA;AACA;AACA;;AACA,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;AAClC,SACEA,IAAI,CAACC,QAAL,KAAkB,QAAlB,IACCD,IAAI,CAACC,QAAL,KAAkB,OAAlB,IAA6BD,IAAI,CAACE,IAAL,KAAc,MAF9C;AAID;;AAED,IAAIC,qBAAqB,GAAG,KAA5B;;AACA,IAAIrB,oBAAoB,CAACsB,SAAzB,EAAoC;AAClC;AACAD,EAAAA,qBAAqB,GAAGnB,gBAAgB,CAAC,QAAD,CAAhB,KACtB,EAAE,kBAAkBqB,QAApB,KAAiCA,QAAQ,CAACC,YAAT,GAAwB,CADnC,CAAxB;AAGD;;AAED,SAASC,yBAAT,CAAmCC,WAAnC,EAAgD;AAC9C,MAAIC,KAAK,GAAG1B,cAAc,CAAC2B,SAAf,CACVtB,UAAU,CAACC,MADD,EAEVO,eAFU,EAGVY,WAHU,CAAZ;AAKA3B,EAAAA,gBAAgB,CAAC8B,4BAAjB,CAA8CF,KAA9C,EAN8C,CAQ9C;AACA;AACA;AACA;;AACA7B,EAAAA,cAAc,CAACgC,aAAf,CAA6BH,KAA7B;AACA7B,EAAAA,cAAc,CAACiC,iBAAf;AACD;;AAED,SAASC,8BAAT,CAAwCC,MAAxC,EAAgDC,QAAhD,EAA0D;AACxDrB,EAAAA,aAAa,GAAGoB,MAAhB;AACAnB,EAAAA,eAAe,GAAGoB,QAAlB;AACArB,EAAAA,aAAa,CAACsB,WAAd,CAA0B,UAA1B,EAAsCV,yBAAtC;AACD;;AAED,SAASW,6BAAT,GAAyC;AACvC,MAAI,CAACvB,aAAL,EAAoB;AAClB;AACD;;AACDA,EAAAA,aAAa,CAACwB,WAAd,CAA0B,UAA1B,EAAsCZ,yBAAtC;AACAZ,EAAAA,aAAa,GAAG,IAAhB;AACAC,EAAAA,eAAe,GAAG,IAAlB;AACD;;AAED,SAASwB,yBAAT,CACIC,YADJ,EAEIC,cAFJ,EAGIC,gBAHJ,EAGsB;AACpB,MAAIF,YAAY,KAAKlC,aAAa,CAACqC,SAAnC,EAA8C;AAC5C,WAAOD,gBAAP;AACD;AACF;;AACD,SAASE,6BAAT,CACIJ,YADJ,EAEIC,cAFJ,EAGIC,gBAHJ,EAGsB;AACpB,MAAIF,YAAY,KAAKlC,aAAa,CAACuC,QAAnC,EAA6C;AAC3C;AACA;AACAR,IAAAA,6BAA6B;AAC7BJ,IAAAA,8BAA8B,CAACQ,cAAD,EAAiBC,gBAAjB,CAA9B;AACD,GALD,MAKO,IAAIF,YAAY,KAAKlC,aAAa,CAACwC,OAAnC,EAA4C;AACjDT,IAAAA,6BAA6B;AAC9B;AACF;AAGD;AACA;AACA;;;AACA,IAAIU,qBAAqB,GAAG,KAA5B;;AACA,IAAI9C,oBAAoB,CAACsB,SAAzB,EAAoC;AAClC;AACA;AACAwB,EAAAA,qBAAqB,GAAG5C,gBAAgB,CAAC,OAAD,CAAhB,KACtB,EAAE,kBAAkBqB,QAApB,KAAiCA,QAAQ,CAACC,YAAT,GAAwB,CADnC,CAAxB;AAGD;AAED;AACA;AACA;AACA;;;AACA,IAAIuB,YAAY,GAAI;AAClBC,EAAAA,GAAG,EAAE,YAAW;AACd,WAAOhC,sBAAsB,CAACgC,GAAvB,CAA2BC,IAA3B,CAAgC,IAAhC,CAAP;AACD,GAHiB;AAIlBC,EAAAA,GAAG,EAAE,UAASC,GAAT,EAAc;AACjB;AACApC,IAAAA,kBAAkB,GAAG,KAAKoC,GAA1B;AACAnC,IAAAA,sBAAsB,CAACkC,GAAvB,CAA2BD,IAA3B,CAAgC,IAAhC,EAAsCE,GAAtC;AACD;AARiB,CAApB;AAWA;AACA;AACA;AACA;AACA;;AACA,SAASC,2BAAT,CAAqCnB,MAArC,EAA6CC,QAA7C,EAAuD;AACrDrB,EAAAA,aAAa,GAAGoB,MAAhB;AACAnB,EAAAA,eAAe,GAAGoB,QAAlB;AACAnB,EAAAA,kBAAkB,GAAGkB,MAAM,CAACoB,KAA5B;AACArC,EAAAA,sBAAsB,GAAGsC,MAAM,CAACC,wBAAP,CACvBtB,MAAM,CAACuB,WAAP,CAAmBC,SADI,EAEvB,OAFuB,CAAzB;AAKAH,EAAAA,MAAM,CAACI,cAAP,CAAsB7C,aAAtB,EAAqC,OAArC,EAA8CkC,YAA9C;AACAlC,EAAAA,aAAa,CAACsB,WAAd,CAA0B,kBAA1B,EAA8CwB,oBAA9C;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASC,0BAAT,GAAsC;AACpC,MAAI,CAAC/C,aAAL,EAAoB;AAClB;AACD,GAHmC,CAKpC;;;AACA,SAAOA,aAAa,CAACwC,KAArB;AACAxC,EAAAA,aAAa,CAACwB,WAAd,CAA0B,kBAA1B,EAA8CsB,oBAA9C;AAEA9C,EAAAA,aAAa,GAAG,IAAhB;AACAC,EAAAA,eAAe,GAAG,IAAlB;AACAC,EAAAA,kBAAkB,GAAG,IAArB;AACAC,EAAAA,sBAAsB,GAAG,IAAzB;AACD;AAED;AACA;AACA;AACA;;;AACA,SAAS2C,oBAAT,CAA8BjC,WAA9B,EAA2C;AACzC,MAAIA,WAAW,CAACmC,YAAZ,KAA6B,OAAjC,EAA0C;AACxC;AACD;;AACD,MAAIR,KAAK,GAAG3B,WAAW,CAACoC,UAAZ,CAAuBT,KAAnC;;AACA,MAAIA,KAAK,KAAKtC,kBAAd,EAAkC;AAChC;AACD;;AACDA,EAAAA,kBAAkB,GAAGsC,KAArB;AAEA5B,EAAAA,yBAAyB,CAACC,WAAD,CAAzB;AACD;AAED;AACA;AACA;;;AACA,SAASqC,wBAAT,CACIxB,YADJ,EAEIC,cAFJ,EAGIC,gBAHJ,EAGsB;AACpB,MAAIF,YAAY,KAAKlC,aAAa,CAAC2D,QAAnC,EAA6C;AAC3C;AACA;AACA,WAAOvB,gBAAP;AACD;AACF,C,CAED;;;AACA,SAASwB,2BAAT,CACI1B,YADJ,EAEIC,cAFJ,EAGIC,gBAHJ,EAGsB;AACpB,MAAIF,YAAY,KAAKlC,aAAa,CAACuC,QAAnC,EAA6C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAgB,IAAAA,0BAA0B;AAC1BR,IAAAA,2BAA2B,CAACZ,cAAD,EAAiBC,gBAAjB,CAA3B;AACD,GAhBD,MAgBO,IAAIF,YAAY,KAAKlC,aAAa,CAACwC,OAAnC,EAA4C;AACjDe,IAAAA,0BAA0B;AAC3B;AACF,C,CAED;;;AACA,SAASM,0BAAT,CACI3B,YADJ,EAEIC,cAFJ,EAGIC,gBAHJ,EAGsB;AACpB,MAAIF,YAAY,KAAKlC,aAAa,CAAC8D,kBAA/B,IACA5B,YAAY,KAAKlC,aAAa,CAAC+D,QAD/B,IAEA7B,YAAY,KAAKlC,aAAa,CAACgE,UAFnC,EAE+C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIxD,aAAa,IAAIA,aAAa,CAACwC,KAAd,KAAwBtC,kBAA7C,EAAiE;AAC/DA,MAAAA,kBAAkB,GAAGF,aAAa,CAACwC,KAAnC;AACA,aAAOvC,eAAP;AACD;AACF;AACF;AAGD;AACA;AACA;;;AACA,SAASwD,mBAAT,CAA6BpD,IAA7B,EAAmC;AACjC;AACA;AACA;AACA,SACEA,IAAI,CAACC,QAAL,KAAkB,OAAlB,KACCD,IAAI,CAACE,IAAL,KAAc,UAAd,IAA4BF,IAAI,CAACE,IAAL,KAAc,OAD3C,CADF;AAID;;AAED,SAASmD,wBAAT,CACIhC,YADJ,EAEIC,cAFJ,EAGIC,gBAHJ,EAGsB;AACpB,MAAIF,YAAY,KAAKlC,aAAa,CAACmE,QAAnC,EAA6C;AAC3C,WAAO/B,gBAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIgC,iBAAiB,GAAG;AAEtBnE,EAAAA,UAAU,EAAEA,UAFU;;AAItB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEoE,EAAAA,aAAa,EAAE,UACXnC,YADW,EAEXC,cAFW,EAGXC,gBAHW,EAIXf,WAJW,EAIE;AAEf,QAAIiD,eAAJ,EAAqBC,eAArB;;AACA,QAAI3D,oBAAoB,CAACuB,cAAD,CAAxB,EAA0C;AACxC,UAAInB,qBAAJ,EAA2B;AACzBsD,QAAAA,eAAe,GAAGrC,yBAAlB;AACD,OAFD,MAEO;AACLsC,QAAAA,eAAe,GAAGjC,6BAAlB;AACD;AACF,KAND,MAMO,IAAIxC,kBAAkB,CAACqC,cAAD,CAAtB,EAAwC;AAC7C,UAAIM,qBAAJ,EAA2B;AACzB6B,QAAAA,eAAe,GAAGZ,wBAAlB;AACD,OAFD,MAEO;AACLY,QAAAA,eAAe,GAAGT,0BAAlB;AACAU,QAAAA,eAAe,GAAGX,2BAAlB;AACD;AACF,KAPM,MAOA,IAAIK,mBAAmB,CAAC9B,cAAD,CAAvB,EAAyC;AAC9CmC,MAAAA,eAAe,GAAGJ,wBAAlB;AACD;;AAED,QAAII,eAAJ,EAAqB;AACnB,UAAIzC,QAAQ,GAAGyC,eAAe,CAC5BpC,YAD4B,EAE5BC,cAF4B,EAG5BC,gBAH4B,CAA9B;;AAKA,UAAIP,QAAJ,EAAc;AACZ,YAAIP,KAAK,GAAG1B,cAAc,CAAC2B,SAAf,CACVtB,UAAU,CAACC,MADD,EAEV2B,QAFU,EAGVR,WAHU,CAAZ;AAKA3B,QAAAA,gBAAgB,CAAC8B,4BAAjB,CAA8CF,KAA9C;AACA,eAAOA,KAAP;AACD;AACF;;AAED,QAAIiD,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CACbrC,YADa,EAEbC,cAFa,EAGbC,gBAHa,CAAf;AAKD;AACF;AA5DqB,CAAxB;AAgEAoC,MAAM,CAACC,OAAP,GAAiBL,iBAAjB","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ChangeEventPlugin\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginHub = require(\"./EventPluginHub\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar isEventSupported = require(\"./isEventSupported\");\nvar isTextInputElement = require(\"./isTextInputElement\");\nvar keyOf = require(\"./keyOf\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onChange: null}),\n      captured: keyOf({onChangeCapture: null})\n    }\n  }\n};\n\n/**\n * For IE shims\n */\nvar activeElement = null;\nvar activeElementID = null;\nvar activeElementValue = null;\nvar activeElementValueProp = null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem) {\n  return (\n    elem.nodeName === 'SELECT' ||\n    (elem.nodeName === 'INPUT' && elem.type === 'file')\n  );\n}\n\nvar doesChangeEventBubble = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble = isEventSupported('change') && (\n    !('documentMode' in document) || document.documentMode > 8\n  );\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = SyntheticEvent.getPooled(\n    eventTypes.change,\n    activeElementID,\n    nativeEvent\n  );\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n\n  // If change bubbled, we'd just bind to it like all the other events\n  // and have it go through ReactEventTopLevelCallback. Since it doesn't, we\n  // manually listen for the change event and so we have to enqueue and\n  // process the abstract event manually.\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue();\n}\n\nfunction startWatchingForChangeEventIE8(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\n}\n\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\n  activeElement = null;\n  activeElementID = null;\n}\n\nfunction getTargetIDForChangeEvent(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topChange) {\n    return topLevelTargetID;\n  }\n}\nfunction handleEventsForChangeEventIE8(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForChangeEventIE8();\n  }\n}\n\n\n/**\n * SECTION: handle `input` event\n */\nvar isInputEventSupported = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events\n  isInputEventSupported = isEventSupported('input') && (\n    !('documentMode' in document) || document.documentMode > 9\n  );\n}\n\n/**\n * (For old IE.) Replacement getter/setter for the `value` property that gets\n * set on the active element.\n */\nvar newValueProp =  {\n  get: function() {\n    return activeElementValueProp.get.call(this);\n  },\n  set: function(val) {\n    // Cast to a string so we can do equality checks.\n    activeElementValue = '' + val;\n    activeElementValueProp.set.call(this, val);\n  }\n};\n\n/**\n * (For old IE.) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElementValue = target.value;\n  activeElementValueProp = Object.getOwnPropertyDescriptor(\n    target.constructor.prototype,\n    'value'\n  );\n\n  Object.defineProperty(activeElement, 'value', newValueProp);\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);\n}\n\n/**\n * (For old IE.) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n\n  // delete restores the original property definition\n  delete activeElement.value;\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);\n\n  activeElement = null;\n  activeElementID = null;\n  activeElementValue = null;\n  activeElementValueProp = null;\n}\n\n/**\n * (For old IE.) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n  var value = nativeEvent.srcElement.value;\n  if (value === activeElementValue) {\n    return;\n  }\n  activeElementValue = value;\n\n  manualDispatchChangeEvent(nativeEvent);\n}\n\n/**\n * If a `change` event should be fired, returns the target's ID.\n */\nfunction getTargetIDForInputEvent(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topInput) {\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\n    // what we want so fall through here and trigger an abstract event\n    return topLevelTargetID;\n  }\n}\n\n// For IE8 and IE9.\nfunction handleEventsForInputEventIE(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to 'value'\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetIDForInputEventIE(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topSelectionChange ||\n      topLevelType === topLevelTypes.topKeyUp ||\n      topLevelType === topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    if (activeElement && activeElement.value !== activeElementValue) {\n      activeElementValue = activeElement.value;\n      return activeElementID;\n    }\n  }\n}\n\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  return (\n    elem.nodeName === 'INPUT' &&\n    (elem.type === 'checkbox' || elem.type === 'radio')\n  );\n}\n\nfunction getTargetIDForClickEvent(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topClick) {\n    return topLevelTargetID;\n  }\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nvar ChangeEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    var getTargetIDFunc, handleEventFunc;\n    if (shouldUseChangeEvent(topLevelTarget)) {\n      if (doesChangeEventBubble) {\n        getTargetIDFunc = getTargetIDForChangeEvent;\n      } else {\n        handleEventFunc = handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(topLevelTarget)) {\n      if (isInputEventSupported) {\n        getTargetIDFunc = getTargetIDForInputEvent;\n      } else {\n        getTargetIDFunc = getTargetIDForInputEventIE;\n        handleEventFunc = handleEventsForInputEventIE;\n      }\n    } else if (shouldUseClickEvent(topLevelTarget)) {\n      getTargetIDFunc = getTargetIDForClickEvent;\n    }\n\n    if (getTargetIDFunc) {\n      var targetID = getTargetIDFunc(\n        topLevelType,\n        topLevelTarget,\n        topLevelTargetID\n      );\n      if (targetID) {\n        var event = SyntheticEvent.getPooled(\n          eventTypes.change,\n          targetID,\n          nativeEvent\n        );\n        EventPropagators.accumulateTwoPhaseDispatches(event);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(\n        topLevelType,\n        topLevelTarget,\n        topLevelTargetID\n      );\n    }\n  }\n\n};\n\nmodule.exports = ChangeEventPlugin;\n"]},"metadata":{},"sourceType":"script"}