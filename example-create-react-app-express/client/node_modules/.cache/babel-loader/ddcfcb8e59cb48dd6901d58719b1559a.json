{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMInput\n */\n\"use strict\";\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\n\nvar LinkedValueMixin = require(\"./LinkedValueMixin\");\n\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\n\nvar ReactDOM = require(\"./ReactDOM\");\n\nvar ReactMount = require(\"./ReactMount\");\n\nvar invariant = require(\"./invariant\");\n\nvar merge = require(\"./merge\"); // Store a reference to the <input> `ReactDOMComponent`.\n\n\nvar input = ReactDOM.input;\nvar instancesByReactID = {};\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\n\nvar ReactDOMInput = ReactCompositeComponent.createClass({\n  mixins: [LinkedValueMixin],\n  getInitialState: function () {\n    var defaultValue = this.props.defaultValue;\n    return {\n      checked: this.props.defaultChecked || false,\n      value: defaultValue != null ? defaultValue : null\n    };\n  },\n  shouldComponentUpdate: function () {\n    // Defer any updates to this component during the `onChange` handler.\n    return !this._isChanging;\n  },\n  render: function () {\n    // Clone `this.props` so we don't mutate the input.\n    var props = merge(this.props);\n    props.defaultChecked = null;\n    props.defaultValue = null;\n    props.checked = this.props.checked != null ? this.props.checked : this.state.checked;\n    var value = this.getValue();\n    props.value = value != null ? value : this.state.value;\n    props.onChange = this._handleChange;\n    return input(props, this.props.children);\n  },\n  componentDidMount: function (rootNode) {\n    var id = ReactMount.getID(rootNode);\n    instancesByReactID[id] = this;\n  },\n  componentWillUnmount: function () {\n    var rootNode = this.getDOMNode();\n    var id = ReactMount.getID(rootNode);\n    delete instancesByReactID[id];\n  },\n  componentDidUpdate: function (prevProps, prevState, rootNode) {\n    if (this.props.checked != null) {\n      DOMPropertyOperations.setValueForProperty(rootNode, 'checked', this.props.checked || false);\n    }\n\n    var value = this.getValue();\n\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n  _handleChange: function (event) {\n    var returnValue;\n    var onChange = this.getOnChange();\n\n    if (onChange) {\n      this._isChanging = true;\n      returnValue = onChange(event);\n      this._isChanging = false;\n    }\n\n    this.setState({\n      checked: event.target.checked,\n      value: event.target.value\n    });\n    var name = this.props.name;\n\n    if (this.props.type === 'radio' && name != null) {\n      var rootNode = this.getDOMNode(); // If `rootNode.form` was non-null, then we could try `form.elements`,\n      // but that sometimes behaves strangely in IE8. We could also try using\n      // `form.getElementsByName`, but that will only return direct children\n      // and won't include inputs that use the HTML5 `form=` attribute. Since\n      // the input might not even be in a form, let's just use the global\n      // `getElementsByName` to ensure we don't miss anything.\n\n      var group = document.getElementsByName(name);\n\n      for (var i = 0, groupLen = group.length; i < groupLen; i++) {\n        var otherNode = group[i];\n\n        if (otherNode === rootNode || otherNode.nodeName !== 'INPUT' || otherNode.type !== 'radio' || otherNode.form !== rootNode.form) {\n          continue;\n        }\n\n        var otherID = ReactMount.getID(otherNode);\n        \"production\" !== process.env.NODE_ENV ? invariant(otherID, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(otherID);\n        var otherInstance = instancesByReactID[otherID];\n        \"production\" !== process.env.NODE_ENV ? invariant(otherInstance, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(otherInstance); // In some cases, this will actually change the `checked` state value.\n        // In other cases, there's no change but this forces a reconcile upon\n        // which componentDidUpdate will reset the DOM property to whatever it\n        // should be.\n\n        otherInstance.setState({\n          checked: false\n        });\n      }\n    }\n\n    return returnValue;\n  }\n});\nmodule.exports = ReactDOMInput;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/ReactDOMInput.js"],"names":["DOMPropertyOperations","require","LinkedValueMixin","ReactCompositeComponent","ReactDOM","ReactMount","invariant","merge","input","instancesByReactID","ReactDOMInput","createClass","mixins","getInitialState","defaultValue","props","checked","defaultChecked","value","shouldComponentUpdate","_isChanging","render","state","getValue","onChange","_handleChange","children","componentDidMount","rootNode","id","getID","componentWillUnmount","getDOMNode","componentDidUpdate","prevProps","prevState","setValueForProperty","event","returnValue","getOnChange","setState","target","name","type","group","document","getElementsByName","i","groupLen","length","otherNode","nodeName","form","otherID","process","env","NODE_ENV","otherInstance","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMInput\n */\n\n\"use strict\";\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar LinkedValueMixin = require(\"./LinkedValueMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactDOM = require(\"./ReactDOM\");\nvar ReactMount = require(\"./ReactMount\");\n\nvar invariant = require(\"./invariant\");\nvar merge = require(\"./merge\");\n\n// Store a reference to the <input> `ReactDOMComponent`.\nvar input = ReactDOM.input;\n\nvar instancesByReactID = {};\n\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = ReactCompositeComponent.createClass({\n  mixins: [LinkedValueMixin],\n\n  getInitialState: function() {\n    var defaultValue = this.props.defaultValue;\n    return {\n      checked: this.props.defaultChecked || false,\n      value: defaultValue != null ? defaultValue : null\n    };\n  },\n\n  shouldComponentUpdate: function() {\n    // Defer any updates to this component during the `onChange` handler.\n    return !this._isChanging;\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = merge(this.props);\n\n    props.defaultChecked = null;\n    props.defaultValue = null;\n    props.checked =\n      this.props.checked != null ? this.props.checked : this.state.checked;\n\n    var value = this.getValue();\n    props.value = value != null ? value : this.state.value;\n\n    props.onChange = this._handleChange;\n\n    return input(props, this.props.children);\n  },\n\n  componentDidMount: function(rootNode) {\n    var id = ReactMount.getID(rootNode);\n    instancesByReactID[id] = this;\n  },\n\n  componentWillUnmount: function() {\n    var rootNode = this.getDOMNode();\n    var id = ReactMount.getID(rootNode);\n    delete instancesByReactID[id];\n  },\n\n  componentDidUpdate: function(prevProps, prevState, rootNode) {\n    if (this.props.checked != null) {\n      DOMPropertyOperations.setValueForProperty(\n        rootNode,\n        'checked',\n        this.props.checked || false\n      );\n    }\n\n    var value = this.getValue();\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = this.getOnChange();\n    if (onChange) {\n      this._isChanging = true;\n      returnValue = onChange(event);\n      this._isChanging = false;\n    }\n    this.setState({\n      checked: event.target.checked,\n      value: event.target.value\n    });\n\n    var name = this.props.name;\n    if (this.props.type === 'radio' && name != null) {\n      var rootNode = this.getDOMNode();\n      // If `rootNode.form` was non-null, then we could try `form.elements`,\n      // but that sometimes behaves strangely in IE8. We could also try using\n      // `form.getElementsByName`, but that will only return direct children\n      // and won't include inputs that use the HTML5 `form=` attribute. Since\n      // the input might not even be in a form, let's just use the global\n      // `getElementsByName` to ensure we don't miss anything.\n      var group = document.getElementsByName(name);\n      for (var i = 0, groupLen = group.length; i < groupLen; i++) {\n        var otherNode = group[i];\n        if (otherNode === rootNode ||\n            otherNode.nodeName !== 'INPUT' || otherNode.type !== 'radio' ||\n            otherNode.form !== rootNode.form) {\n          continue;\n        }\n        var otherID = ReactMount.getID(otherNode);\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          otherID,\n          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +\n          'same `name` is not supported.'\n        ) : invariant(otherID));\n        var otherInstance = instancesByReactID[otherID];\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          otherInstance,\n          'ReactDOMInput: Unknown radio button ID %s.',\n          otherID\n        ) : invariant(otherInstance));\n        // In some cases, this will actually change the `checked` state value.\n        // In other cases, there's no change but this forces a reconcile upon\n        // which componentDidUpdate will reset the DOM property to whatever it\n        // should be.\n        otherInstance.setState({\n          checked: false\n        });\n      }\n    }\n\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMInput;\n"]},"metadata":{},"sourceType":"script"}