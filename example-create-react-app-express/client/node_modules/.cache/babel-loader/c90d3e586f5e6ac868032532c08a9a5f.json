{"ast":null,"code":"/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule CallbackRegistry\n * @typechecks static-only\n */\n\"use strict\";\n\nvar listenerBank = {};\n/**\n * Stores \"listeners\" by `registrationName`/`id`. There should be at most one\n * \"listener\" per `registrationName`/`id` in the `listenerBank`.\n *\n * Access listeners via `listenerBank[registrationName][id]`.\n *\n * @class CallbackRegistry\n * @internal\n */\n\nvar CallbackRegistry = {\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function (id, registrationName, listener) {\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function (id) {\n    for (var registrationName in listenerBank) {\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * This is needed for tests only. Do not use!\n   */\n  __purge: function () {\n    listenerBank = {};\n  }\n};\nmodule.exports = CallbackRegistry;","map":{"version":3,"sources":["C:/Users/17735/Documents/itmd511/example-create-react-app-express/node_modules/react/lib/CallbackRegistry.js"],"names":["listenerBank","CallbackRegistry","putListener","id","registrationName","listener","bankForRegistrationName","getListener","deleteListener","deleteAllListeners","__purge","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,YAAY,GAAG,EAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,gBAAgB,GAAG;AAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,EAAE,UAASC,EAAT,EAAaC,gBAAb,EAA+BC,QAA/B,EAAyC;AACpD,QAAIC,uBAAuB,GACzBN,YAAY,CAACI,gBAAD,CAAZ,KAAmCJ,YAAY,CAACI,gBAAD,CAAZ,GAAiC,EAApE,CADF;AAEAE,IAAAA,uBAAuB,CAACH,EAAD,CAAvB,GAA8BE,QAA9B;AACD,GAboB;;AAerB;AACF;AACA;AACA;AACA;AACEE,EAAAA,WAAW,EAAE,UAASJ,EAAT,EAAaC,gBAAb,EAA+B;AAC1C,QAAIE,uBAAuB,GAAGN,YAAY,CAACI,gBAAD,CAA1C;AACA,WAAOE,uBAAuB,IAAIA,uBAAuB,CAACH,EAAD,CAAzD;AACD,GAvBoB;;AAyBrB;AACF;AACA;AACA;AACA;AACA;AACEK,EAAAA,cAAc,EAAE,UAASL,EAAT,EAAaC,gBAAb,EAA+B;AAC7C,QAAIE,uBAAuB,GAAGN,YAAY,CAACI,gBAAD,CAA1C;;AACA,QAAIE,uBAAJ,EAA6B;AAC3B,aAAOA,uBAAuB,CAACH,EAAD,CAA9B;AACD;AACF,GApCoB;;AAsCrB;AACF;AACA;AACA;AACA;AACEM,EAAAA,kBAAkB,EAAE,UAASN,EAAT,EAAa;AAC/B,SAAK,IAAIC,gBAAT,IAA6BJ,YAA7B,EAA2C;AACzC,aAAOA,YAAY,CAACI,gBAAD,CAAZ,CAA+BD,EAA/B,CAAP;AACD;AACF,GA/CoB;;AAiDrB;AACF;AACA;AACEO,EAAAA,OAAO,EAAE,YAAW;AAClBV,IAAAA,YAAY,GAAG,EAAf;AACD;AAtDoB,CAAvB;AA0DAW,MAAM,CAACC,OAAP,GAAiBX,gBAAjB","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule CallbackRegistry\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar listenerBank = {};\n\n/**\n * Stores \"listeners\" by `registrationName`/`id`. There should be at most one\n * \"listener\" per `registrationName`/`id` in the `listenerBank`.\n *\n * Access listeners via `listenerBank[registrationName][id]`.\n *\n * @class CallbackRegistry\n * @internal\n */\nvar CallbackRegistry = {\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function(id, registrationName, listener) {\n    var bankForRegistrationName =\n      listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function(id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function(id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function(id) {\n    for (var registrationName in listenerBank) {\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * This is needed for tests only. Do not use!\n   */\n  __purge: function() {\n    listenerBank = {};\n  }\n\n};\n\nmodule.exports = CallbackRegistry;\n"]},"metadata":{},"sourceType":"script"}